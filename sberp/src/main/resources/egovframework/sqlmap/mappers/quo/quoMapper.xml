<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="egovframework.quo.service.QuoMapper">

	<select id="selectListCnt" parameterType="comParam" resultType="int">
		SELECT 
			COUNT(QUO_TB.QUO_SEQ)
		FROM QUO_TB
			
		    INNER JOIN JOB_TB
		    ON QUO_TB.QUO_YM = JOB_TB.QUO_YM
		    AND QUO_TB.quo_seq = JOB_TB.QUO_SEQ
		    AND JOB_TB.STATE != 'D'
		    
		    LEFT JOIN (
				SELECT QUO_YM, QUO_SEQ, sum(CHRGS) CHRGS, sum(NET_SALES) NET_SALES
				FROM TEST_ITEM_TB
		        where state != 'D'
		        group by QUO_YM, QUO_SEQ
		    ) items
		    ON QUO_TB.QUO_YM = items.QUO_YM
		    AND QUO_TB.quo_seq = items.QUO_SEQ
		        
		    LEFT JOIN SLS_TB
		    ON QUO_TB.QUO_YM = SLS_TB.QUO_YM
		    AND QUO_TB.quo_seq = SLS_TB.QUO_SEQ
		    AND SLS_TB.state != 'D'
		    
		    LEFT JOIN SLS_TB chqSls
		    ON QUO_TB.CHQ_YM = chqSls.CHQ_YM
		    AND QUO_TB.CHQ_SEQ = chqSls.CHQ_SEQ
		    AND chqSls.STATE != 'D'
			    
		    LEFT JOIN CMPY_TB
			ON JOB_TB.CMPY_SEQ = CMPY_TB.CMPY_SEQ
    
		where 1=1
		<if test="searchVO != null">
	        <foreach collection="searchVO" item="item" separator="">
	       
	        	<choose>
					<!-- 1	고객유형 -->
					<when test="item.searchCode == 1">AND IFNULL(CMPY_TB.CMPY_CODE,'9999') = #{item.searchWord}</when>
					<!-- 7	고지부담당자 -->
					<when test="item.searchCode == 7">AND FN_MEM_NAME(JOB_TB.MNG_ID) LIKE CONCAT ('%',#{item.searchWord},'%')</when>
					<!-- 4	컨설팅명 -->
					<when test="item.searchCode == 4">AND IFNULL(CMPY_TB.CMPY_NAME, '') LIKE CONCAT('%',#{item.searchWord},'%')</when>
					<!-- 6	제품명 -->
					<when test="item.searchCode == 6">AND IFNULL(JOB_TB.PRDCT_NAME, '') LIKE CONCAT('%',#{item.searchWord},'%')</when>
					<!-- 27	모델명 -->
					<when test="item.searchCode == 27">AND IFNULL(JOB_TB.MODEL_NAME, '') LIKE CONCAT('%',#{item.searchWord},'%')</when>
					<!-- 12	회사명 -->
					<when test="item.searchCode == 12">AND IFNULL(JOB_TB.CMPY_NAME, '') LIKE CONCAT('%',#{item.searchWord},'%')</when>
					<!-- 15	작성일 -->
					<when test="item.searchCode == 15">AND DATE_FORMAT(QUO_TB.INS_DT, '%Y%m%d') BETWEEN DATE_FORMAT(#{item.startDate}, '%Y%m%d') AND DATE_FORMAT(#{item.endDate}, '%Y%m%d')</when>
					<!-- 16	매출확정일 -->
					<when test="item.searchCode == 16">AND 
						(DATE_FORMAT(SLS_TB.CNFRM_DT, '%Y%m%d') BETWEEN DATE_FORMAT(#{item.startDate}, '%Y%m%d') AND DATE_FORMAT(#{item.endDate}, '%Y%m%d') OR
						DATE_FORMAT(chqSls.CNFRM_DT, '%Y%m%d') BETWEEN DATE_FORMAT(#{item.startDate}, '%Y%m%d') AND DATE_FORMAT(#{item.endDate}, '%Y%m%d'))
					</when>
					<!-- 19 매출확정자 -->
					<when test="item.searchCode == 19">AND 
						(IFNULL(FN_MEM_NAME(SLS_TB.CNFRM_ID),'') LIKE CONCAT('%',#{item.searchWord},'%') OR
						IFNULL(FN_MEM_NAME(chqSls.CNFRM_ID),'') LIKE CONCAT('%',#{item.searchWord},'%'))
					</when>
					<!-- 57	프로젝트상태 -->
	        		<when test="item.searchCode == 57">AND JOB_TB.STATE_CODE = #{item.searchWord}</when>
	        		<!-- 58	프로젝트상태변경일 -->
	        		<when test="item.searchCode == 58">AND DATE_FORMAT(JOB_TB.STATE_UDT_DT, '%Y%m%d') BETWEEN DATE_FORMAT(#{item.startDate}, '%Y%m%d') AND DATE_FORMAT(#{item.endDate}, '%Y%m%d')</when>
	        		<!-- 5	견적서번호 -->
					<when test="item.searchCode == 5">AND CONCAT ('Q', QUO_TB.QUO_YM, '-' , QUO_TB.TYPE, LPAD(QUO_TB.QUO_SEQ,4,0)) LIKE CONCAT ('%',#{item.searchWord},'%')</when>
					<!-- 61	신청서번호 -->
					<when test="item.searchCode == 61">AND CONCAT ('SB', JOB_TB.SBK_YM, '-' , JOB_TB.SBK_TYPE, LPAD(JOB_TB.SBK_SEQ,4,0), IF(JOB_TB.SBK_REVISION > 0, CONCAT ('-',JOB_TB.SBK_REVISION), '')) LIKE CONCAT ('%',#{item.searchWord},'%')</when>
	        	</choose>
	        </foreach>
		</if>
	</select>
	
	<select id="selectList" parameterType="comParam" resultType="quoRes">
		select 
			@rownum:=@rownum+1 as no,
			lst.*
		from (
			SELECT 
				#ROW_NUMBER() OVER(ORDER BY QUO_TB.ins_dt) AS no,
				JOB_TB.JOB_SEQ,
				IF (QUO_TB.CHQ_SEQ=0, '-', CONCAT ('CH',QUO_TB.CHQ_YM,'-',LPAD(QUO_TB.CHQ_SEQ,3,0))) chqId,
			    FN_GET_SEQSTRING('Q', QUO_TB.QUO_YM, TYPE, QUO_TB.QUO_SEQ) quoId, 
				FN_MEM_NAME (JOB_TB.MNG_ID) memName,
			    DATE_FORMAT(QUO_TB.INS_DT, '%Y-%m-%d') insDtStr,
			    if(QUO_TB.CHQ_SEQ = 0,
						IFNULL (date_format(SLS_TB.CNFRM_DT, '%Y-%m-%d'),''),
                        IFNULL (date_format(chqSls.CNFRM_DT, '%Y-%m-%d'),'')) cnfrmDtStr,
                if(QUO_TB.CHQ_SEQ = 0,
					IFNULL (FN_MEM_NAME(SLS_TB.CNFRM_ID),''),
                    IFNULL (FN_MEM_NAME(chqSls.CNFRM_ID),'')) cnfrmName,
			    JOB_TB.CMPY_SEQ, 
			    IFNULL (FN_CODE_NAME(CMPY_TB.CMPY_CODE,'PT'), '미등록') cmpy_type,
			    IFNULL (CMPY_TB.CMPY_NAME, '') cmpyTitle,
			    IFNULL (JOB_TB.CMPY_NAME, '') cmpyName,
			    JOB_TB.PRDCT_NAME,
			    IFNULL (JOB_TB.MODEL_NAME, '') MODEL_NAME,
			    IFNULL (TOTAL_VAT, 0) CHRGS,
			    IFNULL (items.NET_SALES, 0) NET_SALES,
			    IFNULL (JOB_TB.CNS_SEQ, '') CNS_SEQ,
			    IFNULL (FN_LAST_CNS_MENO(JOB_TB.CNS_SEQ), '') lastMemo,
			    IFNULL (FN_CODE_NAME (JOB_TB.STATE_CODE, 'CP'), '변경') stateCode,
			    IFNULL (DATE_FORMAT(JOB_TB.STATE_UDT_DT, '%Y-%m-%d'), '') stateUdtDt,
			    IFNULL (CONCAT ('SB', JOB_TB.SBK_YM, '-' , JOB_TB.SBK_TYPE, LPAD(JOB_TB.SBK_SEQ,4,0), IF(SBK_REVISION > 0, CONCAT ('-',SBK_REVISION), '')), '') sbkId
			    
			FROM QUO_TB
				
			    INNER JOIN JOB_TB
			    ON QUO_TB.QUO_YM = JOB_TB.QUO_YM
			    AND QUO_TB.quo_seq = JOB_TB.QUO_SEQ
			    AND JOB_TB.STATE != 'D'
			    
			    LEFT JOIN (
					SELECT QUO_YM, QUO_SEQ, SUM(CHRGS) CHRGS, SUM(NET_SALES) NET_SALES
					FROM TEST_ITEM_TB
			        WHERE STATE != 'D'
			        GROUP BY QUO_YM, QUO_SEQ
			    ) items
			    ON QUO_TB.QUO_YM = items.QUO_YM
			    AND QUO_TB.QUO_SEQ = items.QUO_SEQ
			        
			    LEFT JOIN SLS_TB
			    ON QUO_TB.QUO_YM = SLS_TB.QUO_YM
			    AND QUO_TB.QUO_SEQ = SLS_TB.QUO_SEQ
			    AND SLS_TB.STATE != 'D'
			    
			    LEFT JOIN SLS_TB chqSls
			    ON QUO_TB.CHQ_YM = chqSls.CHQ_YM
			    AND QUO_TB.CHQ_SEQ = chqSls.CHQ_SEQ
			    AND chqSls.STATE != 'D'
			    
			    LEFT JOIN CMPY_TB
				ON JOB_TB.CMPY_SEQ = CMPY_TB.CMPY_SEQ
	    		
	    		INNER JOIN (SELECT @rownum:=0) r
	    		
			WHERE 1=1
			<if test="searchVO != null">
		        <foreach collection="searchVO" item="item" separator="">
		       
		        	<choose>
						<!-- 1	고객유형 -->
						<when test="item.searchCode == 1">AND IFNULL(CMPY_TB.CMPY_CODE,'9999') = #{item.searchWord}</when>
						<!-- 7	고지부담당자 -->
						<when test="item.searchCode == 7">AND FN_MEM_NAME(JOB_TB.MNG_ID) LIKE CONCAT ('%',#{item.searchWord},'%')</when>
						<!-- 4	컨설팅명 -->
						<when test="item.searchCode == 4">AND IFNULL(CMPY_TB.CMPY_NAME, '') LIKE CONCAT('%',#{item.searchWord},'%')</when>
						<!-- 6	제품명 -->
						<when test="item.searchCode == 6">AND IFNULL(JOB_TB.PRDCT_NAME, '') LIKE CONCAT('%',#{item.searchWord},'%')</when>
						<!-- 27	모델명 -->
						<when test="item.searchCode == 27">AND IFNULL(JOB_TB.MODEL_NAME, '') LIKE CONCAT('%',#{item.searchWord},'%')</when>
						<!-- 12	회사명 -->
						<when test="item.searchCode == 12">AND IFNULL(JOB_TB.CMPY_NAME, '') LIKE CONCAT('%',#{item.searchWord},'%')</when>
						<!-- 15	작성일 -->
						<when test="item.searchCode == 15">AND DATE_FORMAT(QUO_TB.INS_DT, '%Y%m%d') BETWEEN DATE_FORMAT(#{item.startDate}, '%Y%m%d') AND DATE_FORMAT(#{item.endDate}, '%Y%m%d')</when>
						<!-- 16	매출확정일 -->
						<when test="item.searchCode == 16">AND 
							(DATE_FORMAT(SLS_TB.CNFRM_DT, '%Y%m%d') BETWEEN DATE_FORMAT(#{item.startDate}, '%Y%m%d') AND DATE_FORMAT(#{item.endDate}, '%Y%m%d') OR
							DATE_FORMAT(chqSls.CNFRM_DT, '%Y%m%d') BETWEEN DATE_FORMAT(#{item.startDate}, '%Y%m%d') AND DATE_FORMAT(#{item.endDate}, '%Y%m%d'))
						</when>
						<!-- 19 매출확정자 -->
						<when test="item.searchCode == 19">AND 
							(IFNULL(FN_MEM_NAME(SLS_TB.CNFRM_ID),'') LIKE CONCAT('%',#{item.searchWord},'%') OR
							IFNULL(FN_MEM_NAME(chqSls.CNFRM_ID),'') LIKE CONCAT('%',#{item.searchWord},'%'))
						</when>
						<!-- 57	프로젝트상태 -->
		        		<when test="item.searchCode == 57">AND JOB_TB.STATE_CODE = #{item.searchWord}</when>
		        		<!-- 58	프로젝트상태변경일 -->
		        		<when test="item.searchCode == 58">AND DATE_FORMAT(JOB_TB.STATE_UDT_DT, '%Y%m%d') BETWEEN DATE_FORMAT(#{item.startDate}, '%Y%m%d') AND DATE_FORMAT(#{item.endDate}, '%Y%m%d')</when>
		        		<!-- 5	견적서번호 -->
						<when test="item.searchCode == 5">AND CONCAT ('Q', QUO_TB.QUO_YM, '-' , QUO_TB.TYPE, LPAD(QUO_TB.QUO_SEQ,4,0)) LIKE CONCAT ('%',#{item.searchWord},'%')</when>
						<!-- 61	신청서번호 -->
						<when test="item.searchCode == 61">AND CONCAT ('SB', JOB_TB.SBK_YM, '-' , JOB_TB.SBK_TYPE, LPAD(JOB_TB.SBK_SEQ,4,0), IF(JOB_TB.SBK_REVISION > 0, CONCAT ('-',JOB_TB.SBK_REVISION), '')) LIKE CONCAT ('%',#{item.searchWord},'%')</when>
		        	</choose>
		        </foreach>
			</if>
	        ORDER BY QUO_TB.INS_DT ASC
	    ) lst
	    ORDER BY NO DESC
		LIMIT #{pageUnit} OFFSET #{firstIndex};
	</select>
	
	<select id="selectRef" parameterType="quoReq" resultType="String">
  		SELECT FN_GET_SEQSTRING('Q',ifnull(#{quoYm},date_format(now(), '%y%m')),'G',#{quoSeq}) FROM DUAL
	</select>
	
	<insert id="insert" parameterType="quoReq">
	    <selectKey keyProperty="quoSeq" resultType="int" order="BEFORE">
	        SELECT ifnull(max(QUO_SEQ),0)+1 FROM QUO_TB WHERE substring(QUO_YM,1,2) = date_format(now(), '%y')
	    </selectKey>
			INSERT INTO QUO_TB
			(
				QUO_YM,
				QUO_SEQ,
				ISSUE_DT,
				TRGT_CRTFC,
				PRD_INF,
				POWER_SUPLY_YN,
				WGHT_YN,
				MEMO,
				VAT_YN,
				NEED_WEEK,
				SPCL_CNDTN,
				SGN_URL,
				QUO_STATE_CODE,
				VERSION,
				<if test="estCmpDt != null and estCmpDt != ''">
				EST_CMP_DT,
				</if>
				COST_TOTAL,
				TOTAL_VAT,
				INS_MEM_ID,
				UDT_MEM_ID
			)
			VALUES
			(
				date_format(now(), '%y%m'),
				#{quoSeq},
				ifnull(#{issueDt},now()),
				#{trgtCrtfc},
				#{prdInf},
				#{powerSuplyYn},
				#{wghtYn},
				#{memo},
				#{vatYn},
				#{needWeek},
				#{spclCndtn},
				#{sgnUrl},
				#{quoStateCode},
				#{version},
				<if test="estCmpDt != null and estCmpDt != ''">
				#{estCmpDt},
				</if>
	    <![CDATA[
				#{CostTotal},
				#{TotalVat},
				#{insMemId},
				#{udtMemId}
			);
		]]>
	</insert>
	
	<update id="update" parameterType="quoReq">
		UPDATE QUO_TB
		SET

			ISSUE_DT = #{issueDt},
			TRGT_CRTFC = #{trgtCrtfc},
			PRD_INF = #{prdInf},
			POWER_SUPLY_YN = #{powerSuplyYn},
			WGHT_YN = #{wghtYn},
			MEMO = #{memo},
			VAT_YN = #{vatYn},
			NEED_WEEK = #{needWeek},
			SPCL_CNDTN = #{spclCndtn},
			<if test="sgnUrl != null and sgnUrl != ''">
			SGN_URL = #{sgnUrl},
			</if>
			VERSION = #{version},
			<if test="estCmpDt != null and estCmpDt != ''">
			EST_CMP_DT = #{estCmpDt},
			</if>
			COST_TOTAL = #{CostTotal},
			TOTAL_VAT = #{TotalVat},
			UDT_MEM_ID = #{udtMemId},
			UDT_DT = NOW()
				
		WHERE QUO_TB.quo_ym = substring(#{quoId},2,4)
		AND QUO_TB.quo_seq = substring(#{quoId},8,4)
	</update>
		
	<update id="engUpdate" parameterType="engQuo">
		UPDATE QUO_TB
		SET

			ENG_MEMO = #{engMemo},
			UDT_MEM_ID = #{udtMemId},
			UDT_DT = NOW()
		WHERE QUO_TB.quo_ym = substring(#{quoId},2,4)
		AND QUO_TB.quo_seq = substring(#{quoId},8,4)
	</update>
	
	<insert id="insertTestItem">
		INSERT INTO TEST_ITEM_TB
		(
			QUO_YM,
			QUO_SEQ,
			CRTF_TYPE_SEQ,
			TEST_TYPE_CODE,
			TEST_STNDR_SEQ,
			TEST_STNDR_TEXT,
			PRODUCT,
			MODEL,
			MEMO,
			SIGN_STATE_CODE,
			FEE,
			LCNS_TAX,
			TEST_FEE,
			CHRGS,
			ADVNC_PYMNT,
			SPCL_DSCNT,
			CNSLT_FEE,
			OTSRC_FEE,
			NET_SALES,
			INS_MEM_ID,
			UDT_MEM_ID
		)
		VALUES
		<foreach collection="testItems" item="item" separator=",">
			<if test="item.testItemSeq == 0">
		(
	<![CDATA[
			substring(#{quoId},2,4),
			substring(#{quoId},8,4),
			#{item.crtfTypeSeq},
			#{item.testTypeCode},
			#{item.testStndrSeq},
			#{item.testStndrText},
			#{item.product},
			#{item.model},
			#{item.memo},
	]]>
			<choose>
				<when test="item.testTypeCode == 'DH'">3,</when>
				<otherwise>1,</otherwise>
			</choose>
			#{item.fee},
			#{item.lcnsTax},
			#{item.testFee},
			#{item.chrgs},
			#{item.advncPymnt},
			#{item.spclDscnt},
			#{item.cnsltFee},
			#{item.otsrcFee},
			#{item.netSales},
			#{memId},
			#{memId}
		)
			</if>
		</foreach>

	</insert>

	<update id="updateTestItem">
		<foreach collection="testItems" item="item" separator=";">
			<if test="item.testItemSeq > 0">
			UPDATE TEST_ITEM_TB
			SET
		<![CDATA[
				CRTF_TYPE_SEQ = #{item.crtfTypeSeq},
				TEST_TYPE_CODE = #{item.testTypeCode},
				TEST_STNDR_SEQ = #{item.testStndrSeq},
				TEST_STNDR_TEXT = #{item.testStndrText},
				PRODUCT = #{item.product},
				MODEL = #{item.model},
				MEMO = #{item.memo},
		]]>
				SIGN_STATE_CODE = 
								<choose>
									<when test="item.testTypeCode == 'DH'">3,</when>
									<otherwise>IF(SIGN_STATE_CODE=3,1,SIGN_STATE_CODE),</otherwise>
								</choose>
				FEE = #{item.fee},
				LCNS_TAX = #{item.lcnsTax},
				TEST_FEE = #{item.testFee},
				CHRGS = #{item.chrgs},
				ADVNC_PYMNT = #{item.advncPymnt},
				SPCL_DSCNT = #{item.spclDscnt},
				CNSLT_FEE = #{item.cnsltFee},
				OTSRC_FEE = #{item.otsrcFee},
				NET_SALES = #{item.netSales},
				STATE = #{item.state},
				UDT_MEM_ID = #{memId}
			WHERE TEST_ITEM_SEQ = #{item.testItemSeq}
			AND TEST_ITEM_TB.QUO_YM = substring(#{quoId},2,4)
			AND TEST_ITEM_TB.QUO_SEQ = substring(#{quoId},8,4)
				</if>
			</foreach>
	</update>
	
	<update id="updateTestItemModel">
		<foreach collection="testItems" item="item" separator=";">
			<if test="item.testItemSeq > 0">
			UPDATE TEST_ITEM_TB
			SET
		<![CDATA[
				PRODUCT = #{item.product},
				MODEL = #{item.model},
		]]>
				UDT_MEM_ID = #{item.udtMemId}
			WHERE TEST_ITEM_SEQ = #{item.testItemSeq}
				</if>
			</foreach>
	</update>
	
	<update id="deleteTestItem">
		<foreach collection="testItems" item="item" separator=";">
			<if test="item.testItemSeq > 0">
			UPDATE TEST_ITEM_TB
			SET
		<![CDATA[
				STATE = #{item.state},
				UDT_MEM_ID = #{memId}
			WHERE TEST_ITEM_SEQ = #{item.testItemSeq}
			AND TEST_ITEM_TB.quo_ym = substring(#{quoId},2,4)
			AND TEST_ITEM_TB.quo_seq = substring(#{quoId},8,4)
		]]>
				</if>
			</foreach>
	</update>
		
		
	<insert id="insertEngTestItem">
		INSERT INTO ENG_TEST_ITEM_TB
		(
			QUO_ID,
			ITEM,
			DESCRIPTION,
			MODEL,
			AMOUNT,
			INS_MEM_ID,
			UDT_MEM_ID
		)
		VALUES
		<foreach collection="testItems" item="item" separator=",">
		(
	<![CDATA[
			#{quoId},
			#{item.item},
			#{item.description},
			#{item.model},
			#{item.amount},
			#{memId},
			#{memId}
	]]>
		)
		</foreach>

	</insert>

	<update id="updateEngTestItem">
		<foreach collection="testItems" item="item" separator=";">
			UPDATE ENG_TEST_ITEM_TB
			SET
		<![CDATA[
				ITEM = #{item.item},
				DESCRIPTION = #{item.description},
				MODEL = #{item.model},
				AMOUNT = #{item.amount},
				STATE = #{item.state},
				UDT_MEM_ID = #{memId},
				UDT_DT = NOW()
			WHERE ENG_TEST_ITEM_SEQ = #{item.engTestItemSeq}
		]]>
			</foreach>
	</update>
	
	<select id="selectEngTestItem" parameterType="String" resultType="engTestItem">
		SELECT 
			ENG_TEST_ITEM_SEQ,
		    ITEM,
		    DESCRIPTION,
		    MODEL,
		    AMOUNT,
		    STATE
		FROM ENG_TEST_ITEM_TB
		WHERE 1=1
		AND STATE != 'D'
		AND QUO_ID = #{quoId}
	</select>
	
	<insert id="insertJob" parameterType="quoReq" >
		<selectKey resultType="int" keyProperty="jobSeq" order="AFTER">
	        SELECT MAX(JOB_SEQ) jobSeq FROM JOB_TB;
	    </selectKey>
		INSERT INTO JOB_TB
			(QUO_YM,
			QUO_SEQ,
			CMPY_SEQ,
			CMPY_MNG_SEQ,
			CMPY_NAME,
			MNG_ID,
			MNG_PHONE,
			MNG_FAX,
			MNG_NAME,
			PRDCT_NAME,
			MODEL_NAME,
			INS_MEM_ID,
			UDT_MEM_ID
			)
			VALUES
			(
			SUBSTRING(#{quoId},2,4),
			SUBSTRING(#{quoId},8,4),
			#{cmpySeq},
			#{cmpyMngSeq},
		<![CDATA[
			#{cmpyName},
			#{mngId},
			#{cmpyPhone},
			#{cmpyFax},
			#{mngName},
			#{prdctName}, 
			#{modelName},
			#{insMemId},
			#{udtMemId}
			)
		]]>
	</insert>
		
	<update id="updateJob" parameterType="quoReq" >
			UPDATE JOB_TB
			SET 
				CMPY_SEQ = #{cmpySeq},
				CMPY_MNG_SEQ = #{cmpyMngSeq},
		<![CDATA[
				CMPY_NAME = #{cmpyName},
				MNG_PHONE = #{cmpyPhone},
				MNG_FAX = #{cmpyFax},
				MNG_NAME = #{mngName},
				PRDCT_NAME = #{prdctName},
				MODEL_NAME = #{modelName},
				UDT_MEM_ID = #{udtMemId}
		]]>
		WHERE 1=1
		AND JOB_TB.quo_ym = substring(#{quoId},2,4)
		AND JOB_TB.quo_seq = substring(#{quoId},8,4)
	</update>

	<update id="updateJobQuo" parameterType="quoReq" >
			UPDATE JOB_TB
			SET 
				QUO_YM = SUBSTRING(#{quoId},2,4),
				QUO_SEQ = SUBSTRING(#{quoId},8,4),
				UDT_MEM_ID = #{udtMemId},
				UDT_DT = now()
		WHERE 1=1
		AND JOB_TB.SBK_YM = SUBSTRING(#{sbkId},3,2)
		AND JOB_TB.SBK_TYPE = SUBSTRING(#{sbkId},6,1)
		AND JOB_TB.SBK_SEQ = SUBSTRING(#{sbkId},7,4)
		AND JOB_TB.SBK_REVISION = IF (SUBSTRING(#{sbkId},12,1)='', 0, SUBSTRING(#{sbkId},12,1))
	</update>
		
	<resultMap type="quoRes" id="quoMap">
		<id column="quo_ym" property="quoYm"/>
		<id column="quo_seq" property="quoSeq"/>
		<result column="quoId" property="quoId"/>
		<result column="sbkId" property="sbkId"/>
		<result column="chqId" property="chqId"/>
		<result column="cmpyCode" property="cmpyCode"/>
		<result column="cmpyType" property="cmpyType"/>
		<result column="cmpy_seq" property="cmpySeq"/>
		<result column="cmpy_mng_seq" property="cmpyMngSeq"/>
		<result column="cmpyTitle" property="cmpyTitle"/>
		<result column="cmpyMngName" property="cmpyMngName"/>
		<result column="est_cmp_dt" property="estCmpDt"/>
		<result column="version" property="version"/>
		<result column="cmpyName" property="cmpyName"/>
		<result column="issue_dt" property="issueDt"/>
		<result column="mngName" property="mngName"/>
		<result column="INS_MEM" property="insMem"/>
		<result column="cmpyPhone" property="cmpyPhone"/>
		<result column="cmpyFax" property="cmpyFax"/>
		<result column="mem_name" property="memName"/>
		<result column="prdct_name" property="prdctName"/>
		<result column="model_name" property="modelName"/>
		<result column="trgt_crtfc" property="trgtCrtfc"/>
		<result column="prd_inf" property="prdInf"/>
		<result column="power_suply_yn" property="powerSuplyYn"/>
		<result column="wght_yn" property="wghtYn"/>
		<result column="memo" property="memo"/>
		<result column="ENG_MEMO" property="engMemo"/>
		<result column="vat_yn" property="vatYn"/>
		<result column="need_week" property="needWeek"/>
		<result column="spcl_cndtn" property="spclCndtn"/>
		<result column="cost_total" property="CostTotal"/>
		<result column="total_vat" property="TotalVat"/>
		<result column="sgn_url" property="sgnUrl"/>
		<result column="ENG_NAME" property="engName"/>
		<result column="memPos" property="memPos"/>
		<result column="dir" property="dir"/>
		<result column="cp" property="cp"/>
		<result column="email" property="email"/>
		<result column="ARREARS" property="arrears"/>
		<result column="QUO_STATE_CODE" property="quoStateCode"/>
		<result column="QUO_MOD_SEQ" property="quoModeSeq"/>
		<result column="quoModState" property="quoModState"/>
		<result column="SBK_REVISION" property="revision"/>
		<result column="prmsDtStr" property="prmsDtStr"/>
		<result column="prmsName" property="prmsName"/>
		
		<collection property="items" ofType="testItemDTO">
        	<id column="test_item_seq" property="testItemSeq"/>
        	<result column="TEST_SEQ" property="testSeq"/>
        	<result column="crtfc1" property="crtfc1"/>
	        <result column="crtfc2" property="crtfc2"/>
	        <result column="crtfc3" property="crtfc3"/>
	        <result column="crtfc4" property="crtfc4"/>
    	    <result column="TEST_TYPE_CODE" property="testTypeCode"/>
       	 	<result column="TEST_STNDR_SEQ" property="testStndrSeq"/>
       	 	<result column="TEST_STNDR" property="testStndr"/>
       	 	<result column="TEST_STNDR_TEXT" property="testStndrText"/>
       	 	<result column="testCate" property="testCate"/>
       	 	<result column="TEST_TYPE" property="testType"/>
       	 	<result column="product" property="product"/>
       	 	<result column="model" property="model"/>
       	 	<result column="itemMemo" property="memo"/>
       	 	<result column="fee" property="fee"/>
       	 	<result column="LCNS_TAX" property="lcnsTax"/>
       	 	<result column="TEST_FEE" property="testFee"/>
       	 	<result column="chrgs" property="chrgs"/>
       	 	<result column="ADVNC_PYMNT" property="advncPymnt"/>
       	 	<result column="SPCL_DSCNT" property="spclDscnt"/>
       	 	<result column="CNSLT_FEE" property="cnsltFee"/>
       	 	<result column="OTSRC_FEE" property="otsrcFee"/>
       	 	<result column="NET_SALES" property="netSales"/>
        </collection>
	</resultMap>
	<select id="selectDetail" parameterType="String" resultMap="quoMap">
		SELECT
			QUO_TB.QUO_YM
			, QUO_TB.QUO_SEQ
			, FN_GET_SEQSTRING('Q',QUO_TB.QUO_YM,QUO_TB.TYPE,QUO_TB.QUO_SEQ) QUOID 
            , IFNULL (CONCAT ('SB', SBK_TB.SBK_YM, '-' , SBK_TB.TYPE, LPAD(SBK_TB.SBK_SEQ,4,0), IF(REVISION > 0, CONCAT ('-',REVISION), '')), '') SBKID
            , IF (QUO_TB.CHQ_SEQ=0, '', CONCAT ('CH',QUO_TB.CHQ_YM,'-',LPAD(QUO_TB.CHQ_SEQ,3,0))) chqId
            
            /* 업체정보 */
            ,IFNULL ((SELECT CMPY_CODE FROM CMPY_TB WHERE CMPY_SEQ = JOB_TB.CMPY_SEQ),'') CMPY_CODE
			,FN_CUST_TYPE(JOB_TB.CMPY_SEQ) CMPYTYPE
			,JOB_TB.CMPY_SEQ
			,JOB_TB.CMPY_MNG_SEQ
			,IFNULL (CMPY_TB.CMPY_NAME, '') cmpyTitle
			,IFNULL (CMPY_MNG_TB.NAME, '') cmpyMngName
            ,IFNULL (JOB_TB.CMPY_NAME, '') CMPYNAME
            ,FN_MEM_NAME (JOB_TB.MNG_ID) MNG_NAME	/* 업무담당자 추가 */
            ,FN_MEM_NAME (QUO_TB.INS_MEM_ID) INS_MEM	/* 작성자 추가 */
			,IFNULL (JOB_TB.MNG_PHONE, '') CMPYPHONE
			,IFNULL (JOB_TB.MNG_FAX, '') CMPYFAX
			,MEMBER_TB.MEM_NAME
            
			,DATE_FORMAT(QUO_TB.EST_CMP_DT, '%Y-%m-%d') EST_CMP_DT
			,VERSION
			,DATE_FORMAT(QUO_TB.ISSUE_DT, '%Y-%m-%d') ISSUE_DT 
			,JOB_TB.PRDCT_NAME
			,JOB_TB.MODEL_NAME
			,QUO_TB.TRGT_CRTFC
			,QUO_TB.PRD_INF
			,QUO_TB.POWER_SUPLY_YN
			,QUO_TB.WGHT_YN
			,QUO_TB.MEMO
			,QUO_TB.ENG_MEMO
			,QUO_TB.VAT_YN
			,QUO_TB.NEED_WEEK
			,QUO_TB.SPCL_CNDTN
			,QUO_TB.COST_TOTAL
			,QUO_TB.TOTAL_VAT
			,FN_GET_IMAGE (QUO_TB.SGN_URL,0) SGN_URL
			,IFNULL (MEMBER_TB.ENG_NAME, '') ENG_NAME
			,CONCAT (MEMBER_TB.MEM_NAME, ' ' ,(SELECT IFNULL(NAME, '') FROM POS_TB WHERE POS_TB.POS_SEQ = MEMBER_TB.POS_SEQ LIMIT 1)) memPos
			,IFNULL (FN_GET_PHONE_FORMAT (MEMBER_TB.TEL), '') dir
			,IFNULL (FN_GET_PHONE_FORMAT (MEMBER_TB.PHONE), '') cp
			,CONCAT (MEMBER_TB.id,'@standardbank.co.kr') email
			
			, IFNULL(SLS_TB.ARREARS,'') ARREARS
			, IFNULL(QUO_STATE_CODE, '0') QUO_STATE_CODE
			, QUO_MOD_TB.QUO_MOD_SEQ
			, IFNULL(FN_CODE_NAME (QUO_MOD_TB.STATE_CODE, 'MM'), '') quoModState
            , IFNULL(DATE_FORMAT(QUO_MOD_TB.PRMS_DT, '%Y-%m-%d'),'') prmsDtStr
            , IFNULL(FN_MEM_NAME (QUO_MOD_TB.PRMS_ID),'') prmsName
            
            , JOB_TB.SBK_REVISION
            
			, QUO_TB.UDT_DT 
			, QUO_TB.UDT_MEM_ID
			
			/* 시험항목 및 비용 */
			,TEST_ITEM_TB.TEST_ITEM_SEQ
			,IFNULL (TEST_TB.TEST_SEQ, 0) TEST_SEQ
			
			,cate1.TEST_CATE_SEQ crtfc1
			,cate2.TEST_CATE_SEQ crtfc2
			,cate3.TEST_CATE_SEQ crtfc3
			,cate4.TEST_CATE_SEQ crtfc4
			
			,TEST_ITEM_TB.TEST_TYPE_CODE
			,TEST_STNDR_TB.TEST_STNDR_SEQ
			,IF (TEST_ITEM_TB.TEST_STNDR_SEQ=0, TEST_ITEM_TB.TEST_STNDR_TEXT, IFNULL (TEST_STNDR_TB.TEST_STNDR, '')) TEST_STNDR
			,TEST_ITEM_TB.TEST_STNDR_TEXT
			,CONCAT (cate3.name,'-',cate4.name) testCate
			,FN_CODE_NAME (TEST_ITEM_TB.TEST_TYPE_CODE,'TT') TEST_TYPE
			,TEST_ITEM_TB.PRODUCT
			,TEST_ITEM_TB.MODEL
			,TEST_ITEM_TB.MEMO itemMemo
			,TEST_ITEM_TB.FEE
			,TEST_ITEM_TB.LCNS_TAX
			,TEST_ITEM_TB.TEST_FEE
			,TEST_ITEM_TB.CHRGS
			,TEST_ITEM_TB.ADVNC_PYMNT
			,TEST_ITEM_TB.SPCL_DSCNT
			,TEST_ITEM_TB.CNSLT_FEE
			,TEST_ITEM_TB.OTSRC_FEE
			,TEST_ITEM_TB.NET_SALES
		FROM QUO_TB
			
		    INNER JOIN JOB_TB
		    ON QUO_TB.QUO_YM = JOB_TB.QUO_YM
		    AND QUO_TB.QUO_SEQ = JOB_TB.QUO_SEQ
		    
		    INNER JOIN MEMBER_TB
		    ON JOB_TB.MNG_ID = MEMBER_TB.ID
		    
		    LEFT JOIN TEST_ITEM_TB
		    ON QUO_TB.QUO_YM = TEST_ITEM_TB.QUO_YM
		    AND QUO_TB.QUO_SEQ = TEST_ITEM_TB.QUO_SEQ
		    AND TEST_ITEM_TB.STATE != 'D'
		    
		    LEFT JOIN TEST_STNDR_TB
		    ON TEST_ITEM_TB.TEST_STNDR_SEQ = TEST_STNDR_TB.TEST_STNDR_SEQ
		    
		    LEFT JOIN TEST_TB
            ON TEST_ITEM_TB.TEST_ITEM_SEQ = TEST_TB.TEST_ITEM_SEQ
            
		    LEFT JOIN TEST_CATE_TB cate4 ON TEST_ITEM_TB.CRTF_TYPE_SEQ = cate4.TEST_CATE_SEQ
		    LEFT JOIN TEST_CATE_TB cate3 ON cate4.TOP_DEPTH_SEQ = cate3.TEST_CATE_SEQ
		    LEFT JOIN TEST_CATE_TB cate2 ON cate3.TOP_DEPTH_SEQ = cate2.TEST_CATE_SEQ
		    LEFT JOIN TEST_CATE_TB cate1 ON cate2.TOP_DEPTH_SEQ = cate1.TEST_CATE_SEQ

			LEFT JOIN SLS_TB
			ON SLS_TB.QUO_YM = JOB_TB.QUO_YM
		    AND SLS_TB.QUO_SEQ = JOB_TB.QUO_SEQ
		    
            LEFT JOIN QUO_MOD_TB
            ON QUO_MOD_TB.QUO_MOD_SEQ = (
								SELECT QUO_MOD_SEQ
                                FROM QUO_MOD_TB SUB
                                WHERE SUB.QUO_YM = QUO_TB.QUO_YM
                                AND SUB.QUO_SEQ = QUO_TB.QUO_SEQ
                                ORDER BY QUO_MOD_SEQ DESC
                                LIMIT 1
            )
            
            LEFT JOIN SBK_TB
            ON SBK_TB.SBK_YM = JOB_TB.SBK_YM
            AND SBK_TB.TYPE = JOB_TB.SBK_TYPE
			AND SBK_TB.SBK_SEQ = JOB_TB.SBK_SEQ
			AND SBK_TB.REVISION = JOB_TB.SBK_REVISION
            
            LEFT JOIN CMPY_TB ON JOB_TB.CMPY_SEQ = CMPY_TB.CMPY_SEQ
            LEFT JOIN CMPY_MNG_TB ON JOB_TB.CMPY_MNG_SEQ = CMPY_MNG_TB.CMPY_MNG_SEQ
            
        WHERE 1=1
        <if test="quoId != null and quoId != ''">
		AND QUO_TB.QUO_YM = SUBSTRING(#{quoId},2,4)
		AND QUO_TB.QUO_SEQ = SUBSTRING(#{quoId},8,4)
		</if>
		<if test="sbkId != null and sbkId != ''">
	    AND JOB_TB.SBK_YM = SUBSTRING(#{sbkId},3,2)
	    AND JOB_TB.SBK_TYPE = SUBSTRING(#{sbkId},6,1)
		AND JOB_TB.SBK_SEQ = SUBSTRING(#{sbkId},7,4)
		AND JOB_TB.SBK_REVISION = SUBSTRING(#{sbkId},12,1)
		</if>
	</select>
	
	<select id="selectStatusList" parameterType="String" resultType="egovMap">
		SELECT
			DATE_FORMAT(QUO_MOD_TB.ins_dt, '%Y-%m-%d') insDtStr,
		    FN_MEM_NAME (QUO_MOD_TB.ins_mem_id) insName,
            QUO_MOD_TB.STATE_CODE,
            IF (QUO_MOD_TB.state_code=5,'세금계산서 신청','견적서 수정') type,
		    IFNULL (memo, '') memo,
		    bill,
            IFNULL (FN_CODE_NAME (
								case state_code
                                when 2 then QUO_MOD_TB.state_code
                                when 3 then QUO_MOD_TB.state_code
                                when 5 then 0
                                else 3 end
                                ,'MM'), '-') prmsType,
			IFNULL (FN_MEM_NAME (QUO_MOD_TB.PRMS_ID), '') PrmsName,
            IFNULL (DATE_FORMAT(QUO_MOD_TB.PRMS_DT, '%Y-%m-%d'), '') PRMS_DT,
		    IFNULL (FN_CODE_NAME (IF (QUO_MOD_TB.STATE_CODE=4, 4, 0),'MM'), '-') stateType,
			IFNULL (DATE_FORMAT(IF (QUO_MOD_TB.STATE_CODE=4, QUO_MOD_TB.UDT_DT, ''), '%Y-%m-%d'), '') UDT_DT,
			IF (QUO_MOD_TB.STATE_CODE=4, FN_MEM_NAME (QUO_MOD_TB.UDT_MEM_ID), '') udtName
		FROM QUO_MOD_TB
		WHERE 1=1
		AND QUO_MOD_TB.quo_ym = SUBSTRING(#{quoId},2,4)
		AND QUO_MOD_TB.quo_seq = SUBSTRING(#{quoId},8,4)
		ORDER BY QUO_MOD_SEQ DESC
	</select>
	
	<update id="updateQuoState" parameterType="quoModReq">
		UPDATE QUO_TB
		SET
			QUO_STATE_CODE = #{stateCode},
			UDT_MEM_ID = #{udtMemId},
			UDT_DT = current_timestamp(),	
			STATE = 'U'
		WHERE QUO_TB.quo_ym = substring(#{quoId},2,4)
		AND QUO_TB.quo_seq = substring(#{quoId},8,4)
	</update>
	
	<insert id="insertState" parameterType="quoModReq" >
		INSERT INTO QUO_MOD_TB
		(
			QUO_YM,
			QUO_SEQ,
			MEMO,
			BILL,
			STATE_CODE,
			INS_MEM_ID,
			UDT_MEM_ID
		)
		VALUES
		(
			SUBSTRING(#{quoId},2,4),
			SUBSTRING(#{quoId},8,4),
			#{memo},
			#{bill},
			#{stateCode},
			#{insMemId},
			#{udtMemId}
		);

	</insert>

	<update id="updateState" parameterType="quoModReq" >
		UPDATE QUO_MOD_TB
		SET
			STATE_CODE = #{stateCode},
			<if test='stateCode == "3"'>
			prms_dt = current_timestamp(),
			prms_id = #{udtMemId},
			</if>
			UDT_MEM_ID = #{udtMemId},
			UDT_DT = current_timestamp()
		WHERE QUO_MOD_TB.quo_ym = substring(#{quoId},2,4)
		AND QUO_MOD_TB.quo_seq = substring(#{quoId},8,4)
		<if test='stateCode == "3"'>
		AND STATE_CODE = '2'
		</if>
		<if test='stateCode == "4"'>
		AND STATE_CODE = '3'
		</if>

	</update>
	
	<select id="billCheck" parameterType="String" resultType="int">
		SELECT ARREARS
		FROM SLS_TB
		WHERE QUO_YM = SUBSTRING(#{quoId},2,4)
        AND QUO_SEQ = SUBSTRING(#{quoId},8,4)
	</select>
	<insert id="billInsert" parameterType="quoModReq" >
		INSERT INTO BILL_TB
		(
			SLS_YM,
			SLS_SEQ,
			BILL_SEQ,
			BILL,
			INS_MEM_ID,
			UDT_MEM_ID
		)
        SELECT 
	        SLS_YM,
	        SLS_SEQ,
	        (SELECT IFNULL (MAX(seq.BILL_SEQ)+1, 1) billSeq FROM BILL_TB seq WHERE seq.SLS_YM = SLS_YM AND seq.SLS_SEQ = SLS_SEQ) seq,
			#{bill},
			#{insMemId},
			#{udtMemId}
        FROM SLS_TB
        WHERE QUO_YM = SUBSTRING(#{quoId},2,4)
        AND QUO_SEQ = SUBSTRING(#{quoId},8,4)
	</insert>
	
	<select id="hisList" parameterType="String" resultType="egovMap">
		SELECT 
		
			DATE_FORMAT(QUO_HIS_TB.INS_DT, '%Y-%m-%d %T') intDtStr,
		    MEMBER_TB.MEM_NAME,
		    FN_POS_NAME(QUO_HIS_TB.MEM_ID) memPos
			
		FROM QUO_HIS_TB
		
			INNER JOIN MEMBER_TB
		    ON QUO_HIS_TB.MEM_ID = MEMBER_TB.ID
		    
		WHERE 1=1
		AND QUO_HIS_TB.QUO_ID = #{quoId}
		
		ORDER BY QUO_HIS_TB.INS_DT DESC
	</select>
	
	<select id="checkTestStartItem" resultType="int">
		SELECT COUNT(1)
		FROM TEST_ITEM_TB
			INNER JOIN TEST_TB
		    ON TEST_ITEM_TB.TEST_ITEM_SEQ = TEST_TB.TEST_ITEM_SEQ
		WHERE TEST_ITEM_TB.TEST_ITEM_SEQ IN
		<foreach collection="testItems" item="item" open="(" separator="," close=")">
			#{item.testItemSeq}
		</foreach>
	</select>
		
</mapper>