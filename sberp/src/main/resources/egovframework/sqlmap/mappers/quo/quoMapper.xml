<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="egovframework.quo.service.QuoMapper">

	<select id="selectListCnt" parameterType="comParam" resultType="int">
		SELECT 
			COUNT(QUO_TB.QUO_SEQ)
		FROM JOB_TB
			
		    INNER JOIN QUO_TB
		    ON QUO_TB.QUO_YM = JOB_TB.QUO_YM
		    AND QUO_TB.quo_seq = JOB_TB.QUO_SEQ
		    
		    LEFT JOIN SBK_TB
		    ON SBK_TB.SBK_YM = JOB_TB.SBK_YM AND SBK_TB.TYPE = JOB_TB.SBK_TYPE AND SBK_TB.SBK_SEQ = JOB_TB.SBK_SEQ AND SBK_TB.REVISION = JOB_TB.SBK_REVISION AND JOB_TB.STATE != 'D'
			    
		    LEFT JOIN (
				SELECT QUO_YM, QUO_SEQ, sum(CHRGS) CHRGS, sum(NET_SALES) NET_SALES
				FROM TEST_ITEM_TB
		        where state != 'D'
		        group by QUO_YM, QUO_SEQ
		    ) items
		    ON QUO_TB.QUO_YM = items.QUO_YM
		    AND QUO_TB.quo_seq = items.QUO_SEQ
		        
		    LEFT JOIN SLS_TB
		    ON QUO_TB.QUO_YM = SLS_TB.QUO_YM
		    AND QUO_TB.quo_seq = SLS_TB.QUO_SEQ
		    AND SLS_TB.state != 'D'
		    
		    LEFT JOIN SLS_TB chqSls
		    ON QUO_TB.CHQ_YM = chqSls.CHQ_YM
		    AND QUO_TB.CHQ_SEQ = chqSls.CHQ_SEQ
		    AND chqSls.STATE != 'D'
			    
		    LEFT JOIN CMPY_TB ON JOB_TB.CMPY_SEQ = CMPY_TB.CMPY_SEQ
    		LEFT JOIN CMPY_TB prtn ON JOB_TB.PRTN_SEQ = prtn.CMPY_SEQ
            LEFT JOIN CMPY_TB dirt ON JOB_TB.DIRT_SEQ = dirt.CMPY_SEQ
                
		WHERE 1=1
		AND JOB_TB.STATE != 'D'
		<include refid="whereList"/>

	</select>
	
	<select id="selectList" parameterType="comParam" resultType="quoRes">
		#SELECT 
		#	@rownum:=@rownum+1 as no,
		#	lst.*
		#FROM (
			SELECT 
				#ROW_NUMBER() OVER(ORDER BY QUO_TB.ins_dt) AS no,
				JOB_TB.JOB_SEQ,
				JOB_TB.SECRET_YN,
				VERSION,
				IF (QUO_TB.CHQ_SEQ=0, '-', CONCAT ('CH',QUO_TB.CHQ_YM,'-',LPAD(QUO_TB.CHQ_SEQ,3,0))) chqId,
			    CONCAT (FN_GET_SEQSTRING('Q', QUO_TB.QUO_YM, QUO_TB.TYPE, QUO_TB.QUO_SEQ), IF(JOB_TB.SECRET_YN=1,'-A','')) quoId,  
				FN_MEM_NAME (JOB_TB.MNG_ID) memName,
			    DATE_FORMAT(QUO_TB.INS_DT, '%Y-%m-%d') insDtStr,
			    if(QUO_TB.CHQ_SEQ = 0,
						IFNULL (date_format(SLS_TB.CNFRM_DT, '%Y-%m-%d'),''),
                        IFNULL (date_format(chqSls.CNFRM_DT, '%Y-%m-%d'),'')) cnfrmDtStr,
                if(QUO_TB.CHQ_SEQ = 0,
					IFNULL (FN_MEM_NAME(SLS_TB.CNFRM_ID),''),
                    IFNULL (FN_MEM_NAME(chqSls.CNFRM_ID),'')) cnfrmName,
			    JOB_TB.PRTN_SEQ, 
			    JOB_TB.DIRT_SEQ,
			    
			    /* 신청서 업데이트 후 삭제 예정 */
			    FN_CODE_NAME (
			    	IF (VERSION = 1, 
			    					IFNULL ((SELECT CMPY_CODE FROM CMPY_TB WHERE CMPY_SEQ = JOB_TB.CMPY_SEQ), '9999')
									, CASE PRTN_YN WHEN 1 THEN '0000' WHEN 0 THEN '1000' ELSE '9999' END)
				, 'PT') CMPY_TYPE,
                IFNULL (prtn.CMPY_NAME, '') PRTN_NAME,
			    IFNULL (CASE IFNULL(JOB_TB.DIRT_SEQ, 0) WHEN 0 THEN JOB_TB.CMPY_NAME ELSE dirt.CMPY_NAME END, '') DIRT_NAME,
			    #
			    
			    CONCAT_WS(',', 
				if((SBK_TB.SG_NEW_YN = 1), '신규', NULL),
				if((SBK_TB.SG_GB_YN = 1), '기변', NULL),
				if((SBK_TB.SG_DG_YN = 1), '동일', NULL),
				if((SBK_TB.SG_ETC_YN = 1), '기외', NULL)) AS sgText,
				
			    JOB_TB.PRDCT_NAME,
			    IFNULL (JOB_TB.MODEL_NAME, '') MODEL_NAME,
			    IFNULL (TOTAL_VAT, 0) CHRGS,
			    IFNULL (items.NET_SALES, 0) NET_SALES,
			    IFNULL (JOB_TB.CNS_SEQ, '') CNS_SEQ,
			    IFNULL (FN_LAST_CNS_MENO(JOB_TB.CNS_SEQ), '') lastMemo,
			    IFNULL (FN_CODE_NAME (JOB_TB.STATE_CODE, 'CP'), '변경') stateCode,
			    IFNULL (DATE_FORMAT(JOB_TB.STATE_UDT_DT, '%Y-%m-%d'), '') stateUdtDt,
			    IFNULL (CONCAT ('SB', JOB_TB.SBK_YM, '-' , JOB_TB.SBK_TYPE, LPAD(JOB_TB.SBK_SEQ,4,0), IF(SBK_REVISION > 0, CONCAT ('-',SBK_REVISION), '')), '') sbkId
			    
			FROM JOB_TB
				
			    INNER JOIN QUO_TB
			    ON QUO_TB.QUO_YM = JOB_TB.QUO_YM
			    AND QUO_TB.QUO_SEQ = JOB_TB.QUO_SEQ
			    
			    LEFT JOIN SBK_TB
			    ON SBK_TB.SBK_YM = JOB_TB.SBK_YM AND SBK_TB.TYPE = JOB_TB.SBK_TYPE AND SBK_TB.SBK_SEQ = JOB_TB.SBK_SEQ AND SBK_TB.REVISION = JOB_TB.SBK_REVISION AND JOB_TB.STATE != 'D'
			    
			    LEFT JOIN (
					SELECT QUO_YM, QUO_SEQ, SUM(CHRGS) CHRGS, SUM(NET_SALES) NET_SALES
					FROM TEST_ITEM_TB
			        WHERE STATE != 'D'
			        GROUP BY QUO_YM, QUO_SEQ
			    ) items
			    ON QUO_TB.QUO_YM = items.QUO_YM
			    AND QUO_TB.QUO_SEQ = items.QUO_SEQ
			        
			    LEFT JOIN SLS_TB
			    ON QUO_TB.QUO_YM = SLS_TB.QUO_YM
			    AND QUO_TB.QUO_SEQ = SLS_TB.QUO_SEQ
			    AND SLS_TB.STATE != 'D'
			    
			    LEFT JOIN SLS_TB chqSls
			    ON QUO_TB.CHQ_YM = chqSls.CHQ_YM
			    AND QUO_TB.CHQ_SEQ = chqSls.CHQ_SEQ
			    AND chqSls.STATE != 'D'
			    
			    LEFT JOIN CMPY_TB ON JOB_TB.CMPY_SEQ = CMPY_TB.CMPY_SEQ
	    		LEFT JOIN CMPY_TB prtn ON JOB_TB.PRTN_SEQ = prtn.CMPY_SEQ
                LEFT JOIN CMPY_TB dirt ON JOB_TB.DIRT_SEQ = dirt.CMPY_SEQ
				
	    		#INNER JOIN (SELECT @rownum:=0) r
	    		
			WHERE 1=1
			AND JOB_TB.STATE != 'D'
			<include refid="whereList"/>
			
	        ORDER BY QUO_TB.INS_DT DESC
	    #) lst
	    #ORDER BY NO DESC
		LIMIT #{pageUnit} OFFSET #{firstIndex};
	</select>

	<sql id="whereList">
		
		/* 보안견적서 */
		<if test="secretYn == 0">AND IF(JOB_TB.SECRET_YN = 1, JOB_TB.MNG_ID = #{memId}, 1)</if>
		<if test="searchVO != null">
	        <foreach collection="searchVO" item="item" separator="">
	       
	        	<choose>
					<!-- 1	고객유형 -->
					<when test="item.searchCode == 1">AND IF (VERSION = 1, 
											    					IFNULL ((SELECT CMPY_CODE FROM CMPY_TB WHERE CMPY_SEQ = JOB_TB.CMPY_SEQ), '9999')
																	, CASE PRTN_YN WHEN 1 THEN '0000' WHEN 0 THEN '1000' ELSE '9999' END) = #{item.searchWord}</when>
					<!-- 7	고지부담당자 -->
					<when test="item.searchCode == 7">AND FN_MEM_NAME(JOB_TB.MNG_ID) LIKE CONCAT ('%',#{item.searchWord},'%')</when>
					<!-- 22	신청구분 -->
					<when test="item.searchCode == 22">AND 1 IN 
						<foreach collection="item.searchWords" item="sub" open="(" close=")" separator=",">${sub}</foreach>
					</when>
					<!-- 4	컨설팅명 -->
					<when test="item.searchCode == 4">AND prtn.CMPY_NAME LIKE CONCAT('%',#{item.searchWord},'%')</when>
					<!-- 6	제품명 -->
					<when test="item.searchCode == 6">AND IFNULL(JOB_TB.PRDCT_NAME, '') LIKE CONCAT('%',#{item.searchWord},'%')</when>
					<!-- 27	모델명 -->
					<when test="item.searchCode == 27">AND IFNULL(JOB_TB.MODEL_NAME, '') LIKE CONCAT('%',#{item.searchWord},'%')</when>
					<!-- 12	회사명 -->
					<when test="item.searchCode == 12">AND CASE IFNULL(JOB_TB.DIRT_SEQ, 0) WHEN 0 THEN JOB_TB.CMPY_NAME ELSE dirt.CMPY_NAME END LIKE CONCAT('%',#{item.searchWord},'%')</when>
					<!-- 15	작성일 -->
					<when test="item.searchCode == 15">AND DATE_FORMAT(QUO_TB.INS_DT, '%Y%m%d') BETWEEN DATE_FORMAT(#{item.startDate}, '%Y%m%d') AND DATE_FORMAT(#{item.endDate}, '%Y%m%d')</when>
					<!-- 16	매출확정일 -->
					<when test="item.searchCode == 16">AND 
						(DATE_FORMAT(SLS_TB.CNFRM_DT, '%Y%m%d') BETWEEN DATE_FORMAT(#{item.startDate}, '%Y%m%d') AND DATE_FORMAT(#{item.endDate}, '%Y%m%d') OR
						DATE_FORMAT(chqSls.CNFRM_DT, '%Y%m%d') BETWEEN DATE_FORMAT(#{item.startDate}, '%Y%m%d') AND DATE_FORMAT(#{item.endDate}, '%Y%m%d'))
					</when>
					<!-- 19 매출확정자 -->
					<when test="item.searchCode == 19">AND 
						(IFNULL(FN_MEM_NAME(SLS_TB.CNFRM_ID),'') LIKE CONCAT('%',#{item.searchWord},'%') OR
						IFNULL(FN_MEM_NAME(chqSls.CNFRM_ID),'') LIKE CONCAT('%',#{item.searchWord},'%'))
					</when>
					<!-- 57	프로젝트상태 -->
	        		<when test="item.searchCode == 57">AND JOB_TB.STATE_CODE = #{item.searchWord}</when>
	        		<!-- 58	프로젝트상태변경일 -->
	        		<when test="item.searchCode == 58">AND DATE_FORMAT(JOB_TB.STATE_UDT_DT, '%Y%m%d') BETWEEN DATE_FORMAT(#{item.startDate}, '%Y%m%d') AND DATE_FORMAT(#{item.endDate}, '%Y%m%d')</when>
	        		<!-- 5	견적서번호 -->
					<when test="item.searchCode == 5">AND CONCAT ('Q', QUO_TB.QUO_YM, '-' , QUO_TB.TYPE, LPAD(QUO_TB.QUO_SEQ,4,0), IF(JOB_TB.SECRET_YN=1,'-A','')) LIKE CONCAT ('%',#{item.searchWord},'%')</when>
					<!-- 61	신청서번호 -->
					<when test="item.searchCode == 61">AND CONCAT ('SB', JOB_TB.SBK_YM, '-' , JOB_TB.SBK_TYPE, LPAD(JOB_TB.SBK_SEQ,4,0), IF(JOB_TB.SBK_REVISION > 0, CONCAT ('-',JOB_TB.SBK_REVISION), '')) LIKE CONCAT ('%',#{item.searchWord},'%')</when>
					<!-- 76	보안견적서여부 -->
	        		<when test="item.searchCode == 76">AND JOB_TB.SECRET_YN = #{item.searchWord}</when>
	        	</choose>
	        </foreach>
		</if>
	</sql>
		
	<select id="selectRef" parameterType="quoReq" resultType="String">
  		SELECT FN_GET_SEQSTRING('Q',ifnull(#{quoYm},date_format(now(), '%y%m')),'G',#{quoSeq}) FROM DUAL
	</select>
	
	<insert id="insert" parameterType="quoReq">
	    <selectKey keyProperty="quoSeq" resultType="int" order="BEFORE">
	        SELECT ifnull(max(QUO_SEQ),0)+1 FROM QUO_TB WHERE substring(QUO_YM,1,2) = date_format(now(), '%y')
	    </selectKey>
			INSERT INTO QUO_TB
			(
				QUO_YM,
				QUO_SEQ,
				ISSUE_DT,
				TRGT_CRTFC,
				PRD_INF,
				POWER_SUPLY_YN,
				WGHT_YN,
				VAT_YN,
				NEED_WEEK,
				SPCL_CNDTN,
				SGN_URL,
				QUO_STATE_CODE,
				VERSION,
				<if test="estCmpDt != null and estCmpDt != ''">
				EST_CMP_DT,
				</if>
				COST_TOTAL,
				TOTAL_VAT,
				INS_MEM_ID,
				UDT_MEM_ID
			)
			VALUES
			(
				date_format(now(), '%y%m'),
				#{quoSeq},
				IFNULL(#{issueDt},now()),
				#{trgtCrtfc},
				#{prdInf},
				#{powerSuplyYn},
				#{wghtYn},
				#{vatYn},
				#{needWeek},
				#{spclCndtn},
				#{atchFileId},
				#{quoStateCode},
				2, # 견적서 작성양식 리폼건 (#31) 고정값 사용
				<if test="estCmpDt != null and estCmpDt != ''">
				#{estCmpDt},
				</if>
	    <![CDATA[
				#{CostTotal},
				#{TotalVat},
				#{insMemId},
				#{udtMemId}
			);
		]]>
	</insert>
	
	<update id="update" parameterType="quoReq">
		UPDATE QUO_TB
		SET

			ISSUE_DT = #{issueDt},
			TRGT_CRTFC = #{trgtCrtfc},
			PRD_INF = #{prdInf},
			POWER_SUPLY_YN = #{powerSuplyYn},
			WGHT_YN = #{wghtYn},
			VAT_YN = #{vatYn},
			NEED_WEEK = #{needWeek},
			SPCL_CNDTN = #{spclCndtn},
			SGN_URL = #{atchFileId},
			<if test="estCmpDt != null and estCmpDt != ''">
			EST_CMP_DT = #{estCmpDt},
			</if>
			COST_TOTAL = #{CostTotal},
			TOTAL_VAT = #{TotalVat},
			UDT_MEM_ID = #{udtMemId},
			UDT_DT = NOW()
				
		WHERE QUO_TB.quo_ym = substring(#{quoId},2,4)
		AND QUO_TB.quo_seq = substring(#{quoId},8,4)
	</update>
		
	<update id="engUpdate" parameterType="engQuo">
		UPDATE QUO_TB
		SET

			ENG_MEMO = #{engMemo},
			UDT_MEM_ID = #{udtMemId},
			UDT_DT = NOW()
		WHERE QUO_TB.quo_ym = substring(#{quoId},2,4)
		AND QUO_TB.quo_seq = substring(#{quoId},8,4)
	</update>
	
	<insert id="insertTestItem">
		INSERT INTO TEST_ITEM_TB
		(
			QUO_YM,
			QUO_SEQ,
			CRTF_TYPE_SEQ,
			TEST_TYPE_CODE,
			TEST_STNDR_SEQ,
			TEST_STNDR_TEXT,
			PRODUCT,
			MODEL,
			MEMO,
			SIGN_STATE_CODE,
			FEE,
			LCNS_TAX,
			TEST_FEE,
			CHRGS,
			ADVNC_PYMNT,
			SPCL_DSCNT,
			CNSLT_FEE,
			OTSRC_FEE,
			NET_SALES,
			INS_MEM_ID,
			UDT_MEM_ID
		)
		VALUES
		<foreach collection="testItems" item="item" separator=",">
			<if test="item.testItemSeq == 0">
		(
	<![CDATA[
			substring(#{quoId},2,4),
			substring(#{quoId},8,4),
			#{item.crtfTypeSeq},
			#{item.testTypeCode},
			#{item.testStndrSeq},
			#{item.testStndrText},
			#{item.product},
			#{item.model},
			#{item.memo},
	]]>
			<choose>
				<when test="item.testTypeCode == 'DH'">3,</when>
				<otherwise>1,</otherwise>
			</choose>
			#{item.fee},
			#{item.lcnsTax},
			#{item.testFee},
			#{item.chrgs},
			#{item.advncPymnt},
			#{item.spclDscnt},
			#{item.cnsltFee},
			#{item.otsrcFee},
			#{item.netSales},
			#{memId},
			#{memId}
		)
			</if>
		</foreach>

	</insert>

	<update id="updateTestItem">
		<foreach collection="testItems" item="item" separator=";">
			<if test="item.testItemSeq > 0">
			UPDATE TEST_ITEM_TB
			SET
		<![CDATA[
				CRTF_TYPE_SEQ = #{item.crtfTypeSeq},
				TEST_TYPE_CODE = #{item.testTypeCode},
				TEST_STNDR_SEQ = #{item.testStndrSeq},
				TEST_STNDR_TEXT = #{item.testStndrText},
				PRODUCT = #{item.product},
				MODEL = #{item.model},
				MEMO = #{item.memo},
		]]>
				SIGN_STATE_CODE = 
								<choose>
									<when test="item.testTypeCode == 'DH'">3,</when>
									<otherwise>IF(SIGN_STATE_CODE=3,1,SIGN_STATE_CODE),</otherwise>
								</choose>
				FEE = #{item.fee},
				LCNS_TAX = #{item.lcnsTax},
				TEST_FEE = #{item.testFee},
				CHRGS = #{item.chrgs},
				ADVNC_PYMNT = #{item.advncPymnt},
				SPCL_DSCNT = #{item.spclDscnt},
				CNSLT_FEE = #{item.cnsltFee},
				OTSRC_FEE = #{item.otsrcFee},
				NET_SALES = #{item.netSales},
				STATE = #{item.state},
				UDT_MEM_ID = #{memId}
			WHERE TEST_ITEM_SEQ = #{item.testItemSeq}
			AND TEST_ITEM_TB.QUO_YM = substring(#{quoId},2,4)
			AND TEST_ITEM_TB.QUO_SEQ = substring(#{quoId},8,4)
				</if>
			</foreach>
	</update>
	
	<update id="updateTestItemModel">
		<foreach collection="testItems" item="item" separator=";">
			<if test="item.testItemSeq > 0">
			UPDATE TEST_ITEM_TB
			SET
		<![CDATA[
				PRODUCT = #{item.product},
				MODEL = #{item.model},
		]]>
				UDT_MEM_ID = #{item.udtMemId}
			WHERE TEST_ITEM_SEQ = #{item.testItemSeq}
				</if>
			</foreach>
	</update>
	
	<update id="deleteTestItem">
		<foreach collection="testItems" item="item" separator=";">
			<if test="item.testItemSeq > 0">
			UPDATE TEST_ITEM_TB
			SET
		<![CDATA[
				STATE = #{item.state},
				UDT_MEM_ID = #{memId}
			WHERE TEST_ITEM_SEQ = #{item.testItemSeq}
			AND TEST_ITEM_TB.quo_ym = substring(#{quoId},2,4)
			AND TEST_ITEM_TB.quo_seq = substring(#{quoId},8,4)
		]]>
				</if>
			</foreach>
	</update>
		
		
	<insert id="insertEngTestItem">
		INSERT INTO ENG_TEST_ITEM_TB
		(
			QUO_ID,
			ITEM,
			DESCRIPTION,
			MODEL,
			AMOUNT,
			INS_MEM_ID,
			UDT_MEM_ID
		)
		VALUES
		<foreach collection="testItems" item="item" separator=",">
		(
	<![CDATA[
			#{quoId},
			#{item.item},
			#{item.description},
			#{item.model},
			#{item.amount},
			#{memId},
			#{memId}
	]]>
		)
		</foreach>

	</insert>

	<update id="updateEngTestItem">
		<foreach collection="testItems" item="item" separator=";">
			UPDATE ENG_TEST_ITEM_TB
			SET
		<![CDATA[
				ITEM = #{item.item},
				DESCRIPTION = #{item.description},
				MODEL = #{item.model},
				AMOUNT = #{item.amount},
				STATE = #{item.state},
				UDT_MEM_ID = #{memId},
				UDT_DT = NOW()
			WHERE ENG_TEST_ITEM_SEQ = #{item.engTestItemSeq}
		]]>
			</foreach>
	</update>
	
	<select id="selectEngTestItem" parameterType="String" resultType="engTestItem">
		SELECT 
			ENG_TEST_ITEM_SEQ,
		    ITEM,
		    DESCRIPTION,
		    MODEL,
		    AMOUNT,
		    STATE
		FROM ENG_TEST_ITEM_TB
		WHERE 1=1
		AND STATE != 'D'
		AND QUO_ID = #{quoId}
	</select>
	
	<insert id="insertJob" parameterType="quoReq" >
		<selectKey resultType="int" keyProperty="jobSeq" order="AFTER">
	        SELECT MAX(JOB_SEQ) jobSeq FROM JOB_TB;
	    </selectKey>
		INSERT INTO JOB_TB
			(QUO_YM,
			QUO_SEQ,
			/* 신청서 업데이트 후 사용 안할 예정 */
			CMPY_SEQ,
			CMPY_MNG_SEQ,
			CMPY_NAME,
			MNG_PHONE,
			MNG_EMAIL,
			MNG_NAME,
			#
			
			# 견적서 작성양식 리폼건 (#31)
			PRTN_SEQ,
			PRTN_MNG_SEQ,
			PRTN_YN,
			DIRT_SEQ,
			DIRT_MNG_SEQ,
			
			MNG_ID,
			PRDCT_NAME,
			MODEL_NAME,
			MEMO,
			SECRET_YN,
			INS_MEM_ID,
			UDT_MEM_ID
			)
			VALUES
			(
			SUBSTRING(#{quoId},2,4),
			SUBSTRING(#{quoId},8,4),
			
			/* 신청서 업데이트 후 사용 안할 예정 */
			IF(#{prtnYn} = 1, #{prtnSeq}, #{dirtSeq}),
			IF(#{prtnYn} = 1, #{prtnMngSeq}, #{dirtMngSeq}),
			#{cmpyName},
			#{mngPhone},
			#{mngEmail},
			#{mngName},
			#
			
			# 견적서 작성양식 리폼건 (#31)
			#{prtnSeq},
			#{prtnMngSeq},
			#{prtnYn},
			#{dirtSeq},
			#{dirtMngSeq},
			
		<![CDATA[
			#{mngId},
			#{prdctName}, 
			#{modelName},
			#{memo},
			#{secretYn},
			#{insMemId},
			#{udtMemId}
			)
		]]>
	</insert>
		
	<update id="updateJob" parameterType="quoReq" >
		UPDATE JOB_TB
		SET 
			/* 신청서 업데이트 후 사용 안할 예정 */
			CMPY_SEQ = IF(#{cmpySeq} = 0, IF(#{prtnYn} = 1, #{prtnSeq}, #{dirtSeq}), #{cmpySeq}),
			CMPY_MNG_SEQ = IF(#{cmpyMngSeq} = 0, IF(#{prtnYn} = 1, #{prtnMngSeq}, #{dirtMngSeq}), #{cmpyMngSeq}),
			CMPY_NAME = IF(#{cmpyName} IS NULL, CMPY_NAME, #{cmpyName}),
			MNG_PHONE = IF(#{mngPhone} IS NULL, MNG_PHONE, #{mngPhone}),
			MNG_EMAIL = IF(#{mngEmail} IS NULL, MNG_EMAIL, #{mngEmail}),
			MNG_NAME = IF(#{mngName} IS NULL, MNG_NAME, #{mngName}),
			#
			
			# 견적서 작성양식 리폼건 (#31)
			PRTN_SEQ = IF(#{dirtSeq} = 0, PRTN_SEQ, #{prtnSeq}),
			PRTN_MNG_SEQ = IF(#{dirtSeq} = 0, PRTN_MNG_SEQ, #{prtnMngSeq}),
			PRTN_YN = IF(#{dirtSeq} = 0, PRTN_YN, #{prtnYn}),
			DIRT_SEQ = IF(#{dirtSeq} = 0, DIRT_SEQ, #{dirtSeq}),
			DIRT_MNG_SEQ = IF(#{dirtSeq} = 0, DIRT_MNG_SEQ, #{dirtMngSeq}),
			
		<![CDATA[
			PRDCT_NAME = #{prdctName},
			MODEL_NAME = #{modelName},
			MEMO = #{memo},
			SECRET_YN = #{secretYn},
			UDT_MEM_ID = #{udtMemId}
		]]>
		WHERE 1=1
		AND JOB_TB.QUO_YM = substring(#{quoId},2,4)
		AND JOB_TB.QUO_SEQ = substring(#{quoId},8,4)
	</update>

	<update id="updateJobQuo" parameterType="quoReq" >
			UPDATE JOB_TB
			SET 
				QUO_YM = SUBSTRING(#{quoId},2,4),
				QUO_SEQ = SUBSTRING(#{quoId},8,4),
				UDT_MEM_ID = #{udtMemId},
				UDT_DT = now()
		WHERE 1=1
		AND JOB_TB.SBK_YM = SUBSTRING(#{sbkId},3,2)
		AND JOB_TB.SBK_TYPE = SUBSTRING(#{sbkId},6,1)
		AND JOB_TB.SBK_SEQ = SUBSTRING(#{sbkId},7,4)
		AND JOB_TB.SBK_REVISION = IF (SUBSTRING(#{sbkId},12,1)='', 0, SUBSTRING(#{sbkId},12,1))
	</update>
	
	<update id="updateArrears" parameterType="quoReq">
		UPDATE SLS_TB
		INNER JOIN (
		    SELECT SLS_TB.SLS_YM, SLS_TB.SLS_SEQ, MAX(BILL_TB.BILL_SEQ) BILL_SEQ, IF(QUO_TB.QUO_SEQ IS NULL, 0, QUO_TB.TOTAL_VAT - COALESCE(SUM(BILL_TB.BILL), 0)) AS NEW_ARREARS
		    FROM SLS_TB
		    INNER JOIN QUO_TB ON SLS_TB.QUO_YM = QUO_TB.QUO_YM AND SLS_TB.QUO_SEQ = QUO_TB.QUO_SEQ
		    LEFT JOIN BILL_TB ON SLS_TB.SLS_YM = BILL_TB.SLS_YM AND SLS_TB.SLS_SEQ = BILL_TB.SLS_SEQ
		    WHERE QUO_TB.QUO_YM = substring(#{quoId},2,4)
		    AND QUO_TB.QUO_SEQ = substring(#{quoId},8,4)
		    AND BILL_TB.PAY_CODE IS NOT NULL
		    AND BILL_TB.state != '6'
		    GROUP BY SLS_YM, SLS_SEQ
		) AS NEW_VALUES 
		ON SLS_TB.SLS_YM = NEW_VALUES.SLS_YM AND SLS_TB.SLS_SEQ = NEW_VALUES.SLS_SEQ
		
		INNER JOIN BILL_TB
        ON BILL_TB.BILL_SEQ = NEW_VALUES.BILL_SEQ
                
		SET SLS_TB.ARREARS = NEW_VALUES.NEW_ARREARS,
            BILL_TB.UDT_DT = IF (SLS_TB.ARREARS = NEW_VALUES.NEW_ARREARS, BILL_TB.UDT_DT, NOW());
	</update>
		
	<resultMap type="quoRes" id="quoMap">
		<id column="quo_ym" property="quoYm"/>
		<id column="quo_seq" property="quoSeq"/>
		<result column="quoId" property="quoId"/>
		<result column="sbkId" property="sbkId"/>
		<result column="chqId" property="chqId"/>
		<result column="slsId" property="slsId"/>
		<result column="SECRET_YN" property="secretYn"/>
		
		<!-- /* 신청서 업데이트 후 삭제 예정 */ -->
		<result column="cmpyCode" property="cmpyCode"/>
		<result column="cmpyType" property="cmpyType"/>
		<result column="cmpy_seq" property="cmpySeq"/>
		<result column="cmpy_mng_seq" property="cmpyMngSeq"/>
		<result column="cmpyTitle" property="cmpyTitle"/>
		<result column="cmpyMngName" property="cmpyMngName"/>
		<result column="cmpyMngTel" property="cmpyMngTel"/>
		<result column="cmpyMngEmail" property="cmpyMngEmail"/>
		<result column="cmpyName" property="cmpyName"/>
		<result column="MNG_NAME" property="mngName"/>
		<result column="MNG_PHONE" property="mngPhone"/>
		<result column="MNG_EMAIL" property="mngEmail"/>
		<!-- /* 신청서 업데이트 후 삭제 예정 */ -->
		
		<!-- # 견적서 작성양식 리폼건 (#31) -->
		<result column="MNG_ID" property="mngId"/>
		<result column="PRTN_SEQ" property="prtnSeq"/>
		<result column="PRTN_MNG_SEQ" property="prtnMngSeq"/>
		<result column="PRTN_YN" property="prtnYn"/>
		<result column="PRTN_NAME" property="prtnName"/>
		<result column="PRTN_MNG_NAME" property="prtnMngName"/>
		<result column="PRTN_MNG_TEL" property="prtnMngTel"/>
		<result column="PRTN_MNG_EMAIL" property="prtnMngEmail"/>
		<result column="DIRT_SEQ" property="dirtSeq"/>
		<result column="DIRT_MNG_SEQ" property="dirtMngSeq"/>
		<result column="DIRT_NAME" property="dirtName"/>
		<result column="DIRT_MNG_NAME" property="dirtMngName"/>
		<result column="DIRT_MNG_TEL" property="dirtMngTel"/>
		<result column="DIRT_MNG_EMAIL" property="dirtMngEmail"/>
		<!-- # 견적서 작성양식 리폼건 (#31) -->
		
		<result column="est_cmp_dt" property="estCmpDt"/>
		<result column="version" property="version"/>
		<result column="issue_dt" property="issueDt"/>
		<result column="INS_MEM" property="insMem"/>
		<result column="mem_name" property="memName"/>
		<result column="prdct_name" property="prdctName"/>
		<result column="model_name" property="modelName"/>
		<result column="trgt_crtfc" property="trgtCrtfc"/>
		<result column="prd_inf" property="prdInf"/>
		<result column="power_suply_yn" property="powerSuplyYn"/>
		<result column="wght_yn" property="wghtYn"/>
		<result column="memo" property="memo"/>
		<result column="ENG_MEMO" property="engMemo"/>
		<result column="vat_yn" property="vatYn"/>
		<result column="need_week" property="needWeek"/>
		<result column="spcl_cndtn" property="spclCndtn"/>
		<result column="cost_total" property="CostTotal"/>
		<result column="total_vat" property="TotalVat"/>
<!-- 		<result column="SGN_URL" property="sgnUrl"/> -->
<!-- 		<result column="ATCH_FILE_ID" property="atchFileId"/> -->
		<result column="ENG_NAME" property="engName"/>
		<result column="memPos" property="memPos"/>
		<result column="dir" property="dir"/>
		<result column="cp" property="cp"/>
		<result column="email" property="email"/>
		
		<result column="lastState" property="lastState"/>
		<result column="CNT" property="cnt"/>
		<result column="billState" property="billState"/>
		
		<result column="ARREARS" property="arrears"/>
		<result column="QUO_STATE_CODE" property="quoStateCode"/>
		<result column="QUO_MOD_SEQ" property="quoModeSeq"/>
		<result column="quoModState" property="quoModState"/>
		<result column="SBK_REVISION" property="revision"/>
		<result column="prmsDtStr" property="prmsDtStr"/>
		<result column="prmsName" property="prmsName"/>
		
		<collection property="items" ofType="testItemDTO">
        	<id column="test_item_seq" property="testItemSeq"/>
        	<result column="TEST_SEQ" property="testSeq"/>
        	<result column="crtfc1" property="crtfc1"/>
	        <result column="crtfc2" property="crtfc2"/>
	        <result column="crtfc3" property="crtfc3"/>
	        <result column="crtfc4" property="crtfc4"/>
    	    <result column="TEST_TYPE_CODE" property="testTypeCode"/>
       	 	<result column="TEST_STNDR_SEQ" property="testStndrSeq"/>
       	 	<result column="TEST_STNDR" property="testStndr"/>
       	 	<result column="TEST_STNDR_TEXT" property="testStndrText"/>
       	 	<result column="testCate" property="testCate"/>
       	 	<result column="TEST_TYPE" property="testType"/>
       	 	<result column="product" property="product"/>
       	 	<result column="model" property="model"/>
       	 	<result column="itemMemo" property="memo"/>
       	 	<result column="fee" property="fee"/>
       	 	<result column="LCNS_TAX" property="lcnsTax"/>
       	 	<result column="TEST_FEE" property="testFee"/>
       	 	<result column="chrgs" property="chrgs"/>
       	 	<result column="ADVNC_PYMNT" property="advncPymnt"/>
       	 	<result column="SPCL_DSCNT" property="spclDscnt"/>
       	 	<result column="CNSLT_FEE" property="cnsltFee"/>
       	 	<result column="OTSRC_FEE" property="otsrcFee"/>
       	 	<result column="NET_SALES" property="netSales"/>
       	 	<result column="CANCEL_FEE" property="cancelFee"/>
        </collection>
	</resultMap>
	<select id="selectDetail" parameterType="String" resultMap="quoMap">
		SELECT
			QUO_TB.QUO_YM
			, QUO_TB.QUO_SEQ
			, JOB_TB.SECRET_YN
			, CONCAT (FN_GET_SEQSTRING('Q', QUO_TB.QUO_YM, QUO_TB.TYPE, QUO_TB.QUO_SEQ), IF(JOB_TB.SECRET_YN=1,'-A',''))  QUOID 
            , IFNULL (CONCAT ('SB', SBK_TB.SBK_YM, '-' , SBK_TB.TYPE, LPAD(SBK_TB.SBK_SEQ,4,0), IF(REVISION > 0, CONCAT ('-',REVISION), '')), '') SBKID
            , IF (QUO_TB.CHQ_SEQ=0, '', CONCAT ('CH',QUO_TB.CHQ_YM,'-',LPAD(QUO_TB.CHQ_SEQ,3,0))) chqId
            , FN_GET_SEQSTRING ('M', SLS_TB.SLS_YM, '', SLS_TB.SLS_SEQ) slsId
			
			/* 신청서 업데이트 후 삭제 예정 */
            ,IFNULL ((SELECT CMPY_CODE FROM CMPY_TB WHERE CMPY_SEQ = JOB_TB.CMPY_SEQ),'') CMPY_CODE
			,FN_CUST_TYPE(JOB_TB.CMPY_SEQ) CMPYTYPE
			,JOB_TB.CMPY_SEQ
			,JOB_TB.CMPY_MNG_SEQ
			,IFNULL (CMPY_TB.CMPY_NAME, '') cmpyTitle
			,IFNULL (CMPY_MNG_TB.NAME, '') cmpyMngName
            ,IFNULL (JOB_TB.CMPY_NAME, '') CMPYNAME
            ,IFNULL (CMPY_MNG_TB.TEL, '') cmpyMngTel
            ,IFNULL (CMPY_MNG_TB.EMAIL, '') cmpyMngEmail
            ,IFNULL (JOB_TB.MNG_NAME, '') MNG_NAME	
			,IFNULL (JOB_TB.MNG_PHONE, '') MNG_PHONE
			,IFNULL (JOB_TB.MNG_EMAIL, '') MNG_EMAIL
			#

			# 견적서 작성양식 리폼건 (#31)
			, JOB_TB.MNG_ID
			, PRTN_SEQ
			, PRTN_MNG_SEQ
			, PRTN_YN
			, IFNULL (PRTN.CMPY_NAME, '') PRTN_NAME
			, IFNULL (PRTN_MNG.NAME, '') PRTN_MNG_NAME
			, IFNULL (PRTN_MNG.TEL, '') PRTN_MNG_TEL
            , IFNULL (PRTN_MNG.EMAIL, '') PRTN_MNG_EMAIL
            
			, DIRT_SEQ
			, DIRT_MNG_SEQ
			, IFNULL (DIRT.CMPY_NAME, '') DIRT_NAME
			, IFNULL (DIRT_MNG.NAME, '') DIRT_MNG_NAME
			, IFNULL (DIRT_MNG.TEL, '') DIRT_MNG_TEL
            , IFNULL (DIRT_MNG.EMAIL, '') DIRT_MNG_EMAIL			
						
            ,FN_MEM_NAME (QUO_TB.INS_MEM_ID) INS_MEM	/* 작성자 추가 */
			,MEMBER_TB.MEM_NAME							/* 업무담당자 추가 */
            
			,DATE_FORMAT(QUO_TB.EST_CMP_DT, '%Y-%m-%d') EST_CMP_DT
			,VERSION
			,DATE_FORMAT(QUO_TB.ISSUE_DT, '%Y-%m-%d') ISSUE_DT 
			,JOB_TB.PRDCT_NAME
			,JOB_TB.MODEL_NAME
			,QUO_TB.TRGT_CRTFC
			,QUO_TB.PRD_INF
			,QUO_TB.POWER_SUPLY_YN
			,QUO_TB.WGHT_YN
			,JOB_TB.MEMO
			,QUO_TB.ENG_MEMO
			,QUO_TB.VAT_YN
			,QUO_TB.NEED_WEEK
			,QUO_TB.SPCL_CNDTN
			,QUO_TB.COST_TOTAL
			,QUO_TB.TOTAL_VAT
			#,FN_GET_IMAGE (QUO_TB.SGN_URL,0) SGN_URL
			#,QUO_TB.SGN_URL ATCH_FILE_ID
			,IFNULL (MEMBER_TB.ENG_NAME, '') ENG_NAME
			,CONCAT (MEMBER_TB.MEM_NAME, ' ' ,(SELECT IFNULL(NAME, '') FROM POS_TB WHERE POS_TB.POS_SEQ = MEMBER_TB.POS_SEQ LIMIT 1)) memPos
			,IFNULL (FN_GET_PHONE_FORMAT (MEMBER_TB.TEL), '') dir
			,IFNULL (FN_GET_PHONE_FORMAT (MEMBER_TB.PHONE), '') cp
			,CONCAT (MEMBER_TB.id,'@standardbank.co.kr') email
			
			
			, IFNULL(SLS_TB.ARREARS,'') ARREARS
			, IFNULL(QUO_STATE_CODE, '0') QUO_STATE_CODE
			, QUO_MOD_TB.QUO_MOD_SEQ
			, IFNULL(FN_CODE_NAME (QUO_MOD_TB.STATE_CODE, 'MM'), '') quoModState
            , IFNULL(DATE_FORMAT(QUO_MOD_TB.PRMS_DT, '%Y-%m-%d'),'') prmsDtStr
            , IFNULL(FN_MEM_NAME (QUO_MOD_TB.PRMS_ID),'') prmsName
            
            
           	, CASE 
           		WHEN SLS_TB.SLS_YM IS NULL THEN '-'
				WHEN QUO_TB.TOTAL_VAT = SLS_TB.ARREARS THEN '미납' 
				WHEN SLS_TB.ARREARS = 0 THEN '완납'
				ELSE '납입중' 
			END lastState
			, billCnt.CNT
		    , IFNULL (FN_CODE_NAME (BILL_TB.STATE, 'MB'), '-') billState
			    
            , JOB_TB.SBK_REVISION
            
			, QUO_TB.UDT_DT 
			, QUO_TB.UDT_MEM_ID
			
			/* 시험항목 및 비용 */
			,TEST_ITEM_TB.TEST_ITEM_SEQ
			,IFNULL (TEST_TB.TEST_SEQ, 0) TEST_SEQ
			
			,cate1.TEST_CATE_SEQ crtfc1
			,cate2.TEST_CATE_SEQ crtfc2
			,cate3.TEST_CATE_SEQ crtfc3
			,cate4.TEST_CATE_SEQ crtfc4
			
			,TEST_ITEM_TB.TEST_TYPE_CODE
			,TEST_STNDR_TB.TEST_STNDR_SEQ
			,IF (TEST_ITEM_TB.TEST_STNDR_SEQ=0, TEST_ITEM_TB.TEST_STNDR_TEXT, IFNULL (TEST_STNDR_TB.TEST_STNDR, '')) TEST_STNDR
			,TEST_ITEM_TB.TEST_STNDR_TEXT
			,CONCAT (cate3.name,'-',cate4.name) testCate
			,FN_CODE_NAME (TEST_ITEM_TB.TEST_TYPE_CODE,'TT') TEST_TYPE
			,TEST_ITEM_TB.PRODUCT
			,TEST_ITEM_TB.MODEL
			,TEST_ITEM_TB.MEMO itemMemo
			,TEST_ITEM_TB.FEE
			,TEST_ITEM_TB.LCNS_TAX
			,TEST_ITEM_TB.TEST_FEE
			,TEST_ITEM_TB.CHRGS
			,TEST_ITEM_TB.ADVNC_PYMNT
			,TEST_ITEM_TB.SPCL_DSCNT
			,TEST_ITEM_TB.CNSLT_FEE
			,TEST_ITEM_TB.OTSRC_FEE
			,TEST_ITEM_TB.NET_SALES
			,TEST_ITEM_TB.CANCEL_FEE
		FROM QUO_TB
			
		    INNER JOIN JOB_TB
		    ON QUO_TB.QUO_YM = JOB_TB.QUO_YM
		    AND QUO_TB.QUO_SEQ = JOB_TB.QUO_SEQ
		    
		    INNER JOIN MEMBER_TB
		    ON JOB_TB.MNG_ID = MEMBER_TB.ID
		    
		    LEFT JOIN TEST_ITEM_TB
		    ON QUO_TB.QUO_YM = TEST_ITEM_TB.QUO_YM
		    AND QUO_TB.QUO_SEQ = TEST_ITEM_TB.QUO_SEQ
		    AND TEST_ITEM_TB.STATE != 'D'
		    
		    LEFT JOIN TEST_STNDR_TB
		    ON TEST_ITEM_TB.TEST_STNDR_SEQ = TEST_STNDR_TB.TEST_STNDR_SEQ
		    
		    LEFT JOIN TEST_TB
            ON TEST_ITEM_TB.TEST_ITEM_SEQ = TEST_TB.TEST_ITEM_SEQ
            
		    LEFT JOIN TEST_CATE_TB cate4 ON TEST_ITEM_TB.CRTF_TYPE_SEQ = cate4.TEST_CATE_SEQ
		    LEFT JOIN TEST_CATE_TB cate3 ON cate4.TOP_DEPTH_SEQ = cate3.TEST_CATE_SEQ
		    LEFT JOIN TEST_CATE_TB cate2 ON cate3.TOP_DEPTH_SEQ = cate2.TEST_CATE_SEQ
		    LEFT JOIN TEST_CATE_TB cate1 ON cate2.TOP_DEPTH_SEQ = cate1.TEST_CATE_SEQ

			LEFT JOIN SLS_TB
			ON SLS_TB.QUO_YM = JOB_TB.QUO_YM
		    AND SLS_TB.QUO_SEQ = JOB_TB.QUO_SEQ
		    
		    
            LEFT JOIN QUO_MOD_TB
            ON QUO_MOD_TB.QUO_MOD_SEQ = (
								SELECT QUO_MOD_SEQ
                                FROM QUO_MOD_TB SUB
                                WHERE SUB.QUO_YM = QUO_TB.QUO_YM
                                AND SUB.QUO_SEQ = QUO_TB.QUO_SEQ
                                ORDER BY QUO_MOD_SEQ DESC
                                LIMIT 1
            )
            
           
           	/* 납입횟수 */                           
			LEFT JOIN (
				SELECT SLS_YM, SLS_SEQ, COUNT(BILL_TB.BILL_SEQ) CNT
				FROM BILL_TB
				WHERE BILL_TB.STATE NOT IN ('4','6')
				GROUP BY SLS_YM, SLS_SEQ
			) billCnt
			ON SLS_TB.SLS_YM = billCnt.SLS_YM
			AND SLS_TB.SLS_SEQ = billCnt.SLS_SEQ
		    
		    /* 최근 계산서발행 데이터 */            
			LEFT JOIN BILL_TB
			ON BILL_TB.BILL_SEQ = (
								SELECT BILL_SEQ
								FROM BILL_TB SUB
								WHERE SUB.SLS_YM = SLS_TB.SLS_YM
								AND SUB.SLS_SEQ = SLS_TB.SLS_SEQ
								ORDER BY BILL_SEQ DESC
								LIMIT 1
			)
			AND BILL_TB.SLS_YM = SLS_TB.SLS_YM
			AND BILL_TB.SLS_SEQ = SLS_TB.SLS_SEQ
				
            LEFT JOIN SBK_TB
            ON SBK_TB.SBK_YM = JOB_TB.SBK_YM
            AND SBK_TB.TYPE = JOB_TB.SBK_TYPE
			AND SBK_TB.SBK_SEQ = JOB_TB.SBK_SEQ
			AND SBK_TB.REVISION = JOB_TB.SBK_REVISION
            
            /* 신청서 업데이트 후 삭제 예정 */
            LEFT JOIN CMPY_TB ON JOB_TB.CMPY_SEQ = CMPY_TB.CMPY_SEQ
            LEFT JOIN CMPY_MNG_TB ON JOB_TB.CMPY_MNG_SEQ = CMPY_MNG_TB.CMPY_MNG_SEQ
            #
            
            # 견적서 작성양식 리폼건 (#31)
            LEFT JOIN CMPY_TB PRTN ON JOB_TB.PRTN_SEQ = PRTN.CMPY_SEQ
            LEFT JOIN CMPY_MNG_TB PRTN_MNG ON JOB_TB.PRTN_MNG_SEQ = PRTN_MNG.CMPY_MNG_SEQ
            LEFT JOIN CMPY_TB DIRT ON JOB_TB.DIRT_SEQ = DIRT.CMPY_SEQ
            LEFT JOIN CMPY_MNG_TB DIRT_MNG ON JOB_TB.DIRT_MNG_SEQ = DIRT_MNG.CMPY_MNG_SEQ
            
        WHERE 1=1
        
        <if test="secretYn == 0">AND IF(JOB_TB.SECRET_YN = 1, JOB_TB.MNG_ID = #{memId}, 1)</if>
        
        <if test="quoId != null and quoId != ''">
		AND QUO_TB.QUO_YM = SUBSTRING(#{quoId},2,4)
		AND QUO_TB.QUO_SEQ = SUBSTRING(#{quoId},8,4)
		</if>
		<if test="sbkId != null and sbkId != ''">
	    AND JOB_TB.SBK_YM = SUBSTRING(#{sbkId},3,2)
	    AND JOB_TB.SBK_TYPE = SUBSTRING(#{sbkId},6,1)
		AND JOB_TB.SBK_SEQ = SUBSTRING(#{sbkId},7,4)
		AND JOB_TB.SBK_REVISION = SUBSTRING(#{sbkId},12,1)
		</if>
	</select>
	
	<select id="selectStatusList" parameterType="String" resultType="egovMap">
		SELECT
			DATE_FORMAT(QUO_MOD_TB.ins_dt, '%Y-%m-%d') insDtStr,
		    FN_MEM_NAME (QUO_MOD_TB.ins_mem_id) insName,
            QUO_MOD_TB.STATE_CODE,
            IF (QUO_MOD_TB.state_code=5,'세금계산서 신청','견적서 수정') type,
		    IFNULL (memo, '') memo,
		    bill,
            IFNULL (FN_CODE_NAME (
								case state_code
                                when 2 then QUO_MOD_TB.state_code
                                when 3 then QUO_MOD_TB.state_code
                                when 5 then 0
                                else 3 end
                                ,'MM'), '-') prmsType,
			IFNULL (FN_MEM_NAME (QUO_MOD_TB.PRMS_ID), '') PrmsName,
            IFNULL (DATE_FORMAT(QUO_MOD_TB.PRMS_DT, '%Y-%m-%d'), '') PRMS_DT,
		    IFNULL (FN_CODE_NAME (IF (QUO_MOD_TB.STATE_CODE=4, 4, 0),'MM'), '-') stateType,
			IFNULL (DATE_FORMAT(IF (QUO_MOD_TB.STATE_CODE=4, QUO_MOD_TB.UDT_DT, ''), '%Y-%m-%d'), '') UDT_DT,
			IF (QUO_MOD_TB.STATE_CODE=4, FN_MEM_NAME (QUO_MOD_TB.UDT_MEM_ID), '') udtName
		FROM QUO_MOD_TB
		WHERE 1=1
		AND QUO_MOD_TB.quo_ym = SUBSTRING(#{quoId},2,4)
		AND QUO_MOD_TB.quo_seq = SUBSTRING(#{quoId},8,4)
		ORDER BY QUO_MOD_SEQ DESC
	</select>
	
	<update id="updateQuoState" parameterType="quoModReq">
		UPDATE QUO_TB
		SET
			QUO_STATE_CODE = #{stateCode},
			UDT_MEM_ID = #{udtMemId},
			UDT_DT = current_timestamp(),	
			STATE = 'U'
		WHERE QUO_TB.quo_ym = substring(#{quoId},2,4)
		AND QUO_TB.quo_seq = substring(#{quoId},8,4)
	</update>
	
	<insert id="insertState" parameterType="quoModReq" >
		INSERT INTO QUO_MOD_TB
		(
			QUO_YM,
			QUO_SEQ,
			MEMO,
			BILL,
			STATE_CODE,
			INS_MEM_ID,
			UDT_MEM_ID
		)
		VALUES
		(
			SUBSTRING(#{quoId},2,4),
			SUBSTRING(#{quoId},8,4),
			#{memo},
			#{bill},
			#{stateCode},
			#{insMemId},
			#{udtMemId}
		);

	</insert>

	<update id="updateState" parameterType="quoModReq" >
		UPDATE QUO_MOD_TB
		SET
			STATE_CODE = #{stateCode},
			<if test='stateCode == "3"'>
			prms_dt = current_timestamp(),
			prms_id = #{udtMemId},
			</if>
			UDT_MEM_ID = #{udtMemId},
			UDT_DT = current_timestamp()
		WHERE QUO_MOD_TB.quo_ym = substring(#{quoId},2,4)
		AND QUO_MOD_TB.quo_seq = substring(#{quoId},8,4)
		<if test='stateCode == "3"'>
		AND STATE_CODE = '2'
		</if>
		<if test='stateCode == "4"'>
		AND STATE_CODE = '3'
		</if>

	</update>
	
	<select id="billCheck" parameterType="String" resultType="int">
		SELECT ARREARS
		FROM SLS_TB
		WHERE QUO_YM = SUBSTRING(#{quoId},2,4)
        AND QUO_SEQ = SUBSTRING(#{quoId},8,4)
	</select>
	<insert id="billInsert" parameterType="quoModReq" >
		INSERT INTO BILL_TB
		(
			SLS_YM,
			SLS_SEQ,
			BILL_SEQ,
			BILL,
			INS_MEM_ID,
			UDT_MEM_ID
		)
        SELECT 
	        SLS_YM,
	        SLS_SEQ,
	        (SELECT IFNULL (MAX(seq.BILL_SEQ)+1, 1) billSeq FROM BILL_TB seq WHERE seq.SLS_YM = SLS_YM AND seq.SLS_SEQ = SLS_SEQ) seq,
			#{bill},
			#{insMemId},
			#{udtMemId}
        FROM SLS_TB
        WHERE QUO_YM = SUBSTRING(#{quoId},2,4)
        AND QUO_SEQ = SUBSTRING(#{quoId},8,4)
	</insert>
	
	<select id="hisList" parameterType="String" resultType="egovMap">
		SELECT 
		
			DATE_FORMAT(QUO_HIS_TB.INS_DT, '%Y-%m-%d %T') intDtStr,
		    MEMBER_TB.MEM_NAME,
		    FN_POS_NAME(QUO_HIS_TB.MEM_ID) memPos
			
		FROM QUO_HIS_TB
		
			INNER JOIN MEMBER_TB
		    ON QUO_HIS_TB.MEM_ID = MEMBER_TB.ID
		    
		WHERE 1=1
		AND QUO_HIS_TB.QUO_ID = #{quoId}
		
		ORDER BY QUO_HIS_TB.INS_DT DESC
	</select>
	
	<select id="checkTestStartItem" resultType="int">
		SELECT COUNT(1)
		FROM TEST_ITEM_TB
			INNER JOIN TEST_TB
		    ON TEST_ITEM_TB.TEST_ITEM_SEQ = TEST_TB.TEST_ITEM_SEQ
		WHERE TEST_ITEM_TB.TEST_ITEM_SEQ IN
		<foreach collection="testItems" item="item" open="(" separator="," close=")">
			#{item.testItemSeq}
		</foreach>
	</select>
		
</mapper>