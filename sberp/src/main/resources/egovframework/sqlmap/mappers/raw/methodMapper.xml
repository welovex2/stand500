<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="egovframework.raw.service.MethodMapper">

	<insert id="insertCe" parameterType="ceDTO">
		<selectKey resultType="int" keyProperty="ceSeq" order="BEFORE">
	        SELECT ifnull(MAX(CE_SEQ)+1,1) ceSeq FROM METHOD_CE_TB
	    </selectKey>
		INSERT INTO METHOD_CE_TB
		(
			CE_SEQ,
			RAW_SEQ,
			VLT_AC_YN,
			VLT_ETC,
			VLT_ETC_YN,
			VAR_N_YN,
			VAR_Y_YN,
			ROOM1_YN,
			ROOM2_YN,
			ROOM3_YN,
			TEMP,
			TEMP_PLUS,
			HMDT,
			HMDT_PLUS,
			MSRMN_YEAR,
			MSRMN_MON,
			MSRMN_DAY,
			MSRMN_HOUR,
			MSRMN_MIN,
			SIGN,
			SIGN_URL,
			RESULT_CODE,
			RESULT_URL,
			INS_MEM_ID,
			UDT_MEM_ID
		)
		VALUES
		(
			#{ceSeq},
			#{rawSeq},
			#{vltAcYn},
			#{vltEtc},
			#{vltEtcYn},
			#{varNYn},
			#{varYYn},
			#{room1Yn},
			#{room2Yn},
			#{room3Yn},
			#{temp},
			#{tempPlus},
			#{hmdt},
			#{hmdtPlus},
			#{msrmnYear},
			#{msrmnMon},
			#{msrmnDay},
			#{msrmnHour},
			#{msrmnMin},
			#{sign},
			#{signUrl},
			#{resultCode},
			#{resultUrl},
			#{insMemId},
			#{udtMemId}
		)
		ON DUPLICATE KEY UPDATE
			VLT_AC_YN = #{vltAcYn},
			VLT_ETC = #{vltEtc},
			VLT_ETC_YN = #{vltEtcYn},
			VAR_N_YN = #{varNYn},
			VAR_Y_YN = #{varYYn},
			ROOM1_YN = #{room1Yn},
			ROOM2_YN = #{room2Yn},
			ROOM3_YN = #{room3Yn},
			TEMP = #{temp},
			TEMP_PLUS = #{tempPlus},
			HMDT = #{hmdt},
			HMDT_PLUS = #{hmdtPlus},
			MSRMN_YEAR = #{msrmnYear},
			MSRMN_MON = #{msrmnMon},
			MSRMN_DAY = #{msrmnDay},
			MSRMN_HOUR = #{msrmnHour},
			MSRMN_MIN = #{msrmnMin},
			SIGN = #{sign},
			<if test="signUrl != null and signUrl != ''">SIGN_URL = #{signUrl},</if>
			RESULT_CODE = #{resultCode},
			<if test="resultUrl != null and resultUrl != ''">RESULT_URL = #{resultUrl},</if>
			UDT_DT = NOW(),
			UDT_MEM_ID = #{udtMemId}
	</insert>

	<insert id="insertMac">
		<foreach collection="macList" item="item" separator=";">
		INSERT INTO RAW_MAC_TB
		(
			RAW_MAC_SEQ,
			MACHINE_TYPE,
			RAW_SEQ,
			MACHINE_SEQ,
			REFORM_DT,
			USE_YN
		)
		VALUES
		(
			(SELECT IFNULL(MAX(RAW_MAC_SEQ) + 1, 1) FROM RAW_MAC_TB sub),
			#{machineType},
			#{rawSeq},
			#{item.machineSeq},
			(SELECT REFORM_DT FROM MACHINE_TB WHERE MACHINE_SEQ = #{item.machineSeq} LIMIT 1),
			#{item.useYn}
		)
		ON DUPLICATE KEY UPDATE
			USE_YN = #{item.useYn}
		</foreach>
	</insert>
	
	<select id="macList" resultType="egovMap">
		SELECT
		    RAW_MAC_SEQ,
		    #{machineType} MACHINE_TYPE,
		    RAW_SEQ,
		    RAW_MAC_TB.MACHINE_SEQ,
		    NAME,
		    MODEL,
		    MNFCT_CMPNY,
		    MNFCT_SERIAL,
		    IFNULL (DATE_FORMAT(RAW_MAC_TB.REFORM_DT, '%Y-%m-%d'), '-') reformDtStr,
		    IF (REFORM_PERIOD = 0, '-', CONCAT (REFORM_PERIOD, '년')) REFORM_PERIOD,
		    USE_YN
		FROM
		    RAW_MAC_TB
		    INNER JOIN MACHINE_TB on RAW_MAC_TB.MACHINE_SEQ = MACHINE_TB.MACHINE_SEQ
		WHERE
		    1 = 1
		AND RAW_SEQ = #{rawSeq}
		<!-- CA, CB가 한페이지에 나와야 하므로 머신타입 유지 -->
		<if test="machineType == 'CA' or machineType == 'CB'">
			AND MACHINE_TYPE = 'CE'
			<if test="machineType == 'CA'">and CEA_YN = 1</if>
			<if test="machineType == 'CB'">and CEB_YN = 1</if>
		</if>
		<if test="machineType == 'RA' or machineType == 'RB'">
			AND MACHINE_TYPE = 'RE'
			<if test="machineType == 'RA'">and REA_YN = 1</if>
			<if test="machineType == 'RB'">and REB_YN = 1</if>
		</if>
		<if test="machineType != 'CA' and machineType != 'CB' and machineType != 'RA' and machineType != 'RB'">
			AND MACHINE_TYPE = #{machineType}
		</if>
		ORDER BY 
		<choose>
			<when test="machineType == 'ED'">MACHINE_TB.ESD_ORDR ASC,</when>
			<when test="machineType == 'RS'">MACHINE_TB.RS_ORDR ASC,</when>
			<when test="machineType == 'ET'">MACHINE_TB.EFT_ORDR ASC,</when>
			<when test="machineType == 'SG'">MACHINE_TB.SURGE_ORDR ASC,</when>
			<when test="machineType == 'CS'">MACHINE_TB.CS_ORDR ASC,</when>
			<when test="machineType == 'MF'">MACHINE_TB.MFLD_ORDR ASC,</when>
			<when test="machineType == 'VD'">MACHINE_TB.VDIP_ORDR ASC,</when>
			<when test="machineType == 'CA'">MACHINE_TB.CEA_ORDR ASC,</when>
			<when test="machineType == 'CB'">MACHINE_TB.CEB_ORDR ASC,</when>
			<when test="machineType == 'RA'">MACHINE_TB.REA_ORDR ASC,</when>
			<when test="machineType == 'RB'">MACHINE_TB.REB_ORDR ASC,</when>
		</choose>
		MACHINE_TB.MACHINE_SEQ DESC
	</select>

	<select id="emptyMacList" resultType="egovMap">
		SELECT
		    '' RAW_MAC_SEQ,
		    #{machineType} MACHINE_TYPE,
		    '' RAW_SEQ,
		    MACHINE_TB.MACHINE_SEQ,
		    NAME,
		    model,
		    MNFCT_CMPNY,
		    MNFCT_SERIAL,
		    IFNULL (DATE_FORMAT(REFORM_DT, '%Y-%m-%d'), '-') reformDtStr,
		    CONCAT (REFORM_PERIOD, '년') REFORM_PERIOD,
		    false USE_YN
		FROM
		    MACHINE_TB
		WHERE
		    1 = 1
		<choose>
			<when test="machineType == 'ED'">AND ESD_YN = 1 AND ESD_USE_YN = 1</when>
			<when test="machineType == 'RS'">AND RS_YN = 1 AND RS_USE_YN = 1</when>
			<when test="machineType == 'ET'">AND EFT_YN = 1 AND EFT_USE_YN = 1</when>
			<when test="machineType == 'SG'">AND SURGE_YN = 1 AND SURGE_USE_YN = 1</when>
			<when test="machineType == 'CS'">AND CS_YN = 1 AND CS_USE_YN = 1</when>
			<when test="machineType == 'MF'">AND MFLD_YN = 1 AND MFLD_USE_YN = 1</when>
			<when test="machineType == 'VD'">AND VDIP_YN = 1 AND VDIP_USE_YN = 1</when>
			<when test="machineType == 'CA'">AND CEA_YN = 1 AND CEA_USE_YN = 1</when>
			<when test="machineType == 'CB'">AND CEB_YN = 1 AND CEB_USE_YN = 1</when>
			<when test="machineType == 'RA'">AND REA_YN = 1 AND REA_USE_YN = 1</when>
			<when test="machineType == 'RB'">AND REB_YN = 1 AND REB_USE_YN = 1</when>
		</choose>
		ORDER BY 
		<choose>
			<when test="machineType == 'ED'">MACHINE_TB.ESD_ORDR ASC,</when>
			<when test="machineType == 'RS'">MACHINE_TB.RS_ORDR ASC,</when>
			<when test="machineType == 'ET'">MACHINE_TB.EFT_ORDR ASC,</when>
			<when test="machineType == 'SG'">MACHINE_TB.SURGE_ORDR ASC,</when>
			<when test="machineType == 'CS'">MACHINE_TB.CS_ORDR ASC,</when>
			<when test="machineType == 'MF'">MACHINE_TB.MFLD_ORDR ASC,</when>
			<when test="machineType == 'VD'">MACHINE_TB.VDIP_ORDR ASC,</when>
			<when test="machineType == 'CA'">MACHINE_TB.CEA_ORDR ASC,</when>
			<when test="machineType == 'CB'">MACHINE_TB.CEB_ORDR ASC,</when>
			<when test="machineType == 'RA'">MACHINE_TB.REA_ORDR ASC,</when>
			<when test="machineType == 'RB'">MACHINE_TB.REB_ORDR ASC,</when>
		</choose>
		MACHINE_TB.MACHINE_SEQ DESC
	</select>
		
	<select id="esdSubList" parameterType="int" resultType="egovMap">
		SELECT 
			ESD_SUB_SEQ,
		    ESD_SEQ,
		    DRCTL,
		    DC_CODE,
		    RESULT_CODE,
		    MEMO,
		    STATE
		FROM METHOD_ESD_SUB_TB
		WHERE 1=1
		AND STATE != 'D'
		AND ESD_SEQ = #{esdSeq}
	</select>
	
	<select id="ceDetail" parameterType="int" resultType="ceDTO">
		SELECT CE_SEQ,
		    RAW_SEQ,
		    VLT_AC_YN,
		    VLT_ETC,
		    VLT_ETC_YN,
		    VAR_N_YN,
		    VAR_Y_YN,
		    ROOM1_YN,
		    ROOM2_YN,
		    ROOM3_YN,
		    TEMP,
		    TEMP_PLUS,
		    HMDT,
		    HMDT_PLUS,
		    MSRMN_YEAR,
		    MSRMN_MON,
		    MSRMN_DAY,
		    MSRMN_HOUR,
		    MSRMN_MIN,
		    SIGN,
		    FN_GET_IMAGE(SIGN_URL,0) SIGN_URL,
		    RESULT_CODE,
		    RESULT_URL
		FROM METHOD_CE_TB
		WHERE 1=1
		AND RAW_SEQ = #{rawSeq}
	</select>

	<select id="reDetail" parameterType="int" resultType="reDTO">
		SELECT RE_SEQ,
		    RAW_SEQ,
		    VLT_AC_YN,
		    VLT_ETC,
		    VLT_ETC_YN,
		    VAR_N_YN,
		    VAR_Y_YN,
		    HZ1_CODE,
		    HZ1_VLT10M_YN,
		    HZ1_VLT3M_YN,
		    HZ1_VLT_ETC1,
		    HZ1_VLT_ETC1_YN,
		    HZ1_VLT_ETC2,
		    HZ1_VLT_ETC2_YN,
		    HZ1_LNGTH_1M_YN,
		    HZ1_LNGTH_3M_YN,
		    HZ1_LNGTH_10M_YN,
		    HZ1_LNGTH_30M_YN,
		    HZ1_ANTN_2M_YN,
		    HZ1_ANTN_3M_YN,
		    HZ1_ANTN_4M_YN,
		    HZ1_TEMP,
		    HZ1_TEMP_PLUS,
		    HZ1_HMDT,
		    HZ1_HMDT_PLUS,
		    HZ1_MSRMN_YEAR,
		    HZ1_MSRMN_MON,
		    HZ1_MSRMN_DAY,
		    HZ1_MSRMN_HOUR,
		    HZ1_MSRMN_MIN,
		    HZ1_SIGN,
		    FN_GET_IMAGE(HZ1_SIGN_URL,0) HZ1_SIGN_URL,
		    HZ1_RESULT_CODE,
		    HZ2_CODE,
		    HZ2_VLT10M_YN,
		    HZ2_VLT3M_YN,
		    HZ2_VLT_ETC1,
		    HZ2_VLT_ETC1_YN,
		    HZ2_VLT_ETC2,
		    HZ2_VLT_ETC2_YN,
		    HZ2_LNGTH_1M_YN,
		    HZ2_LNGTH_3M_YN,
		    HZ2_LNGTH_10M_YN,
		    HZ2_LNGTH_30M_YN,
		    HZ2_TEMP,
		    HZ2_TEMP_PLUS,
		    HZ2_HMDT,
		    HZ2_HMDT_PLUS,
		    HZ2_MSRMN_YEAR,
		    HZ2_MSRMN_MON,
		    HZ2_MSRMN_DAY,
		    HZ2_MSRMN_HOUR,
		    HZ2_MSRMN_MIN,
		    HZ2_SIGN,
		    FN_GET_IMAGE(HZ2_SIGN_URL,0) HZ2_SIGN_URL,
		    HZ2_RESULT_CODE,
		    RESULT_URL
		FROM METHOD_RE_TB
		WHERE 1=1
		AND RAW_SEQ = #{rawSeq}
	</select>
	
	<insert id="insertRe" parameterType="reDTO">
		<selectKey resultType="int" keyProperty="reSeq" order="BEFORE">
	        SELECT ifnull(MAX(RE_SEQ)+1,1) reSeq FROM METHOD_RE_TB
	    </selectKey>
		INSERT INTO METHOD_RE_TB
		(
			RE_SEQ,
			RAW_SEQ,
			VLT_AC_YN,
			VLT_ETC,
			VLT_ETC_YN,
			VAR_N_YN,
			VAR_Y_YN,
			HZ1_CODE,
			HZ1_VLT10M_YN,
			HZ1_VLT3M_YN,
			HZ1_VLT_ETC1,
			HZ1_VLT_ETC1_YN,
			HZ1_VLT_ETC2,
			HZ1_VLT_ETC2_YN,
			HZ1_LNGTH_1M_YN,
			HZ1_LNGTH_3M_YN,
			HZ1_LNGTH_10M_YN,
			HZ1_LNGTH_30M_YN,
			HZ1_ANTN_2M_YN,
			HZ1_ANTN_3M_YN,
			HZ1_ANTN_4M_YN,
			HZ1_TEMP,
			HZ1_TEMP_PLUS,
			HZ1_HMDT,
			HZ1_HMDT_PLUS,
			HZ1_MSRMN_YEAR,
			HZ1_MSRMN_MON,
			HZ1_MSRMN_DAY,
			HZ1_MSRMN_HOUR,
			HZ1_MSRMN_MIN,
			HZ1_SIGN,
			HZ1_SIGN_URL,
			HZ1_RESULT_CODE,
			HZ2_CODE,
			HZ2_VLT10M_YN,
			HZ2_VLT3M_YN,
			HZ2_VLT_ETC1,
			HZ2_VLT_ETC1_YN,
			HZ2_VLT_ETC2,
			HZ2_VLT_ETC2_YN,
			HZ2_LNGTH_1M_YN,
			HZ2_LNGTH_3M_YN,
			HZ2_LNGTH_10M_YN,
			HZ2_LNGTH_30M_YN,
			HZ2_TEMP,
			HZ2_TEMP_PLUS,
			HZ2_HMDT,
			HZ2_HMDT_PLUS,
			HZ2_MSRMN_YEAR,
			HZ2_MSRMN_MON,
			HZ2_MSRMN_DAY,
			HZ2_MSRMN_HOUR,
			HZ2_MSRMN_MIN,
			HZ2_SIGN,
			HZ2_SIGN_URL,
			HZ2_RESULT_CODE,
			RESULT_URL,
			INS_MEM_ID,
			UDT_MEM_ID
		)
		VALUES
		(
			#{reSeq},
			#{rawSeq},
			#{vltAcYn},
			#{vltEtc},
			#{vltEtcYn},
			#{varNYn},
			#{varYYn},
			#{hz1Code},
			#{hz1Vlt10mYn},
			#{hz1Vlt3mYn},
			#{hz1VltEtc1},
			#{hz1VltEtc1Yn},
			#{hz1VltEtc2},
			#{hz1VltEtc2Yn},
			#{hz1Lngth1mYn},
			#{hz1Lngth3mYn},
			#{hz1Lngth10mYn},
			#{hz1Lngth30mYn},
			#{hz1Antn2mYn},
			#{hz1Antn3mYn},
			#{hz1Antn4mYn},
			#{hz1Temp},
			#{hz1TempPlus},
			#{hz1Hmdt},
			#{hz1HmdtPlus},
			#{hz1MsrmnYear},
			#{hz1MsrmnMon},
			#{hz1MsrmnDay},
			#{hz1MsrmnHour},
			#{hz1MsrmnMin},
			#{hz1Sign},
			#{hz1SignUrl},
			#{hz1ResultCode},
			#{hz2Code},
			#{hz2Vlt10mYn},
			#{hz2Vlt3mYn},
			#{hz2VltEtc1},
			#{hz2VltEtc1Yn},
			#{hz2VltEtc2},
			#{hz2VltEtc2Yn},
			#{hz2Lngth1mYn},
			#{hz2Lngth3mYn},
			#{hz2Lngth10mYn},
			#{hz2Lngth30mYn},
			#{hz2Temp},
			#{hz2TempPlus},
			#{hz2Hmdt},
			#{hz2HmdtPlus},
			#{hz2MsrmnYear},
			#{hz2MsrmnMon},
			#{hz2MsrmnDay},
			#{hz2MsrmnHour},
			#{hz2MsrmnMin},
			#{hz2Sign},
			#{hz2SignUrl},
			#{hz2ResultCode},
			#{resultUrl},
			#{insMemId},
			#{udtMemId}
		)
		ON DUPLICATE KEY UPDATE
			VLT_AC_YN = #{vltAcYn},
			VLT_ETC = #{vltEtc},
			VLT_ETC_YN = #{vltEtcYn},
			VAR_N_YN = #{varNYn},
			VAR_Y_YN = #{varYYn},
			HZ1_CODE = #{hz1Code},
			HZ1_VLT10M_YN = #{hz1Vlt10mYn},
			HZ1_VLT3M_YN = #{hz1Vlt3mYn},
			HZ1_VLT_ETC1 = #{hz1VltEtc1},
			HZ1_VLT_ETC1_YN = #{hz1VltEtc1Yn},
			HZ1_VLT_ETC2 = #{hz1VltEtc2},
			HZ1_VLT_ETC2_YN = #{hz1VltEtc2Yn},
			HZ1_LNGTH_1M_YN = #{hz1Lngth1mYn},
			HZ1_LNGTH_3M_YN = #{hz1Lngth3mYn},
			HZ1_LNGTH_10M_YN = #{hz1Lngth10mYn},
			HZ1_LNGTH_30M_YN = #{hz1Lngth30mYn},
			HZ1_ANTN_2M_YN = #{hz1Antn2mYn},
			HZ1_ANTN_3M_YN = #{hz1Antn3mYn},
			HZ1_ANTN_4M_YN = #{hz1Antn4mYn},
			HZ1_TEMP = #{hz1Temp},
			HZ1_TEMP_PLUS = #{hz1TempPlus},
			HZ1_HMDT = #{hz1Hmdt},
			HZ1_HMDT_PLUS = #{hz1HmdtPlus},
			HZ1_MSRMN_YEAR = #{hz1MsrmnYear},
			HZ1_MSRMN_MON = #{hz1MsrmnMon},
			HZ1_MSRMN_DAY = #{hz1MsrmnDay},
			HZ1_MSRMN_HOUR = #{hz1MsrmnHour},
			HZ1_MSRMN_MIN = #{hz1MsrmnMin},
			HZ1_SIGN = #{hz1Sign},
			<if test="hz1SignUrl != null and hz1SignUrl != ''">HZ1_SIGN_URL = #{hz1SignUrl},</if>
			HZ1_RESULT_CODE = #{hz1ResultCode},
			HZ2_CODE = #{hz2Code},
			HZ2_VLT10M_YN = #{hz2Vlt10mYn},
			HZ2_VLT3M_YN = #{hz2Vlt3mYn},
			HZ2_VLT_ETC1 = #{hz2VltEtc1},
			HZ2_VLT_ETC1_YN = #{hz2VltEtc1Yn},
			HZ2_VLT_ETC2 = #{hz2VltEtc2},
			HZ2_VLT_ETC2_YN = #{hz2VltEtc2Yn},
			HZ2_LNGTH_1M_YN = #{hz2Lngth1mYn},
			HZ2_LNGTH_3M_YN = #{hz2Lngth3mYn},
			HZ2_LNGTH_10M_YN = #{hz2Lngth10mYn},
			HZ2_LNGTH_30M_YN = #{hz2Lngth30mYn},
			HZ2_TEMP = #{hz2Temp},
			HZ2_TEMP_PLUS = #{hz2TempPlus},
			HZ2_HMDT = #{hz2Hmdt},
			HZ2_HMDT_PLUS = #{hz2HmdtPlus},
			HZ2_MSRMN_YEAR = #{hz2MsrmnYear},
			HZ2_MSRMN_MON = #{hz2MsrmnMon},
			HZ2_MSRMN_DAY = #{hz2MsrmnDay},
			HZ2_MSRMN_HOUR = #{hz2MsrmnHour},
			HZ2_MSRMN_MIN = #{hz2MsrmnMin},
			HZ2_SIGN = #{hz2Sign},
			<if test="hz2SignUrl != null and hz2SignUrl != ''">HZ2_SIGN_URL = #{hz2SignUrl},</if>
			HZ2_RESULT_CODE = #{hz2ResultCode},
			RESULT_URL = #{resultUrl},
			UDT_DT = NOW(),
			UDT_MEM_ID = #{udtMemId}
	</insert>
	
	<select id="esdDetail" parameterType="int" resultType="esdDTO">
		SELECT ESD_SEQ,
		    RAW_SEQ,
		    VLT_AC_YN,
		    VLT_ETC,
		    VLT_ETC_YN,
		    VAR_N_YN,
		    VAR_Y_YN,
		    ROOM1_YN,
		    ROOM2_YN,
		    TEMP,
		    TEMP_PLUS,
		    HMDT,
		    HMDT_PLUS,
		    BRMT,
		    BRMT_PLUS,
		    DC_1S_YN,
		    DC_ETC,
		    DC_ETC_YN,
		    DC_GIN_YN,
		    DC_CON_YN,
		    DC_IMP_YN,
		    DC_IMP_ETC,
		    DC_IMP_ETC_YN,
		    EVLTN_A_YN,
		    EVLTN_B_YN,
		    EVLTN_C_YN,
		    DC_CON_2_YN,
		    DC_CON_4_YN,
		    DC_CON_6_YN,
		    DC_CON_8_YN,
		    DC_CON_ETC,
		    DC_CON_ETC_YN,
		    DC_GIN_2_YN,
		    DC_GIN_4_YN,
		    DC_GIN_6_YN,
		    DC_GIN_8_YN,
		    DC_GIN_ETC,
		    DC_GIN_ETC_YN,
		    H_2_YN,
		    H_4_YN,
		    H_6_YN,
		    H_8_YN,
		    H_ETC,
		    H_ETC_YN,
		    V_2_YN,
		    V_4_YN,
		    V_6_YN,
		    V_8_YN,
		    V_ETC,
		    V_ETC_YN,
		    MSRMN_YEAR,
		    MSRMN_MON,
		    MSRMN_DAY,
		    MSRMN_HOUR,
		    MSRMN_MIN,
		    SIGN,
		    FN_GET_IMAGE(SIGN_URL,0) SIGN_URL,
		    RESULT_CODE,
		    INDRC_H_YN,
		    INDRC_H_RESULT_CODE,
		    INDRC_H_MEMO,
		    INDRC_V_YN,
		    INDRC_V_RESULT_CODE,
		    INDRC_V_MEMO,
		    CMNT_A_YN,
		    CMNT_ETC,
		    CMNT_ETC_YN,
		    IMG_URL
		FROM METHOD_ESD_TB
		WHERE 1=1
		AND RAW_SEQ = #{rawSeq}
	</select>
	
	<insert id="insertEsd" parameterType="esdDTO">
	    <selectKey resultType="int" keyProperty="esdSeq" order="AFTER">
	        SELECT ESD_SEQ esdSeq FROM METHOD_ESD_TB WHERE RAW_SEQ = #{rawSeq}
	    </selectKey>
		INSERT INTO METHOD_ESD_TB
		(
			ESD_SEQ,
			RAW_SEQ,
			VLT_AC_YN,
			VLT_ETC,
			VLT_ETC_YN,
			VAR_N_YN,
			VAR_Y_YN,
			ROOM1_YN,
			ROOM2_YN,
			TEMP,
			TEMP_PLUS,
			HMDT,
			HMDT_PLUS,
			BRMT,
			BRMT_PLUS,
			DC_1S_YN, DC_ETC, DC_ETC_YN, DC_GIN_YN, DC_CON_YN, DC_IMP_YN, DC_IMP_ETC, DC_IMP_ETC_YN,
			EVLTN_A_YN, EVLTN_B_YN, EVLTN_C_YN,
			DC_CON_2_YN, DC_CON_4_YN, DC_CON_6_YN, DC_CON_8_YN, DC_CON_ETC, DC_CON_ETC_YN,
			DC_GIN_2_YN, DC_GIN_4_YN, DC_GIN_6_YN, DC_GIN_8_YN, DC_GIN_ETC, DC_GIN_ETC_YN,
			H_2_YN, H_4_YN, H_6_YN, H_8_YN, H_ETC, H_ETC_YN,
			V_2_YN, V_4_YN, V_6_YN, V_8_YN, V_ETC, V_ETC_YN,
			MSRMN_YEAR, MSRMN_MON, MSRMN_DAY, MSRMN_HOUR, MSRMN_MIN,
			SIGN, SIGN_URL, RESULT_CODE,
			INDRC_H_YN, INDRC_H_RESULT_CODE, INDRC_H_MEMO,
			INDRC_V_YN, INDRC_V_RESULT_CODE, INDRC_V_MEMO,
			CMNT_A_YN, CMNT_ETC, CMNT_ETC_YN,IMG_URL,
			INS_MEM_ID, UDT_MEM_ID
		)
		VALUES
		(
			(SELECT ifnull(MAX(seq.ESD_SEQ)+1,1) esdSeq FROM METHOD_ESD_TB seq),
			#{rawSeq},
			#{vltAcYn},
			#{vltEtc},
			#{vltEtcYn},
			#{varNYn},
			#{varYYn},
			#{room1Yn},
			#{room2Yn},
			#{temp},
			#{tempPlus},
			#{hmdt},
			#{hmdtPlus},
			#{brmt},
			#{brmtPlus},
			#{dc1sYn},#{dcEtc},#{dcEtcYn},#{dcGinYn},#{dcConYn},#{dcImpYn},#{dcImpEtc},#{dcImpEtcYn},
			#{evltnAYn},#{evltnBYn},#{evltnCYn},
			#{dcCon2Yn},#{dcCon4Yn},#{dcCon6Yn},#{dcCon8Yn},#{dcConEtc},#{dcConEtcYn},
			#{dcGin2Yn},#{dcGin4Yn},#{dcGin6Yn},#{dcGin8Yn},#{dcGinEtc},#{dcGinEtcYn},
			#{h2Yn},#{h4Yn},#{h6Yn},#{h8Yn},#{hEtc},#{hEtcYn},
			#{v2Yn},#{v4Yn},#{v6Yn},#{v8Yn},#{vEtc},#{vEtcYn},
			#{msrmnYear},#{msrmnMon},#{msrmnDay},#{msrmnHour},#{msrmnMin},
			#{sign},#{signUrl},#{resultCode},
			#{indrcHYn},#{indrcHResultCode},#{indrcHMemo},
			#{indrcVYn},#{indrcVResultCode},#{indrcVMemo},
			#{cmntAYn},#{cmntEtc},#{cmntEtcYn},#{imgUrl},
			#{insMemId},#{udtMemId}
			)
			ON DUPLICATE KEY UPDATE
				VLT_AC_YN = #{vltAcYn},
			    VLT_ETC = #{vltEtc},
			    VLT_ETC_YN = #{vltEtcYn},
			    VAR_N_YN = #{varNYn},
			    VAR_Y_YN = #{varYYn},
			    ROOM1_YN = #{room1Yn},
			    ROOM2_YN = #{room2Yn},
			    TEMP = #{temp},
			    TEMP_PLUS = #{tempPlus},
			    HMDT = #{hmdt},
			    HMDT_PLUS = #{hmdtPlus},
			    BRMT = #{brmt},
			    BRMT_PLUS = #{brmtPlus},
			    DC_1S_YN = #{dc1sYn},
			    DC_ETC = #{dcEtc},
			    DC_ETC_YN = #{dcEtcYn},
			    DC_GIN_YN = #{dcGinYn},
			    DC_CON_YN = #{dcConYn},
			    DC_IMP_YN = #{dcImpYn},
			    DC_IMP_ETC = #{dcImpEtc},
			    DC_IMP_ETC_YN = #{dcImpEtcYn},
			    EVLTN_A_YN = #{evltnAYn},
			    EVLTN_B_YN = #{evltnBYn},
			    EVLTN_C_YN = #{evltnCYn},
			    DC_CON_2_YN = #{dcCon2Yn},
			    DC_CON_4_YN = #{dcCon4Yn},
			    DC_CON_6_YN = #{dcCon6Yn},
			    DC_CON_8_YN = #{dcCon8Yn},
			    DC_CON_ETC = #{dcConEtc},
			    DC_CON_ETC_YN = #{dcConEtcYn},
			    DC_GIN_2_YN = #{dcGin2Yn},
			    DC_GIN_4_YN = #{dcGin4Yn},
			    DC_GIN_6_YN = #{dcGin6Yn},
			    DC_GIN_8_YN = #{dcGin8Yn},
			    DC_GIN_ETC = #{dcGinEtc},
			    DC_GIN_ETC_YN = #{dcGinEtcYn},
			    H_2_YN = #{h2Yn},
			    H_4_YN = #{h4Yn},
			    H_6_YN = #{h6Yn},
			    H_8_YN = #{h8Yn},
			    H_ETC = #{hEtc},
			    H_ETC_YN = #{hEtcYn},
			    V_2_YN = #{v2Yn},
			    V_4_YN = #{v4Yn},
			    V_6_YN = #{v6Yn},
			    V_8_YN = #{v8Yn},
			    V_ETC = #{vEtc},
			    V_ETC_YN = #{vEtcYn},
			    MSRMN_YEAR = #{msrmnYear},
			    MSRMN_MON = #{msrmnMon},
			    MSRMN_DAY = #{msrmnDay},
			    MSRMN_HOUR = #{msrmnHour},
			    MSRMN_MIN = #{msrmnMin},
			    SIGN = #{sign},
			    <if test="signUrl != null and signUrl != ''">SIGN_URL = #{signUrl},</if>
			    RESULT_CODE = #{resultCode},
				INDRC_H_YN = #{indrcHYn},
				INDRC_H_RESULT_CODE = #{indrcHResultCode},
				INDRC_H_MEMO = #{indrcHMemo},
				INDRC_V_YN = #{indrcVYn},
				INDRC_V_RESULT_CODE  =#{indrcVResultCode},
				INDRC_V_MEMO = #{indrcVMemo},
				CMNT_A_YN = #{cmntAYn},
				CMNT_ETC = #{cmntEtc},
				CMNT_ETC_YN = #{cmntEtcYn},
				IMG_URL = #{imgUrl},
				UDT_DT = NOW(),
				UDT_MEM_ID = #{udtMemId}			
	</insert>

	<insert id="insertEsdSub">
		INSERT INTO METHOD_ESD_SUB_TB
		(
			ESD_SEQ,
			DRCTL,
			DC_CODE,
			RESULT_CODE,
			MEMO
		)
		VALUES
		<foreach collection="MethodEsdSubList" item="item" separator=",">
		(
			#{esdSeq},
			#{item.drctl},
			#{item.dcCode},
			#{item.resultCode},
			#{item.memo}
		)
		</foreach>
	</insert>
	
	<update id="updateEsdSub">
		<foreach collection="MethodEsdSubList" item="item" separator=";">
		UPDATE METHOD_ESD_SUB_TB
		SET
			DRCTL = #{item.drctl},
			DC_CODE = #{item.dcCode},
			RESULT_CODE = #{item.resultCode},
			MEMO = #{item.memo},
			STATE = #{item.state}
		WHERE ESD_SUB_SEQ = #{item.esdSubSeq}
		</foreach>
	</update>

	<update id="deleteEsdSub">
		<foreach collection="MethodEsdSubList" item="item" separator=";">
		UPDATE METHOD_ESD_SUB_TB
		SET
			STATE = #{item.state}
		WHERE ESD_SUB_SEQ = #{item.esdSubSeq}
		</foreach>
	</update>
	
	<select id="rsDetail" parameterType="int" resultType="rsDTO">
		SELECT 
			RS_SEQ,
		    RAW_SEQ,
		    VLT_AC_YN,
		    VLT_ETC,
		    VLT_ETC_YN,
		    VAR_N_YN,
		    VAR_Y_YN,
		    ROOM1_YN,
		    ROOM2_YN,
		    ROOM_ETC,
		    ROOM_ETC_YN,
		    TEMP,
		    TEMP_PLUS,
		    HMDT,
		    HMDT_PLUS,
		    BRMT,
		    BRMT_PLUS,
		    MDLT_AM_YN,
		    MDLT_ETC,
		    MDLT_ETC_YN,
		    ANTN_1M_YN,
		    ANTN_3M_YN,
		    SWEP_15_YN,
		    SWEP_1S_YN,
		    STRN_1_YN,
		    STRN_3_YN,
		    STRN_10_YN,
		    STRN_ETC,
		    STRN_ETC_YN,
		    ACRDT_FRONT_YN,
		    ACRDT_BACK_YN,
		    ACRDT_LEFT_YN,
		    ACRDT_RIGHT_YN,
		    ACRDT_ETC,
		    ACRDT_ETC_YN,
		    EVLTN_A_YN,
		    EVLTN_B_YN,
		    EVLTN_C_YN,
		    FRQNC_AREA,
		    SPC_FRQNC,
		    MSRMN_YEAR,
		    MSRMN_MON,
		    MSRMN_DAY,
		    MSRMN_HOUR,
		    MSRMN_MIN,
		    SIGN,
		    FN_GET_IMAGE(SIGN_URL,0) SIGN_URL,
		    RESULT_CODE,
		    H_F_CODE,
		    H_B_CODE,
		    H_R_CODE,
		    H_L_CODE,
		    V_F_CODE,
		    V_B_CODE,
		    V_R_CODE,
		    V_L_CODE,
		    CMNT_A_YN,
		    CMNT_ETC,
		    CMNT_ETC_YN
		FROM METHOD_RS_TB
		WHERE 1=1
		AND RAW_SEQ = #{rawSeq}
	</select>
	
	<select id="rsSubList" parameterType="int" resultType="egovMap">
		SELECT 
			RS_SEQ,
			RS_SUB_SEQ,
			APPL_TYPE,
			NO_YN,
			ifnull(APPL_NAME, '') APPL_NAME,
			H_RESULT_CODE,
			V_RESULT_CODE,
			MEMO,
			STATE
		FROM METHOD_RS_SUB_TB
		WHERE 1=1
		AND STATE != 'D'
		AND RS_SEQ = #{rsSeq}
	</select>
	
	<insert id="insertRs" parameterType="rsDTO">
		<selectKey resultType="int" keyProperty="rsSeq" order="AFTER">
			SELECT RS_SEQ rsSeq FROM METHOD_RS_TB WHERE RAW_SEQ = #{rawSeq}
	    </selectKey>
		INSERT INTO METHOD_RS_TB
		(
			RS_SEQ,
			RAW_SEQ,
			VLT_AC_YN,
			VLT_ETC,
			VLT_ETC_YN,
			VAR_N_YN,
			VAR_Y_YN,
			ROOM1_YN,
			ROOM2_YN,
			ROOM_ETC,
			ROOM_ETC_YN,
			TEMP,
			TEMP_PLUS,
			HMDT,
			HMDT_PLUS,
			BRMT,
			BRMT_PLUS,
			MDLT_AM_YN,
			MDLT_ETC,
			MDLT_ETC_YN,
			ANTN_1M_YN,
			ANTN_3M_YN,
			SWEP_15_YN,
			SWEP_1S_YN,
			STRN_1_YN,
			STRN_3_YN,
			STRN_10_YN,
			STRN_ETC,
			STRN_ETC_YN,
			ACRDT_FRONT_YN,
			ACRDT_BACK_YN,
			ACRDT_LEFT_YN,
			ACRDT_RIGHT_YN,
			ACRDT_ETC,
			ACRDT_ETC_YN,
			EVLTN_A_YN,
			EVLTN_B_YN,
			EVLTN_C_YN,
			FRQNC_AREA,
			SPC_FRQNC,
			MSRMN_YEAR,
			MSRMN_MON,
			MSRMN_DAY,
			MSRMN_HOUR,
			MSRMN_MIN,
			SIGN,
			SIGN_URL,
			RESULT_CODE,
			H_F_CODE,
			H_B_CODE,
			H_R_CODE,
			H_L_CODE,
			V_F_CODE,
			V_B_CODE,
			V_R_CODE,
			V_L_CODE,
<!-- 			AUDIO_ELCT_YN, -->
<!-- 			AUDIO_ACST_YN, -->
<!-- 			AUDIO_NEAR_YN, -->
<!-- 			AUDIO_FEAR_YN, -->
<!-- 			AUDIO1_CODE, -->
<!-- 			AUDIO2_CODE, -->
<!-- 			SPKR_ELCT_YN, -->
<!-- 			SPKR_ACST_YN, -->
<!-- 			SPKR_NEAR_YN, -->
<!-- 			SPKR_FEAR_YN, -->
<!-- 			SPKR1_CODE, -->
<!-- 			SPKR2_CODE, -->
<!-- 			COMM1_NOISE_YN, -->
<!-- 			COMM1_ACST_YN, -->
<!-- 			COMM1_CODE1, -->
<!-- 			COMM1_CODE2, -->
<!-- 			COMM2_NOISE_YN, -->
<!-- 			COMM2_ACST_YN, -->
<!-- 			COMM2_CODE1, -->
<!-- 			COMM2_CODE2, -->
			CMNT_A_YN,
			CMNT_ETC,
			CMNT_ETC_YN,
			INS_MEM_ID,
			UDT_MEM_ID
		)
		VALUES
		(
			(SELECT ifnull(MAX(seq.RS_SEQ)+1,1) rsSeq FROM METHOD_RS_TB seq),	
			#{rawSeq},
			#{vltAcYn},
			#{vltEtc},
			#{vltEtcYn},
			#{varNYn},
			#{varYYn},
			#{room1Yn},
			#{room2Yn},
			#{roomEtc},
			#{roomEtcYn},
			#{temp},
			#{tempPlus},
			#{hmdt},
			#{hmdtPlus},
			#{brmt},
			#{brmtPlus},
			#{mdltAmYn},
			#{mdltEtc},
			#{mdltEtcYn},
			#{antn1mYn},
			#{antn3mYn},
			#{swep15Yn},
			#{swep1sYn},
			#{strn1Yn},
			#{strn3Yn},
			#{strn10Yn},
			#{strnEtc},
			#{strnEtcYn},
			#{acrdtFrontYn},
			#{acrdtBackYn},
			#{acrdtLeftYn},
			#{acrdtRightYn},
			#{acrdtEtc},
			#{acrdtEtcYn},
			#{evltnAYn},
			#{evltnBYn},
			#{evltnCYn},
			#{frqncArea},
			#{spcFrqnc},
			#{msrmnYear},
			#{msrmnMon},
			#{msrmnDay},
			#{msrmnHour},
			#{msrmnMin},
			#{sign},
			#{signUrl},
			#{resultCode},
			#{hFCode},
			#{hBCode},
			#{hRCode},
			#{hLCode},
			#{vFCode},
			#{vBCode},
			#{vRCode},
			#{vLCode},
<!-- 			#{audioElctYn}, -->
<!-- 			#{audioAcstYn}, -->
<!-- 			#{audioNearYn}, -->
<!-- 			#{audioFearYn}, -->
<!-- 			#{audio1Code}, -->
<!-- 			#{audio2Code}, -->
<!-- 			#{spkrElctYn}, -->
<!-- 			#{spkrAcstYn}, -->
<!-- 			#{spkrNearYn}, -->
<!-- 			#{spkrFearYn}, -->
<!-- 			#{spkr1Code}, -->
<!-- 			#{spkr2Code}, -->
<!-- 			#{comm1NoiseYn}, -->
<!-- 			#{comm1AcstYn}, -->
<!-- 			#{comm1Code1}, -->
<!-- 			#{comm1Code2}, -->
<!-- 			#{comm2NoiseYn}, -->
<!-- 			#{comm2AcstYn}, -->
<!-- 			#{comm2Code1}, -->
<!-- 			#{comm2Code2}, -->
			#{cmntAYn},
			#{cmntEtc},
			#{cmntEtcYn},
			#{insMemId},
			#{udtMemId}
		)
		ON DUPLICATE KEY UPDATE
			  VLT_AC_YN = #{vltAcYn},
		      VLT_ETC = #{vltEtc},
		      VLT_ETC_YN = #{vltEtcYn},
		      VAR_N_YN = #{varNYn},
		      VAR_Y_YN = #{varYYn},
		      ROOM1_YN = #{room1Yn},
		      ROOM2_YN = #{room2Yn},
		      ROOM_ETC = #{roomEtc},
		      ROOM_ETC_YN = #{roomEtcYn},
		      TEMP = #{temp},
		      TEMP_PLUS = #{tempPlus},
		      HMDT = #{hmdt},
		      HMDT_PLUS = #{hmdtPlus},
		      BRMT = #{brmt},
		      BRMT_PLUS = #{brmtPlus},
		      MDLT_AM_YN = #{mdltAmYn},
		      MDLT_ETC = #{mdltEtc},
		      MDLT_ETC_YN = #{mdltEtcYn},
		      ANTN_1M_YN = #{antn1mYn},
		      ANTN_3M_YN = #{antn3mYn},
		      SWEP_15_YN = #{swep15Yn},
		      SWEP_1S_YN = #{swep1sYn},
		      STRN_1_YN = #{strn1Yn},
		      STRN_3_YN = #{strn3Yn},
		      STRN_10_YN = #{strn10Yn},
		      STRN_ETC = #{strnEtc},
		      STRN_ETC_YN = #{strnEtcYn},
		      ACRDT_FRONT_YN = #{acrdtFrontYn},
		      ACRDT_BACK_YN = #{acrdtBackYn},
		      ACRDT_LEFT_YN = #{acrdtLeftYn},
		      ACRDT_RIGHT_YN = #{acrdtRightYn},
		      ACRDT_ETC = #{acrdtEtc},
		      ACRDT_ETC_YN = #{acrdtEtcYn},
		      EVLTN_A_YN = #{evltnAYn},
		      EVLTN_B_YN = #{evltnBYn},
		      EVLTN_C_YN = #{evltnCYn},
		      FRQNC_AREA = #{frqncArea},
		      SPC_FRQNC = #{spcFrqnc},
		      MSRMN_YEAR = #{msrmnYear},
		      MSRMN_MON = #{msrmnMon},
		      MSRMN_DAY = #{msrmnDay},
		      MSRMN_HOUR = #{msrmnHour},
		      MSRMN_MIN = #{msrmnMin},
		      SIGN = #{sign},
		      <if test="signUrl != null and signUrl != ''">SIGN_URL = #{signUrl},</if>
		      RESULT_CODE = #{resultCode},
		      H_F_CODE = #{hFCode},
		      H_B_CODE = #{hBCode},
		      H_R_CODE = #{hRCode},
		      H_L_CODE = #{hLCode},
		      V_F_CODE = #{vFCode},
		      V_B_CODE = #{vBCode},
		      V_R_CODE = #{vRCode},
		      V_L_CODE = #{vLCode},
<!-- 		      AUDIO_ELCT_YN = #{audioElctYn}, -->
<!-- 		      AUDIO_ACST_YN = #{audioAcstYn}, -->
<!-- 		      AUDIO_NEAR_YN = #{audioNearYn}, -->
<!-- 		      AUDIO_FEAR_YN = #{audioFearYn}, -->
<!-- 		      AUDIO1_CODE = #{audio1Code}, -->
<!-- 			  AUDIO2_CODE = #{audio2Code}, -->
<!-- 			  SPKR_ELCT_YN = #{spkrElctYn}, -->
<!-- 			  SPKR_ACST_YN = #{spkrAcstYn}, -->
<!-- 			  SPKR_NEAR_YN = #{spkrNearYn}, -->
<!-- 			  SPKR_FEAR_YN = #{spkrFearYn}, -->
<!-- 			  SPKR1_CODE = #{spkr1Code}, -->
<!-- 			  SPKR2_CODE = #{spkr2Code}, -->
<!-- 			  COMM1_NOISE_YN = #{comm1NoiseYn}, -->
<!-- 			  COMM1_ACST_YN = #{comm1AcstYn}, -->
<!-- 			  COMM1_CODE1 = #{comm1Code1}, -->
<!-- 			  COMM1_CODE2 = #{comm1Code2}, -->
<!-- 			  COMM2_NOISE_YN = #{comm2NoiseYn}, -->
<!-- 			  COMM2_ACST_YN = #{comm2AcstYn}, -->
<!-- 			  COMM2_CODE1 = #{comm2Code1}, -->
<!-- 			  COMM2_CODE2 = #{comm2Code2}, -->
			  CMNT_A_YN = #{cmntAYn},
			  CMNT_ETC = #{cmntEtc},
			  CMNT_ETC_YN = #{cmntEtcYn},
			  UDT_DT = NOW(),
			  UDT_MEM_ID = #{udtMemId}
	</insert>
	
	<insert id="insertRsSub">
		INSERT INTO METHOD_RS_SUB_TB
		(
			RS_SEQ,
			APPL_TYPE,
			NO_YN,
			APPL_NAME,
			H_RESULT_CODE,
			V_RESULT_CODE,
			MEMO
		)
		VALUES
		<foreach collection="MethodRsSubList" item="item" separator=",">
		(
			#{rsSeq},
			#{item.applType},
			#{item.noYn},
			#{item.applName},
			#{item.hResultCode},
			#{item.vResultCode},
			#{item.memo}
		)
		</foreach>
	</insert>
	
	<update id="updateRsSub">
		<foreach collection="MethodRsSubList" item="item" separator=";">
		UPDATE METHOD_RS_SUB_TB
		SET
			APPL_TYPE = #{item.applType},
			NO_YN = #{item.noYn},
			APPL_NAME = #{item.applName},
			H_RESULT_CODE = #{item.hResultCode},
			V_RESULT_CODE = #{item.vResultCode},
			MEMO = #{item.memo},
			STATE = #{item.state}
		WHERE RS_SUB_SEQ = #{item.rsSubSeq}
		</foreach>
	</update>

	<update id="deleteRsSub">
		UPDATE METHOD_RS_SUB_TB
		SET
			STATE = 'D'
		WHERE RS_SEQ = #{rsSeq}
		AND STATE != 'D'
		AND APPL_TYPE = #{MethodSub.applType}
		AND NO_YN = 0
	</update>
	
	<select id="eftDetail" parameterType="int" resultType="eftDTO">
		SELECT 
			EFT_SEQ,
		    RAW_SEQ,
		    VLT_AC_YN, VLT_ETC, VLT_ETC_YN,
		    VAR_N_YN, VAR_Y_YN,
		    ROOM1_YN, ROOM2_YN, ROOM_ETC, ROOM_ETC_YN,
		    TEMP, TEMP_PLUS, HMDT, HMDT_PLUS, BRMT, BRMT_PLUS,
		    AC_POWER, DC_POWER, COMM_TML,
		    EVLTN_A_YN, EVLTN_B_YN, EVLTN_C_YN,
		    RPTTN_5_YN, RPTTN_100_YN,
		    ACRDT_1_YN, ACRDT_2_YN, ACRDT_TRM_YN, ACRDT_TRM_ETC_YN,
		    MSRMN_YEAR, MSRMN_MON, MSRMN_DAY, MSRMN_HOUR, MSRMN_MIN,
		    SIGN, FN_GET_IMAGE(SIGN_URL,0) SIGN_URL,
		    RESULT_CODE,
<!-- 		    POWER_L_YN, POWER_N_YN, POWER_PE_YN, POWER_ETC, POWER_ETC_YN, -->
<!-- 		    POWER_LN_YN, POWER_LPE_YN, POWER_NPE_YN, POWER_LNPE_YN,  -->
<!-- 		    POWER_ETC1, POWER_ETC2, POWER_ETC3, POWER_ETC4, POWER_ETC5, POWER_ETC6, -->
<!-- 			POWER_ETC1_YN, POWER_ETC2_YN, POWER_ETC3_YN, POWER_ETC4_YN, POWER_ETC5_YN, POWER_ETC6_YN, -->
<!-- 		    DC_POWER_P_YN, DC_POWER_N_YN, DC_POWER_PN_YN, -->
<!-- 		    SGNL_ETC1, SGNL_ETC1_YN, SGNL_ETC2, SGNL_ETC2_YN, SGNL_ETC3, SGNL_ETC3_YN, -->
<!-- 		    POWER_L_CODE, POWER_LN_CODE, POWER_LNPE_CODE, POWER_ETC1_CODE, POWER_ETC2_CODE, -->
<!-- 		    DC_POWER_P_CODE, SGN_ETC1_CODE, SGN_ETC2_CODE, SGN_ETC3_CODE, -->
		    CMNT_A_YN, CMNT_ETC, CMNT_ETC_YN
		FROM METHOD_EFT_TB
		WHERE 1=1
		AND RAW_SEQ = #{rawSeq}
	</select>
	
	<select id="eftSubList" parameterType="int" resultType="egovMap">
		SELECT 
			EFT_SUB_SEQ,
			EFT_SEQ,
			APPL_TYPE,
			NO_YN,
			POWER_L_YN,
			POWER_N_YN,
			POWER_PE_YN,
			POWER_LN_YN,
			POWER_LPE_YN,
			POWER_NPE_YN,
			POWER_LNPE_YN,
			POWER_ETC,
			POWER_ETC_YN,
			DC_POWER_P_YN,
			DC_POWER_N_YN,
			DC_POWER_PN_YN,
			DC_POWER_ETC,
			DC_POWER_ETC_YN,
			SGNL_NAME,
			PLUS_RESULT_CODE,
			MINUS_RESULT_CODE,
			MEMO,
			STATE
		FROM METHOD_EFT_SUB_TB
		WHERE 1=1
		AND STATE != 'D'
		AND EFT_SEQ = #{eftSeq}
	</select>
	
	<insert id="insertEft" parameterType="eftDTO">
		<selectKey resultType="int" keyProperty="eftSeq" order="AFTER">
	        SELECT EFT_SEQ eftSeq FROM METHOD_EFT_TB WHERE RAW_SEQ = #{rawSeq}
	    </selectKey>
		INSERT INTO METHOD_EFT_TB
		(
			EFT_SEQ,
			RAW_SEQ,
			VLT_AC_YN, VLT_ETC, VLT_ETC_YN, VAR_N_YN, VAR_Y_YN,
			ROOM1_YN, ROOM2_YN, ROOM_ETC, ROOM_ETC_YN,
			TEMP, TEMP_PLUS, HMDT, HMDT_PLUS, BRMT, BRMT_PLUS,
			AC_POWER, DC_POWER, COMM_TML,
			EVLTN_A_YN, EVLTN_B_YN, EVLTN_C_YN,
			RPTTN_5_YN, RPTTN_100_YN,
			ACRDT_1_YN, ACRDT_2_YN, ACRDT_TRM_YN, ACRDT_TRM_ETC_YN,
			MSRMN_YEAR, MSRMN_MON, MSRMN_DAY, MSRMN_HOUR, MSRMN_MIN,
			SIGN, SIGN_URL,
			RESULT_CODE,
<!-- 			POWER_L_YN, POWER_N_YN, POWER_PE_YN, POWER_ETC, POWER_ETC_YN, -->
<!-- 			POWER_LN_YN, POWER_LPE_YN, POWER_NPE_YN, POWER_LNPE_YN,  -->
<!-- 			POWER_ETC1, POWER_ETC2, POWER_ETC3, POWER_ETC4, POWER_ETC5, POWER_ETC6, -->
<!-- 			POWER_ETC1_YN, POWER_ETC2_YN, POWER_ETC3_YN, POWER_ETC4_YN, POWER_ETC5_YN, POWER_ETC6_YN, -->
<!-- 			DC_POWER_P_YN, DC_POWER_N_YN, DC_POWER_PN_YN, -->
<!-- 			SGNL_ETC1, SGNL_ETC1_YN, SGNL_ETC2, SGNL_ETC2_YN, SGNL_ETC3, SGNL_ETC3_YN, -->
<!-- 			POWER_L_CODE, -->
<!-- 			POWER_LN_CODE, -->
<!-- 			POWER_LNPE_CODE, -->
<!-- 			POWER_ETC1_CODE, -->
<!-- 			POWER_ETC2_CODE, -->
<!-- 			DC_POWER_P_CODE, -->
<!-- 			SGN_ETC1_CODE, -->
<!-- 			SGN_ETC2_CODE, -->
<!-- 			SGN_ETC3_CODE, -->
			CMNT_A_YN,
			CMNT_ETC,
			CMNT_ETC_YN,
			INS_MEM_ID,
			UDT_MEM_ID
		)
		VALUES
		(
			(SELECT ifnull(MAX(seq.EFT_SEQ)+1,1) eftSeq FROM METHOD_EFT_TB seq),
			#{rawSeq},
			#{vltAcYn},
			#{vltEtc},
			#{vltEtcYn},
			#{varNYn},
			#{varYYn},
			#{room1Yn},
			#{room2Yn},
			#{roomEtc},
			#{roomEtcYn},
			#{temp},
			#{tempPlus},
			#{hmdt},
			#{hmdtPlus},
			#{brmt},
			#{brmtPlus},
			#{acPower},
			#{dcPower},
			#{commTml},
			#{evltnAYn},
			#{evltnBYn},
			#{evltnCYn},
			#{rpttn5Yn},
			#{rpttn100Yn},
			#{acrdt1Yn},
			#{acrdt2Yn},
			#{acrdtTrmYn},
			#{acrdtTrmEtcYn},
			#{msrmnYear},
			#{msrmnMon},
			#{msrmnDay},
			#{msrmnHour},
			#{msrmnMin},
			#{sign},
			#{signUrl},
			#{resultCode},
<!-- 			#{powerLYn}, -->
<!-- 			#{powerNYn}, -->
<!-- 			#{powerPeYn}, -->
<!-- 			#{powerEtc}, -->
<!-- 			#{powerEtcYn}, -->
<!-- 			#{powerLnYn}, -->
<!-- 			#{powerLpeYn}, -->
<!-- 			#{powerNpeYn}, -->
<!-- 			#{powerLnpeYn}, -->
<!-- 			#{powerEtc1}, #{powerEtc2}, #{powerEtc3}, #{powerEtc4}, #{powerEtc5}, #{powerEtc6}, -->
<!-- 			#{powerEtc1Yn}, #{powerEtc2Yn}, #{powerEtc3Yn}, #{powerEtc4Yn}, #{powerEtc5Yn}, #{powerEtc6Yn}, -->
<!-- 			#{dcPowerPYn}, -->
<!-- 			#{dcPowerNYn}, -->
<!-- 			#{dcPowerPnYn}, -->
<!-- 			#{sgnlEtc1}, -->
<!-- 			#{sgnlEtc1Yn}, -->
<!-- 			#{sgnlEtc2}, -->
<!-- 			#{sgnlEtc2Yn}, -->
<!-- 			#{sgnlEtc3}, -->
<!-- 			#{sgnlEtc3Yn}, -->
<!-- 			#{powerLCode}, -->
<!-- 			#{powerLnCode}, -->
<!-- 			#{powerLnpeCode}, -->
<!-- 			#{powerEtc1Code}, -->
<!-- 			#{powerEtc2Code}, -->
<!-- 			#{dcPowerPCode}, -->
<!-- 			#{sgnEtc1Code}, -->
<!-- 			#{sgnEtc2Code}, -->
<!-- 			#{sgnEtc3Code}, -->
			#{cmntAYn},
			#{cmntEtc},
			#{cmntEtcYn},
			#{insMemId},
			#{udtMemId}
		)
		ON DUPLICATE KEY UPDATE
			VLT_AC_YN = #{vltAcYn},
		    VLT_ETC = #{vltEtc},
		    VLT_ETC_YN = #{vltEtcYn},
		    VAR_N_YN = #{varNYn},
		    VAR_Y_YN = #{varYYn},
		    ROOM1_YN = #{room1Yn},
		    ROOM2_YN = #{room2Yn},
		    ROOM_ETC = #{roomEtc},
		    ROOM_ETC_YN = #{roomEtcYn},
		    TEMP = #{temp},
		    TEMP_PLUS = #{tempPlus},
		    HMDT = #{hmdt},
		    HMDT_PLUS = #{hmdtPlus},
		    BRMT = #{brmt},
		    BRMT_PLUS = #{brmtPlus},
		    AC_POWER = #{acPower},
		    DC_POWER = #{dcPower},
		    COMM_TML = #{commTml},
		    EVLTN_A_YN = #{evltnAYn},
		    EVLTN_B_YN = #{evltnBYn},
		    EVLTN_C_YN = #{evltnCYn},
		    RPTTN_5_YN = #{rpttn5Yn},
		    RPTTN_100_YN = #{rpttn100Yn},
		    ACRDT_1_YN = #{acrdt1Yn},
		    ACRDT_2_YN = #{acrdt2Yn},
		    ACRDT_TRM_YN = #{acrdtTrmYn},
		    ACRDT_TRM_ETC_YN = #{acrdtTrmEtcYn},
		    MSRMN_YEAR = #{msrmnYear},
		    MSRMN_MON = #{msrmnMon},
		    MSRMN_DAY = #{msrmnDay},
		    MSRMN_HOUR = #{msrmnHour},
		    MSRMN_MIN = #{msrmnMin},
		    SIGN = #{sign},
		    <if test="signUrl != null and signUrl != ''">SIGN_URL = #{signUrl},</if>
		    RESULT_CODE = #{resultCode},
<!-- 		    POWER_L_YN = #{powerLYn}, -->
<!-- 		    POWER_N_YN = #{powerNYn}, -->
<!-- 		    POWER_PE_YN = #{powerPeYn}, -->
<!-- 		    POWER_ETC = #{powerEtc}, -->
<!-- 		    POWER_ETC_YN = #{powerEtcYn}, -->
<!-- 		    POWER_LN_YN = #{powerLnYn}, -->
<!-- 		    POWER_LPE_YN = #{powerLpeYn}, -->
<!-- 		    POWER_NPE_YN = #{powerNpeYn}, -->
<!-- 		    POWER_LNPE_YN = #{powerLnpeYn}, -->
<!-- 		    POWER_ETC1 = #{powerEtc1}, -->
<!-- 		    POWER_ETC2 = #{powerEtc2}, -->
<!-- 		    POWER_ETC3 = #{powerEtc3}, -->
<!-- 		    POWER_ETC4 = #{powerEtc4}, -->
<!-- 		    POWER_ETC5 = #{powerEtc5}, -->
<!-- 		    POWER_ETC6 = #{powerEtc6}, -->
<!-- 		    POWER_ETC1_YN = #{powerEtc1Yn}, -->
<!-- 		    POWER_ETC2_YN = #{powerEtc2Yn}, -->
<!-- 		    POWER_ETC3_YN = #{powerEtc3Yn}, -->
<!-- 		    POWER_ETC4_YN = #{powerEtc4Yn}, -->
<!-- 		    POWER_ETC5_YN = #{powerEtc5Yn}, -->
<!-- 		    POWER_ETC6_YN = #{powerEtc6Yn}, -->
<!-- 		    DC_POWER_P_YN = #{dcPowerPYn}, -->
<!-- 		    DC_POWER_N_YN = #{dcPowerNYn}, -->
<!-- 		    DC_POWER_PN_YN = #{dcPowerPnYn}, -->
<!-- 		    SGNL_ETC1 = #{sgnlEtc1}, -->
<!-- 		    SGNL_ETC1_YN = #{sgnlEtc1Yn}, -->
<!-- 		    SGNL_ETC2 = #{sgnlEtc2}, -->
<!-- 		    SGNL_ETC2_YN = #{sgnlEtc2Yn}, -->
<!-- 	        SGNL_ETC3 = #{sgnlEtc3}, -->
<!-- 	        SGNL_ETC3_YN = #{sgnlEtc3Yn}, -->
<!-- 	        POWER_L_CODE = #{powerLCode}, -->
<!-- 	        POWER_LN_CODE = #{powerLnCode}, -->
<!-- 	        POWER_LNPE_CODE = #{powerLnpeCode}, -->
<!-- 	        POWER_ETC1_CODE = #{powerEtc1Code}, -->
<!-- 	        POWER_ETC2_CODE = #{powerEtc2Code}, -->
<!-- 	        DC_POWER_P_CODE = #{dcPowerPCode}, -->
<!-- 	        SGN_ETC1_CODE = #{sgnEtc1Code}, -->
<!-- 	        SGN_ETC2_CODE = #{sgnEtc2Code}, -->
<!-- 	        SGN_ETC3_CODE = #{sgnEtc3Code}, -->
	        CMNT_A_YN = #{cmntAYn},
	        CMNT_ETC = #{cmntEtc},
	        CMNT_ETC_YN = #{cmntEtcYn},
	        UDT_DT = NOW(),
	        UDT_MEM_ID = #{udtMemId}
	</insert>
	
	<insert id="insertEftSub">
		INSERT INTO METHOD_EFT_SUB_TB
		(
			EFT_SEQ,
			APPL_TYPE,
			NO_YN,
			POWER_L_YN,
			POWER_N_YN,
			POWER_PE_YN,
			POWER_LN_YN,
			POWER_LPE_YN,
			POWER_NPE_YN,
			POWER_LNPE_YN,
			POWER_ETC,
			POWER_ETC_YN,
			DC_POWER_P_YN,
			DC_POWER_N_YN,
			DC_POWER_PN_YN,
			DC_POWER_ETC,
			DC_POWER_ETC_YN,
			SGNL_NAME,
			PLUS_RESULT_CODE,
			MINUS_RESULT_CODE,
			MEMO
		)
		VALUES
		<foreach collection="MethodEftSubList" item="item" separator=",">
		(
			#{eftSeq},
			#{item.applType},
			#{item.noYn},
			#{item.powerLYn},
			#{item.powerNYn},
			#{item.powerPeYn},
			#{item.powerLnYn},
			#{item.powerLpeYn},
			#{item.powerNpeYn},
			#{item.powerLnpeYn},
			#{item.powerEtc},
			#{item.powerEtcYn},
			#{item.dcPowerPYn},
			#{item.dcPowerNYn},
			#{item.dcPowerPnYn},
			#{item.dcPowerEtc},
			#{item.dcPowerEtcYn},
			#{item.sgnlName},
			#{item.plusResultCode},
			#{item.minusResultCode},
			#{item.memo}
		)
		</foreach>
	</insert>
	
	<update id="updateEftSub">
		<foreach collection="MethodEftSubList" item="item" separator=";">
		UPDATE METHOD_EFT_SUB_TB
		SET
			APPL_TYPE = #{item.applType},
			NO_YN = #{item.noYn},
			POWER_L_YN = #{item.powerLYn},
			POWER_N_YN = #{item.powerNYn},
			POWER_PE_YN = #{item.powerPeYn},
			POWER_LN_YN = #{item.powerLnYn},
			POWER_LPE_YN = #{item.powerLpeYn},
			POWER_NPE_YN = #{item.powerNpeYn},
			POWER_LNPE_YN = #{item.powerLnpeYn},
			POWER_ETC = #{item.powerEtc},
			POWER_ETC_YN = #{item.powerEtcYn},
			DC_POWER_P_YN = #{item.dcPowerPYn},
			DC_POWER_N_YN = #{item.dcPowerNYn},
			DC_POWER_PN_YN = #{item.dcPowerPnYn},
			DC_POWER_ETC = #{item.dcPowerEtc},
			DC_POWER_ETC_YN = #{item.dcPowerEtcYn},
			SGNL_NAME = #{item.sgnlName},
			PLUS_RESULT_CODE = #{item.plusResultCode},
			MINUS_RESULT_CODE = #{item.minusResultCode},
			MEMO = #{item.memo},
			STATE = #{item.state}
		WHERE EFT_SUB_SEQ = #{item.eftSubSeq}
		</foreach>
	</update>

	<update id="deleteEftSub">
		UPDATE METHOD_EFT_SUB_TB
		SET
			STATE = 'D'
		WHERE EFT_SEQ = #{eftSeq}
		AND STATE != 'D'
		AND APPL_TYPE = #{MethodSub.applType}
		AND NO_YN = 0
	</update>
	
	<select id="surgeDetail" parameterType="int" resultType="surgeDTO">
		SELECT 
			SURGE_SEQ, RAW_SEQ,
		    VLT_AC_YN, VLT_ETC, VLT_ETC_YN, VAR_N_YN, VAR_Y_YN,
		    ROOM1_YN, ROOM2_YN, ROOM_ETC, ROOM_ETC_YN,
		    TEMP, TEMP_PLUS, HMDT, HMDT_PLUS, BRMT, BRMT_PLUS,
		    POWER_LINE, POWER_PE, DC_POWER_PN,
		    COMM_TML_PE, COMM_TML_LINE,
		    OPEN_CRCT_50_YN, OPEN_CRCT_700_YN, SHRT_CRCT_20_YN, SHRT_CRCT_ETC, SHRT_CRCT_ETC_YN,
		    ACRDT_YN, PHASE_0_YN, PHASE_90_YN, PHASE_180_YN, PHASE_270_YN,
		    RPTTN_20_YN, RPTTN_60_YN,
		    EVLTN_A_YN, EVLTN_B_YN, EVLTN_C_YN,
		    COUPLING_18_YN, COUPLING_10_YN, COUPLING_40_YN,
		    MSRMN_YEAR, MSRMN_MON, MSRMN_DAY, MSRMN_HOUR, MSRMN_MIN,
		    SIGN, FN_GET_IMAGE(SIGN_URL,0) SIGN_URL,
		    RESULT_CODE,
<!-- 		    POWER_LN_YN, POWER_LN_ETC, POWER_LN_ETC_YN, POWER_LPE_YN, POWER_NPE_YN, -->
<!-- 		    POWER_ECT1_YN, POWER_ECT2_YN, POWER_ECT3_YN, POWER_ECT4_YN, POWER_ECT5_YN, POWER_ECT6_YN, -->
<!-- 		    POWER_ECT1, POWER_ECT2, POWER_ECT3, POWER_ECT4, POWER_ECT5, POWER_ECT6, -->
<!-- 		    DC_POWER_PN_YN, DC_POWER_ETC_YN, DC_POWER_ETC, DC_POWER_TEXT, -->
<!-- 		    SGNL1, SGNL2, -->
<!-- 		    POWER_LN_CODE, POWER_LPE_CODE, POWER_ECT1_CODE, POWER_ECT2_CODE, -->
<!-- 		    DC_POWER_PN_CODE, DC_POWER_ETC_CODE, SGNL1_CODE, SGNL2_CODE, -->
		    CMNT_A_YN, CMNT_ETC, CMNT_ETC_YN
		FROM METHOD_SURGE_TB
		WHERE 1=1
		AND RAW_SEQ = #{rawSeq}
	</select>
	
	<select id="surgeSubList" parameterType="int" resultType="egovMap">
		SELECT 
			SURGE_SUB_SEQ,
			SURGE_SEQ,
			APPL_TYPE,
			NO_YN,
			POWER_LN_YN,
			POWER_LPE_YN,
			POWER_NPE_YN,
			POWER_ETC,
			POWER_ETC_YN,
			DC_POWER_PN_YN,
			DC_POWER_ETC,
			DC_POWER_ETC_YN,
			SGNL_NAME,
			PLUS_RESULT_CODE,
			MINUS_RESULT_CODE,
			MEMO,
			STATE
		FROM METHOD_SURGE_SUB_TB
		WHERE 1=1
		AND STATE != 'D'
		AND SURGE_SEQ = #{surgeSeq}
	</select>
	
	<insert id="insertSurge" parameterType="surgeDTO">
		<selectKey resultType="int" keyProperty="surgeSeq" order="AFTER">
	        SELECT SURGE_SEQ surgeSeq FROM METHOD_SURGE_TB WHERE RAW_SEQ = #{rawSeq}
	    </selectKey>
	    INSERT INTO METHOD_SURGE_TB
		(
			SURGE_SEQ, RAW_SEQ,
		    VLT_AC_YN, VLT_ETC, VLT_ETC_YN, VAR_N_YN, VAR_Y_YN,
		    ROOM1_YN, ROOM2_YN, ROOM_ETC, ROOM_ETC_YN,
		    TEMP, TEMP_PLUS, HMDT, HMDT_PLUS, BRMT, BRMT_PLUS,
		    POWER_LINE, POWER_PE, DC_POWER_PN,
		    COMM_TML_PE, COMM_TML_LINE,
		    OPEN_CRCT_50_YN, OPEN_CRCT_700_YN, SHRT_CRCT_20_YN, SHRT_CRCT_ETC, SHRT_CRCT_ETC_YN,
		    ACRDT_YN, PHASE_0_YN, PHASE_90_YN, PHASE_180_YN, PHASE_270_YN,
		    RPTTN_20_YN, RPTTN_60_YN,
		    EVLTN_A_YN, EVLTN_B_YN, EVLTN_C_YN,
		    COUPLING_18_YN, COUPLING_10_YN, COUPLING_40_YN,
		    MSRMN_YEAR, MSRMN_MON, MSRMN_DAY, MSRMN_HOUR, MSRMN_MIN,
		    SIGN, SIGN_URL,
		    RESULT_CODE,
<!-- 		    POWER_LN_YN, POWER_LN_ETC, POWER_LN_ETC_YN, POWER_LPE_YN, POWER_NPE_YN, -->
<!-- 		    POWER_ECT1_YN, POWER_ECT2_YN, POWER_ECT3_YN, POWER_ECT4_YN, POWER_ECT5_YN, POWER_ECT6_YN, -->
<!-- 		    POWER_ECT1, POWER_ECT2, POWER_ECT3, POWER_ECT4, POWER_ECT5, POWER_ECT6, -->
<!-- 		    DC_POWER_PN_YN, DC_POWER_ETC_YN, DC_POWER_ETC, DC_POWER_TEXT, -->
<!-- 		    SGNL1, SGNL2, -->
<!-- 		    POWER_LN_CODE, POWER_LPE_CODE, POWER_ECT1_CODE, POWER_ECT2_CODE, -->
<!-- 		    DC_POWER_PN_CODE, DC_POWER_ETC_CODE, SGNL1_CODE, SGNL2_CODE, -->
		    CMNT_A_YN, CMNT_ETC, CMNT_ETC_YN,
		    INS_MEM_ID, UDT_MEM_ID
		)
		VALUES 
		(
			(SELECT ifnull(MAX(seq.SURGE_SEQ)+1,1) surgeSeq FROM METHOD_SURGE_TB seq), #{rawSeq},
			#{vltAcYn}, #{vltEtc}, #{vltEtcYn}, #{varNYn}, #{varYYn},
			#{room1Yn}, #{room2Yn}, #{roomEtc}, #{roomEtcYn},
			#{temp}, #{tempPlus}, #{hmdt}, #{hmdtPlus}, #{brmt}, #{brmtPlus},
			#{powerLine}, #{powerPe}, #{dcPowerPn},
			#{commTmlPe}, #{commTmlLine},
			#{openCrct50Yn}, #{openCrct700Yn}, #{shrtCrct20Yn}, #{shrtCrctEtc}, #{shrtCrctEtcYn},
			#{acrdtYn}, #{phase0Yn}, #{phase90Yn}, #{phase180Yn}, #{phase270Yn},
			#{rpttn20Yn}, #{rpttn60Yn},
			#{evltnAYn}, #{evltnBYn}, #{evltnCYn},
			#{coupling18Yn}, #{coupling10Yn}, #{coupling40Yn},
			#{msrmnYear}, #{msrmnMon}, #{msrmnDay}, #{msrmnHour}, #{msrmnMin},
			#{sign}, #{signUrl},
			#{resultCode},
<!-- 			#{powerLnYn}, #{powerLnEtc}, #{powerLnEtcYn}, #{powerLpeYn}, #{powerNpeYn}, -->
<!-- 			#{powerEct1Yn}, #{powerEct2Yn}, #{powerEct3Yn}, #{powerEct4Yn}, #{powerEct5Yn}, #{powerEct6Yn}, -->
<!-- 			#{powerEct1}, #{powerEct2}, #{powerEct3}, #{powerEct4}, #{powerEct5}, #{powerEct6}, -->
<!-- 			#{dcPowerPnYn}, #{dcPowerEtcYn}, #{dcPowerEtc}, #{dcPowerText}, -->
<!-- 			#{sgnl1}, #{sgnl2}, -->
<!-- 			#{powerLnCode}, #{powerLpeCode}, #{powerEct1Code}, #{powerEct2Code}, -->
<!-- 			#{dcPowerPnCode}, #{dcPowerEtcCode}, -->
<!-- 			#{sgnl1Code}, #{sgnl2Code}, -->
			#{cmntAYn}, #{cmntEtc}, #{cmntEtcYn},
			#{insMemId},#{udtMemId}
		)
		ON DUPLICATE KEY UPDATE
			VLT_AC_YN = #{vltAcYn},
			VLT_ETC = #{vltEtc},
			VLT_ETC_YN = #{vltEtcYn},
			VAR_N_YN = #{varNYn},
			VAR_Y_YN = #{varYYn},
			ROOM1_YN = #{room1Yn},
			ROOM2_YN = #{room2Yn},
			ROOM_ETC = #{roomEtc},
			ROOM_ETC_YN = #{roomEtcYn},
			TEMP = #{temp},
			TEMP_PLUS = #{tempPlus},
			HMDT = #{hmdt},
			HMDT_PLUS = #{hmdtPlus},
			BRMT = #{brmt},
			BRMT_PLUS = #{brmtPlus},
			POWER_LINE = #{powerLine},
			POWER_PE = #{powerPe},
			DC_POWER_PN = #{dcPowerPn},
			COMM_TML_PE = #{commTmlPe},
			COMM_TML_LINE = #{commTmlLine},
			OPEN_CRCT_50_YN = #{openCrct50Yn},
			OPEN_CRCT_700_YN = #{openCrct700Yn},
			SHRT_CRCT_20_YN = #{shrtCrct20Yn},
			SHRT_CRCT_ETC = #{shrtCrctEtc},
			SHRT_CRCT_ETC_YN = #{shrtCrctEtcYn},
			ACRDT_YN = #{acrdtYn},
			PHASE_0_YN = #{phase0Yn},
			PHASE_90_YN = #{phase90Yn},
			PHASE_180_YN = #{phase180Yn},
			PHASE_270_YN = #{phase270Yn},
			RPTTN_20_YN = #{rpttn20Yn},
			RPTTN_60_YN = #{rpttn60Yn},
			EVLTN_A_YN = #{evltnAYn},
			EVLTN_B_YN = #{evltnBYn},
			EVLTN_C_YN = #{evltnCYn},
			COUPLING_18_YN = #{coupling18Yn},
			COUPLING_10_YN = #{coupling10Yn},
			COUPLING_40_YN = #{coupling40Yn},
			MSRMN_YEAR = #{msrmnYear},
			MSRMN_MON = #{msrmnMon},
			MSRMN_DAY = #{msrmnDay},
			MSRMN_HOUR = #{msrmnHour},
			MSRMN_MIN = #{msrmnMin},
			SIGN = #{sign},
			<if test="signUrl != null and signUrl != ''">SIGN_URL = #{signUrl},</if>
			RESULT_CODE = #{resultCode},
<!-- 			POWER_LN_YN = #{powerLnYn}, -->
<!-- 			POWER_LN_ETC = #{powerLnEtc}, -->
<!-- 			POWER_LN_ETC_YN = #{powerLnEtcYn}, -->
<!-- 			POWER_LPE_YN = #{powerLpeYn}, -->
<!-- 			POWER_NPE_YN = #{powerNpeYn}, -->
<!-- 			POWER_ECT1_YN = #{powerEct1Yn}, -->
<!-- 			POWER_ECT2_YN = #{powerEct2Yn}, -->
<!-- 			POWER_ECT3_YN = #{powerEct3Yn}, -->
<!-- 			POWER_ECT4_YN = #{powerEct4Yn}, -->
<!-- 			POWER_ECT5_YN = #{powerEct5Yn}, -->
<!-- 			POWER_ECT6_YN = #{powerEct6Yn}, -->
<!-- 			POWER_ECT1 = #{powerEct1}, -->
<!-- 			POWER_ECT2 = #{powerEct2}, -->
<!-- 			POWER_ECT3 = #{powerEct3}, -->
<!-- 			POWER_ECT4 = #{powerEct4}, -->
<!-- 			POWER_ECT5 = #{powerEct5}, -->
<!-- 			POWER_ECT6 = #{powerEct6}, -->
<!-- 			DC_POWER_PN_YN = #{dcPowerPnYn}, -->
<!-- 			DC_POWER_ETC_YN = #{dcPowerEtcYn}, -->
<!-- 			DC_POWER_ETC = #{dcPowerEtc}, -->
<!-- 			DC_POWER_TEXT = #{dcPowerText}, -->
<!-- 			SGNL1 = #{sgnl1}, -->
<!-- 			SGNL2 = #{sgnl2}, -->
<!-- 			POWER_LN_CODE = #{powerLnCode}, -->
<!-- 			POWER_LPE_CODE = #{powerLpeCode}, -->
<!-- 			POWER_ECT1_CODE = #{powerEct1Code}, -->
<!-- 			POWER_ECT2_CODE = #{powerEct2Code}, -->
<!-- 			DC_POWER_PN_CODE = #{dcPowerPnCode}, -->
<!-- 			DC_POWER_ETC_CODE = #{dcPowerEtcCode}, -->
<!-- 			SGNL1_CODE = #{sgnl1Code}, -->
<!-- 			SGNL2_CODE = #{sgnl2Code}, -->
			CMNT_A_YN = #{cmntAYn},
			CMNT_ETC = #{cmntEtc},
			CMNT_ETC_YN = #{cmntEtcYn},
			UDT_DT = NOW(),
			UDT_MEM_ID = #{udtMemId}
	</insert>	
	
	<insert id="insertSurgeSub">
		INSERT INTO METHOD_SURGE_SUB_TB
		(
			SURGE_SEQ,
			APPL_TYPE,
			NO_YN,
			POWER_LN_YN,
			POWER_LPE_YN,
			POWER_NPE_YN,
			POWER_ETC,
			POWER_ETC_YN,
			DC_POWER_PN_YN,
			DC_POWER_ETC,
			DC_POWER_ETC_YN,
			SGNL_NAME,
			PLUS_RESULT_CODE,
			MINUS_RESULT_CODE,
			MEMO
		)
		VALUES
		<foreach collection="MethodSurgeSubList" item="item" separator=",">
		(
			#{surgeSeq},
			#{item.applType},
			#{item.noYn},
			#{item.powerLnYn},
			#{item.powerLpeYn},
			#{item.powerNpeYn},
			#{item.powerEtc},
			#{item.powerEtcYn},
			#{item.dcPowerPnYn},
			#{item.dcPowerEtc},
			#{item.dcPowerEtcYn},
			#{item.sgnlName},
			#{item.plusResultCode},
			#{item.minusResultCode},
			#{item.memo}
		)
		</foreach>
	</insert>
	
	<update id="updateSurgeSub">
		<foreach collection="MethodSurgeSubList" item="item" separator=";">
		UPDATE METHOD_SURGE_SUB_TB
		SET
			APPL_TYPE = #{item.applType},
			NO_YN = #{item.noYn},
			POWER_LN_YN = #{item.powerLnYn},
			POWER_LPE_YN = #{item.powerLpeYn},
			POWER_NPE_YN = #{item.powerNpeYn},
			POWER_ETC = #{item.powerEtc},
			POWER_ETC_YN = #{item.powerEtcYn},
			DC_POWER_PN_YN = #{item.dcPowerPnYn},
			DC_POWER_ETC = #{item.dcPowerEtc},
			DC_POWER_ETC_YN = #{item.dcPowerEtcYn},
			SGNL_NAME = #{item.sgnlName},
			PLUS_RESULT_CODE = #{item.plusResultCode},
			MINUS_RESULT_CODE = #{item.minusResultCode},
			MEMO = #{item.memo},
			STATE = #{item.state}
		WHERE SURGE_SUB_SEQ = #{item.surgeSubSeq}
		</foreach>
	</update>

	<update id="deleteSurgeSub">
		UPDATE METHOD_SURGE_SUB_TB
		SET
			STATE = 'D'
		WHERE SURGE_SEQ = #{surgeSeq}
		AND STATE != 'D'
		AND APPL_TYPE = #{MethodSub.applType}
		AND NO_YN = 0
	</update>
	
	<select id="csDetail" parameterType="int" resultType="csDTO">
		SELECT 
			CS_SEQ, RAW_SEQ,
		    VLT_AC_YN, VLT_ETC, VLT_ETC_YN, VAR_N_YN, VAR_Y_YN,
		    ROOM1_YN, ROOM2_YN, ROOM_ETC, ROOM_ETC_YN,
		    TEMP, TEMP_PLUS, HMDT, HMDT_PLUS, BRMT, BRMT_PLUS,
		    STRN_1V_YN, STRN_3V_YN, STRN_10V_YN, STRN_ETC, STRN_ETC_YN,
		    SWEP_15_YN, SWEP_1_YN,MDLT_80_YN, MDLT_ETC, MDLT_ETC_YN,
		    EVLTN_A_YN, EVLTN_B_YN, EVLTN_C_YN,
		    FRQNC_AREA, SPC_FRQNC,
		    MSRMN_YEAR, MSRMN_MON, MSRMN_DAY, MSRMN_HOUR, MSRMN_MIN,
		    SIGN, FN_GET_IMAGE(SIGN_URL,0) SIGN_URL,
		    RESULT_CODE,
<!-- 		    APPL_POWER_YN, APPL_IN_YN, APPL_OUT_YN, APPL_DB_POWER_YN, -->
<!-- 		    APPL1_M2_YN, APPL1_M3_YN, APPL1_EM_YN, APPL1_ETC, APPL1_ETC_YN, -->
<!-- 		    APPL2_M2_YN, APPL2_M3_YN, APPL2_EM_YN, APPL2_ETC, APPL2_ETC_YN, -->
<!-- 		    APPL3_M2_YN, APPL3_M3_YN, APPL3_EM_YN, APPL3_ETC, APPL3_ETC_YN, -->
<!-- 		    APPL1_CODE, APPL2_CODE, APPL3_CODE, -->
<!-- 		    APPL1_MEMO, APPL2_MEMO, APPL3_MEMO, -->
<!-- 		    PORT1, PORT2, -->
<!-- 		    PORT1_ACRDT_M2_YN, PORT1_ACRDT_M3_YN, PORT1_ACRDT_EM_YN, PORT1_ACRDT_ETC, PORT1_ACRDT_ETC_YN, PORT1_ACRDT_CODE, PORT1_ACRDT_MEMO, -->
<!-- 		    PORT2_ACRDT_M2_YN, PORT2_ACRDT_M3_YN, PORT2_ACRDT_EM_YN, PORT2_ACRDT_ETC, PORT2_ACRDT_ETC_YN, PORT2_ACRDT_CODE, PORT2_ACRDT_MEMO, -->
<!-- 		    AUDIO_ELCT_YN, AUDIO_ACST_YN, AUDIO_NEAR_YN, AUDIO_FEAR_YN, AUDIO_M2_YN, AUDIO_M3_YN, AUDIO_EM_YN, AUDIO_ETC, AUDIO_ETC_YN, AUDIO_CODE, AUDIO_MEMO, -->
<!-- 		    SPKR_ELCT_YN, SPKR_ACST_YN, SPKR_NEAR_YN, SPKR_FEAR_YN, SPKR_M2_YN, SPKR_M3_YN, SPKR_EM_YN, SPKR_ETC, SPKR_ETC_YN, SPKR_CODE, SPKR_MEMO, -->
<!-- 		    COMM1_NOISE_YN, COMM1_ACST_YN, COMM1_M2_YN, COMM1_M3_YN, COMM1_EM_YN, COMM1_ETC, COMM1_ETC_YN, COMM1_CODE, COMM1_MEMO, -->
<!-- 		    COMM2_NOISE_YN, COMM2_ACST_YN, COMM2_M2_YN, COMM2_M3_YN, COMM2_EM_YN, COMM2_ETC, COMM2_ETC_YN, COMM2_CODE, COMM2_MEMO, -->
		    CMNT_A_YN, CMNT_ETC, CMNT_ETC_YN
		FROM METHOD_CS_TB
		WHERE 1=1
		AND RAW_SEQ = #{rawSeq}
	</select>
	
	<select id="csSubList" parameterType="int" resultType="egovMap">
		SELECT 
			CS_SEQ,
			CS_SUB_SEQ,
			APPL_TYPE,
			NO_YN,
			ifnull(APPL_NAME, '') APPL_NAME,
			CDN_M2_YN,
			CDN_M3_YN,
			EM_YN,
			ETC_YN,
			ETC,
			RESULT_CODE,
			MEMO,
			STATE
		FROM METHOD_CS_SUB_TB
		WHERE 1=1
		AND STATE != 'D'
		AND CS_SEQ = #{csSeq}
	</select>
	
	<insert id="insertCs" parameterType="csDTO">
		<selectKey resultType="int" keyProperty="csSeq" order="AFTER">
	        SELECT CS_SEQ csSeq FROM METHOD_CS_TB WHERE RAW_SEQ = #{rawSeq}
	    </selectKey>
		INSERT INTO METHOD_CS_TB
		(
			CS_SEQ, RAW_SEQ,
		    VLT_AC_YN, VLT_ETC, VLT_ETC_YN, VAR_N_YN, VAR_Y_YN,
		    ROOM1_YN, ROOM2_YN, ROOM_ETC, ROOM_ETC_YN,
		    TEMP, TEMP_PLUS, HMDT, HMDT_PLUS, BRMT, BRMT_PLUS,
		    STRN_1V_YN, STRN_3V_YN, STRN_10V_YN, STRN_ETC, STRN_ETC_YN,
		    SWEP_15_YN, SWEP_1_YN,MDLT_80_YN, MDLT_ETC, MDLT_ETC_YN,
		    EVLTN_A_YN, EVLTN_B_YN, EVLTN_C_YN,
		    FRQNC_AREA, SPC_FRQNC,
		    MSRMN_YEAR, MSRMN_MON, MSRMN_DAY, MSRMN_HOUR, MSRMN_MIN,
		    SIGN, SIGN_URL,
		    RESULT_CODE,
<!-- 		    APPL_POWER_YN, APPL_IN_YN, APPL_OUT_YN, APPL_DB_POWER_YN, -->
<!-- 		    APPL1_M2_YN, APPL1_M3_YN, APPL1_EM_YN, APPL1_ETC, APPL1_ETC_YN, -->
<!-- 		    APPL2_M2_YN, APPL2_M3_YN, APPL2_EM_YN, APPL2_ETC, APPL2_ETC_YN, -->
<!-- 		    APPL3_M2_YN, APPL3_M3_YN, APPL3_EM_YN, APPL3_ETC, APPL3_ETC_YN, -->
<!-- 		    APPL1_CODE, APPL2_CODE, APPL3_CODE, -->
<!-- 		    APPL1_MEMO, APPL2_MEMO, APPL3_MEMO, -->
<!-- 		    PORT1, PORT2, -->
<!-- 		    PORT1_ACRDT_M2_YN, PORT1_ACRDT_M3_YN, PORT1_ACRDT_EM_YN, PORT1_ACRDT_ETC, PORT1_ACRDT_ETC_YN, PORT1_ACRDT_CODE, PORT1_ACRDT_MEMO, -->
<!-- 		    PORT2_ACRDT_M2_YN, PORT2_ACRDT_M3_YN, PORT2_ACRDT_EM_YN, PORT2_ACRDT_ETC, PORT2_ACRDT_ETC_YN, PORT2_ACRDT_CODE, PORT2_ACRDT_MEMO, -->
<!-- 		    AUDIO_ELCT_YN, AUDIO_ACST_YN, AUDIO_NEAR_YN, AUDIO_FEAR_YN, AUDIO_M2_YN, AUDIO_M3_YN, AUDIO_EM_YN, AUDIO_ETC, AUDIO_ETC_YN, AUDIO_CODE, AUDIO_MEMO, -->
<!-- 		    SPKR_ELCT_YN, SPKR_ACST_YN, SPKR_NEAR_YN, SPKR_FEAR_YN, SPKR_M2_YN, SPKR_M3_YN, SPKR_EM_YN, SPKR_ETC, SPKR_ETC_YN, SPKR_CODE, SPKR_MEMO, -->
<!-- 		    COMM1_NOISE_YN, COMM1_ACST_YN, COMM1_M2_YN, COMM1_M3_YN, COMM1_EM_YN, COMM1_ETC, COMM1_ETC_YN, COMM1_CODE, COMM1_MEMO, -->
<!-- 		    COMM2_NOISE_YN, COMM2_ACST_YN, COMM2_M2_YN, COMM2_M3_YN, COMM2_EM_YN, COMM2_ETC, COMM2_ETC_YN, COMM2_CODE, COMM2_MEMO, -->
		    CMNT_A_YN, CMNT_ETC, CMNT_ETC_YN,
		    INS_MEM_ID, UDT_MEM_ID
		)
		VALUES 
		(
			(SELECT ifnull(MAX(seq.CS_SEQ)+1,1) csSeq FROM METHOD_CS_TB seq),
			#{rawSeq},
			#{vltAcYn}, #{vltEtc}, #{vltEtcYn}, #{varNYn}, #{varYYn},
			#{room1Yn}, #{room2Yn}, #{roomEtc}, #{roomEtcYn},
			#{temp}, #{tempPlus}, #{hmdt}, #{hmdtPlus}, #{brmt}, #{brmtPlus},
			#{strn1vYn}, #{strn3vYn}, #{strn10vYn}, #{strnEtc}, #{strnEtcYn},
			#{swep15Yn}, #{swep1Yn},#{mdlt80Yn}, #{mdltEtc}, #{mdltEtcYn},
			#{evltnAYn}, #{evltnBYn}, #{evltnCYn},
			#{frqncArea}, #{spcFrqnc},
			#{msrmnYear}, #{msrmnMon}, #{msrmnDay}, #{msrmnHour}, #{msrmnMin},
			#{sign}, #{signUrl},
			#{resultCode},
<!-- 			#{applPowerYn}, #{applInYn}, #{applOutYn}, #{applDbPowerYn}, -->
<!-- 			#{appl1M2Yn}, #{appl1M3Yn}, #{appl1EmYn}, #{appl1Etc}, #{appl1EtcYn}, -->
<!-- 			#{appl2M2Yn}, #{appl2M3Yn}, #{appl2EmYn}, #{appl2Etc}, #{appl2EtcYn}, -->
<!-- 			#{appl3M2Yn}, #{appl3M3Yn}, #{appl3EmYn}, #{appl3Etc}, #{appl3EtcYn}, -->
<!-- 			#{appl1Code}, #{appl2Code}, #{appl3Code}, -->
<!-- 			#{appl1Memo}, #{appl2Memo}, #{appl3Memo}, -->
<!-- 			#{port1}, #{port2}, -->
<!-- 			#{port1AcrdtM2Yn}, #{port1AcrdtM3Yn}, #{port1AcrdtEmYn}, #{port1AcrdtEtc}, #{port1AcrdtEtcYn}, #{port1AcrdtCode}, #{port1AcrdtMemo}, -->
<!-- 			#{port2AcrdtM2Yn}, #{port2AcrdtM3Yn}, #{port2AcrdtEmYn}, #{port2AcrdtEtc}, #{port2AcrdtEtcYn}, #{port2AcrdtCode}, #{port2AcrdtMemo}, -->
<!-- 			#{audioElctYn}, #{audioAcstYn}, #{audioNearYn}, #{audioFearYn}, #{audioM2Yn}, #{audioM3Yn}, #{audioEmYn}, #{audioEtc}, #{audioEtcYn}, #{audioCode}, #{audioMemo}, -->
<!-- 			#{spkrElctYn}, #{spkrAcstYn}, #{spkrNearYn}, #{spkrFearYn}, #{spkrM2Yn}, #{spkrM3Yn}, #{spkrEmYn}, #{spkrEtc}, #{spkrEtcYn}, #{spkrCode}, #{spkrMemo}, -->
<!-- 			#{comm1NoiseYn}, #{comm1AcstYn}, #{comm1M2Yn}, #{comm1M3Yn}, #{comm1EmYn}, #{comm1Etc}, #{comm1EtcYn}, #{comm1Code}, #{comm1Memo}, -->
<!-- 			#{comm2NoiseYn}, #{comm2AcstYn}, #{comm2M2Yn}, #{comm2M3Yn}, #{comm2EmYn}, #{comm2Etc}, #{comm2EtcYn}, #{comm2Code}, #{comm2Memo}, -->
			#{cmntAYn}, #{cmntEtc}, #{cmntEtcYn},
			#{insMemId}, #{udtMemId}
		)
		ON DUPLICATE KEY UPDATE
			VLT_AC_YN = #{vltAcYn},
			VLT_ETC = #{vltEtc},
			VLT_ETC_YN = #{vltEtcYn},
			VAR_N_YN = #{varNYn},
			VAR_Y_YN = #{varYYn},
			ROOM1_YN = #{room1Yn},
			ROOM2_YN = #{room2Yn},
			ROOM_ETC = #{roomEtc},
			ROOM_ETC_YN = #{roomEtcYn},
			TEMP = #{temp},
			TEMP_PLUS = #{tempPlus},
			HMDT = #{hmdt},
			HMDT_PLUS = #{hmdtPlus},
			BRMT = #{brmt},
			BRMT_PLUS = #{brmtPlus},
			STRN_1V_YN = #{strn1vYn},
			STRN_3V_YN = #{strn3vYn},
			STRN_10V_YN = #{strn10vYn},
			STRN_ETC = #{strnEtc},
			STRN_ETC_YN = #{strnEtcYn},
			SWEP_15_YN = #{swep15Yn},
			SWEP_1_YN = #{swep1Yn},
			MDLT_80_YN = #{mdlt80Yn},
			MDLT_ETC = #{mdltEtc},
			MDLT_ETC_YN = #{mdltEtcYn},
			EVLTN_A_YN = #{evltnAYn},
			EVLTN_B_YN = #{evltnBYn},
			EVLTN_C_YN = #{evltnCYn},
			FRQNC_AREA = #{frqncArea},
			SPC_FRQNC = #{spcFrqnc},
			MSRMN_YEAR = #{msrmnYear},
			MSRMN_MON = #{msrmnMon},
			MSRMN_DAY = #{msrmnDay},
			MSRMN_HOUR = #{msrmnHour},
			MSRMN_MIN = #{msrmnMin},
			SIGN = #{sign},
			<if test="signUrl != null and signUrl != ''">SIGN_URL = #{signUrl},</if>
			RESULT_CODE = #{resultCode},
			CMNT_A_YN = #{cmntAYn},
			CMNT_ETC = #{cmntEtc},
			CMNT_ETC_YN = #{cmntEtcYn},
			UDT_DT = NOW(),
			UDT_MEM_ID = #{udtMemId}
	</insert>	

	<insert id="insertCsSub">
		INSERT INTO METHOD_CS_SUB_TB
		(
			CS_SEQ,
			APPL_TYPE,
			NO_YN,
			APPL_NAME,
			CDN_M2_YN,
			CDN_M3_YN,
			EM_YN,
			ETC_YN,
			ETC,
			RESULT_CODE,
			MEMO
		)
		VALUES
		<foreach collection="MethodCsSubList" item="item" separator=",">
		(
			#{csSeq},
			#{item.applType},
			#{item.noYn},
			#{item.applName},
			#{item.cdnM2Yn},
			#{item.cdnM3Yn},
			#{item.emYn},
			#{item.etcYn},
			#{item.etc},
			#{item.resultCode},
			#{item.memo}
		)
		</foreach>
	</insert>
	
	<update id="updateCsSub">
		<foreach collection="MethodCsSubList" item="item" separator=";">
		UPDATE METHOD_CS_SUB_TB
		SET
			APPL_TYPE = #{item.applType},
			NO_YN = #{item.noYn},
			APPL_NAME = #{item.applName},
			CDN_M2_YN = #{item.cdnM2Yn},
			CDN_M3_YN = #{item.cdnM3Yn},
			EM_YN = #{item.emYn},
			ETC_YN = #{item.etcYn},
			ETC = #{item.etc},
			RESULT_CODE = #{item.resultCode},
			MEMO = #{item.memo},
			STATE = #{item.state}
		WHERE CS_SUB_SEQ = #{item.csSubSeq}
		</foreach>
	</update>

	<update id="deleteCsSub">
		UPDATE METHOD_CS_SUB_TB
		SET
			STATE = 'D'
		WHERE CS_SEQ = #{csSeq}
		AND STATE != 'D'
		AND APPL_TYPE = #{MethodSub.applType}
		AND NO_YN = 0
	</update>
		
	<select id="mfDetail" parameterType="int" resultType="mfDTO">
		SELECT 
			MF_SEQ, RAW_SEQ,
		    VLT_AC_YN, VLT_ETC, VLT_ETC_YN, VAR_N_YN, VAR_Y_YN,
		    ROOM1_YN, ROOM2_YN, ROOM_ETC, ROOM_ETC_YN,
		    TEMP, TEMP_PLUS, HMDT, HMDT_PLUS, BRMT, BRMT_PLUS,
		    MGNT_A_YN, MGNT_3_YN, MGNT_30_YN, FRQNC_50_YN, FRQNC_60_YN,
		    AXIS_X_YN, AXIS_Y_YN, AXIS_Z_YN, ACRDT,
			SF_300_YN, SF_ETC_YN, SF_ETC,
    		EVLTN_A_YN, EVLTN_B_YN, EVLTN_C_YN,
		    MSRMN_YEAR, MSRMN_MON, MSRMN_DAY, MSRMN_HOUR, MSRMN_MIN,
		    SIGN, FN_GET_IMAGE(SIGN_URL,0) SIGN_URL,
		    RESULT_CODE,
		    X_STND, X_CODE, X_MEMO,
		    Y_STND, Y_CODE, Y_MEMO,
		    Z_STND, Z_CODE, Z_MEMO,
		    CMNT_A_YN, CMNT_ETC, CMNT_ETC_YN,
		    INS_MEM_ID, UDT_MEM_ID
		FROM METHOD_MF_TB
		WHERE 1=1
		AND RAW_SEQ = #{rawSeq}
	</select>
	<insert id="insertMf" parameterType="mfDTO">
		<selectKey resultType="int" keyProperty="mfSeq" order="BEFORE">
	        SELECT ifnull(MAX(MF_SEQ)+1,1) mfSeq FROM METHOD_MF_TB
	    </selectKey>
	    INSERT INTO METHOD_MF_TB
		(
			MF_SEQ, RAW_SEQ,
		    VLT_AC_YN, VLT_ETC, VLT_ETC_YN, VAR_N_YN, VAR_Y_YN,
		    ROOM1_YN, ROOM2_YN, ROOM_ETC, ROOM_ETC_YN,
		    TEMP, TEMP_PLUS, HMDT, HMDT_PLUS, BRMT, BRMT_PLUS,
		    MGNT_A_YN, MGNT_3_YN, MGNT_30_YN, FRQNC_50_YN, FRQNC_60_YN,
		    AXIS_X_YN, AXIS_Y_YN, AXIS_Z_YN, ACRDT,
		    SF_300_YN, SF_ETC_YN, SF_ETC,
    		EVLTN_A_YN, EVLTN_B_YN, EVLTN_C_YN,
		    MSRMN_YEAR, MSRMN_MON, MSRMN_DAY, MSRMN_HOUR, MSRMN_MIN,
		    SIGN, SIGN_URL,
		    RESULT_CODE,
		    X_STND, X_CODE, X_MEMO,
		    Y_STND, Y_CODE, Y_MEMO,
		    Z_STND, Z_CODE, Z_MEMO,
		    CMNT_A_YN, CMNT_ETC, CMNT_ETC_YN,
		    INS_MEM_ID, UDT_MEM_ID
		)
		VALUES 
		(
		    #{mfSeq},
	        #{rawSeq},
	        #{vltAcYn},
	        #{vltEtc},
	        #{vltEtcYn},
	        #{varNYn},
	        #{varYYn},
	        #{room1Yn},
	        #{room2Yn},
	        #{roomEtc},
	        #{roomEtcYn},
	        #{temp},
	        #{tempPlus},
	        #{hmdt},
	        #{hmdtPlus},
	        #{brmt},
	        #{brmtPlus},
	        #{mgntAYn},
	        #{mgnt3Yn},
	        #{mgnt30Yn},
	        #{frqnc50Yn},
	        #{frqnc60Yn},
	        #{axisXYn},
	        #{axisYYn},
	        #{axisZYn},
	        #{acrdt},
	        #{sf300Yn}, #{sfEtcYn}, #{sfEtc},
    		#{evltnAYn}, #{evltnBYn}, #{evltnCYn},
	        #{msrmnYear},
	        #{msrmnMon},
	        #{msrmnDay},
	        #{msrmnHour},
	        #{msrmnMin},
	        #{sign},
	        #{signUrl},
	        #{resultCode},
	        #{xStnd},
	        #{xCode},
	        #{xMemo},
	        #{yStnd},
	        #{yCode},
	        #{yMemo},
	        #{zStnd},
	        #{zCode},
	        #{zMemo},
	        #{cmntAYn},
	        #{cmntEtc},
	        #{cmntEtcYn},
	        #{insMemId},
	        #{udtMemId}
		)
		ON DUPLICATE KEY UPDATE
			VLT_AC_YN = #{vltAcYn},
			VLT_ETC = #{vltEtc},
			VLT_ETC_YN = #{vltEtcYn},
			VAR_N_YN = #{varNYn},
			VAR_Y_YN = #{varYYn},
			ROOM1_YN = #{room1Yn},
			ROOM2_YN = #{room2Yn},
			ROOM_ETC = #{roomEtc},
			ROOM_ETC_YN = #{roomEtcYn},
			TEMP = #{temp},
			TEMP_PLUS = #{tempPlus},
			HMDT = #{hmdt},
			HMDT_PLUS = #{hmdtPlus},
			BRMT = #{brmt},
			BRMT_PLUS = #{brmtPlus},
			MGNT_A_YN = #{mgntAYn},
			MGNT_3_YN = #{mgnt3Yn},
			MGNT_30_YN = #{mgnt30Yn},
			FRQNC_50_YN = #{frqnc50Yn},
			FRQNC_60_YN = #{frqnc60Yn},
			AXIS_X_YN = #{axisXYn},
			AXIS_Y_YN = #{axisYYn},
			AXIS_Z_YN = #{axisZYn},
			ACRDT = #{acrdt},
			SF_300_YN = #{sf300Yn}, 
			SF_ETC_YN = #{sfEtcYn}, 
			SF_ETC = #{sfEtc},
    		EVLTN_A_YN = #{evltnAYn}, 
    		EVLTN_B_YN = #{evltnBYn}, 
    		EVLTN_C_YN = #{evltnCYn},
			MSRMN_YEAR = #{msrmnYear},
			MSRMN_MON = #{msrmnMon},
			MSRMN_DAY = #{msrmnDay},
			MSRMN_HOUR = #{msrmnHour},
			MSRMN_MIN = #{msrmnMin},
			SIGN = #{sign},
			<if test="signUrl != null and signUrl != ''">SIGN_URL = #{signUrl},</if>
			RESULT_CODE = #{resultCode},
			X_STND = #{xStnd},
			X_CODE = #{xCode},
			X_MEMO = #{xMemo},
			Y_STND = #{yStnd},
			Y_CODE = #{yCode},
			Y_MEMO = #{yMemo},
			Z_STND = #{zStnd},
			Z_CODE = #{zCode},
			Z_MEMO = #{zMemo},
			CMNT_A_YN = #{cmntAYn},
			CMNT_ETC = #{cmntEtc},
			CMNT_ETC_YN = #{cmntEtcYn},
			UDT_DT = NOW(),
			UDT_MEM_ID = #{udtMemId}
	</insert>
	
	<select id="vdipDetail" parameterType="int" resultType="vdipDTO">
		SELECT 
			VDIP_SEQ, RAW_SEQ,
		    VLT_AC_YN, VLT_ETC, VLT_ETC_YN, VAR_N_YN, VAR_Y_YN,
		    ROOM1_YN, ROOM2_YN, ROOM_ETC, ROOM_ETC_YN,
		    TEMP, TEMP_PLUS, HMDT, HMDT_PLUS, BRMT, BRMT_PLUS,
<!-- 		    DIPS_RDC1_YN, DIPS_RDC1_TEXT, DIPS_RDC1_05_YN, DIPS_RDC1_5_YN, DIPS_RDC1_25_YN, DIPS_RDC1_30_YN, DIPS_RDC1_50_YN, DIPS_RDC1_ETC, DIPS_RDC1_ETC_YN, DIPS_RDC1_CODE, -->
<!-- 		    DIPS_RDC2_YN, DIPS_RDC2_TEXT, DIPS_RDC2_05_YN, DIPS_RDC2_5_YN, DIPS_RDC2_25_YN, DIPS_RDC2_30_YN, DIPS_RDC2_50_YN, DIPS_RDC2_ETC, DIPS_RDC2_ETC_YN, DIPS_RDC2_CODE, -->
<!-- 		    DIPS_RDC3_YN, DIPS_RDC3_TEXT, DIPS_RDC3_ETC, DIPS_RDC3_ETC_YN, DIPS_RDC3_CODE, DIPS_RDC4_YN, DIPS_RDC4_TEXT, DIPS_RDC4_ETC, DIPS_RDC4_ETC_YN, DIPS_RDC4_CODE, -->
<!-- 		    INTRP_RDC1_YN, INTRP_RDC1_TEXT, INTRP_RDC1_05_YN, INTRP_RDC1_250_YN, INTRP_RDC1_300_YN, INTRP_RDC1_ETC, INTRP_RDC1_ETC_YN, INTRP_RDC1_CODE,  -->
<!-- 		    INTRP_RDC2_YN, INTRP_RDC2_TEXT, INTRP_RDC2_ETC, INTRP_RDC2_ETC_YN, INTRP_RDC2_CODE, -->
<!-- 		    INTRP_RDC3_YN, INTRP_RDC3_TEXT, INTRP_RDC3_ETC, INTRP_RDC3_ETC_YN, INTRP_RDC3_CODE, -->
<!-- 		    INTRP_RDC4_YN, INTRP_RDC4_TEXT, INTRP_RDC4_ETC, INTRP_RDC4_ETC_YN, INTRP_RDC4_CODE, -->
<!-- 		    FLCTT_P10_YN, FLCTT_M10_YN, FLCTT_M15_YN, -->
			VOL1_RESULT_CODE, VOL1_CMNT_CODE, VOL1_CMNT, FN_CODE_NAME(VOL1_CMNT_CODE,'RV') VOL1_REPORT,
		    VOL2_RESULT_CODE, VOL2_CMNT_CODE, VOL2_CMNT, FN_CODE_NAME(VOL2_CMNT_CODE,'RV') VOL2_REPORT,
		    VOL3_RESULT_CODE, VOL3_CMNT_CODE, VOL3_CMNT, FN_CODE_NAME(VOL3_CMNT_CODE,'RV') VOL3_REPORT,
		    MSRMN_YEAR, MSRMN_MON, MSRMN_DAY, MSRMN_HOUR, MSRMN_MIN,
		    SIGN, FN_GET_IMAGE(SIGN_URL,0) SIGN_URL,
		    RESULT_CODE,
		    MEMO_YN, MEMO
		FROM METHOD_VDIP_TB
		WHERE 1=1
		AND RAW_SEQ = #{rawSeq}
	</select>
	<insert id="insertVdip" parameterType="vdipDTO">
		<selectKey resultType="int" keyProperty="vdipSeq" order="BEFORE">
	        SELECT ifnull(MAX(VDIP_SEQ)+1,1) vdipSeq FROM METHOD_VDIP_TB
	    </selectKey>
	    INSERT INTO METHOD_VDIP_TB
		(
			VDIP_SEQ, RAW_SEQ,
		    VLT_AC_YN, VLT_ETC, VLT_ETC_YN, VAR_N_YN, VAR_Y_YN,
		    ROOM1_YN, ROOM2_YN, ROOM_ETC, ROOM_ETC_YN,
		    TEMP, TEMP_PLUS, HMDT, HMDT_PLUS, BRMT, BRMT_PLUS,
<!-- 		    DIPS_RDC1_YN, DIPS_RDC1_TEXT, DIPS_RDC1_05_YN, DIPS_RDC1_5_YN, DIPS_RDC1_25_YN, DIPS_RDC1_30_YN, DIPS_RDC1_50_YN, DIPS_RDC1_ETC, DIPS_RDC1_ETC_YN, DIPS_RDC1_CODE, -->
<!-- 		    DIPS_RDC2_YN, DIPS_RDC2_TEXT, DIPS_RDC2_05_YN, DIPS_RDC2_5_YN, DIPS_RDC2_25_YN, DIPS_RDC2_30_YN, DIPS_RDC2_50_YN, DIPS_RDC2_ETC, DIPS_RDC2_ETC_YN, DIPS_RDC2_CODE, -->
<!-- 		    DIPS_RDC3_YN, DIPS_RDC3_TEXT, DIPS_RDC3_ETC, DIPS_RDC3_ETC_YN, DIPS_RDC3_CODE, DIPS_RDC4_YN, DIPS_RDC4_TEXT, DIPS_RDC4_ETC, DIPS_RDC4_ETC_YN, DIPS_RDC4_CODE, -->
<!-- 		    INTRP_RDC1_YN, INTRP_RDC1_TEXT, INTRP_RDC1_05_YN, INTRP_RDC1_250_YN, INTRP_RDC1_300_YN, INTRP_RDC1_ETC, INTRP_RDC1_ETC_YN, INTRP_RDC1_CODE,  -->
<!-- 		    INTRP_RDC2_YN, INTRP_RDC2_TEXT, INTRP_RDC2_ETC, INTRP_RDC2_ETC_YN, INTRP_RDC2_CODE, -->
<!-- 		    INTRP_RDC3_YN, INTRP_RDC3_TEXT, INTRP_RDC3_ETC, INTRP_RDC3_ETC_YN, INTRP_RDC3_CODE, -->
<!-- 		    INTRP_RDC4_YN, INTRP_RDC4_TEXT, INTRP_RDC4_ETC, INTRP_RDC4_ETC_YN, INTRP_RDC4_CODE, -->
<!-- 		    FLCTT_P10_YN, FLCTT_M10_YN, FLCTT_M15_YN, -->
			VOL1_RESULT_CODE, VOL1_CMNT_CODE, VOL1_CMNT,
		    VOL2_RESULT_CODE, VOL2_CMNT_CODE, VOL2_CMNT,
		    VOL3_RESULT_CODE, VOL3_CMNT_CODE, VOL3_CMNT,
		    MSRMN_YEAR, MSRMN_MON, MSRMN_DAY, MSRMN_HOUR, MSRMN_MIN,
		    SIGN, SIGN_URL,
		    RESULT_CODE,
		    MEMO_YN, MEMO,
		    INS_MEM_ID, UDT_MEM_ID
		)
	 	VALUES 
	    (
	        #{vdipSeq}, #{rawSeq},
	        #{vltAcYn}, #{vltEtc}, #{vltEtcYn}, #{varNYn}, #{varYYn},
	        #{room1Yn}, #{room2Yn}, #{roomEtc}, #{roomEtcYn},
	        #{temp}, #{tempPlus}, #{hmdt}, #{hmdtPlus}, #{brmt}, #{brmtPlus},
<!-- 	        #{dipsRdc1Yn}, #{dipsRdc1Text}, #{dipsRdc105Yn}, #{dipsRdc15Yn}, #{dipsRdc125Yn}, #{dipsRdc130Yn}, #{dipsRdc150Yn}, #{dipsRdc1Etc}, #{dipsRdc1EtcYn}, #{dipsRdc1Code}, -->
<!-- 	        #{dipsRdc2Yn}, #{dipsRdc2Text}, #{dipsRdc205Yn}, #{dipsRdc25Yn}, #{dipsRdc225Yn}, #{dipsRdc230Yn}, #{dipsRdc250Yn}, #{dipsRdc2Etc}, #{dipsRdc2EtcYn}, #{dipsRdc2Code}, -->
<!-- 	        #{dipsRdc3Yn}, #{dipsRdc3Text}, #{dipsRdc3Etc}, #{dipsRdc3EtcYn}, #{dipsRdc3Code}, #{dipsRdc4Yn}, #{dipsRdc4Text}, #{dipsRdc4Etc}, #{dipsRdc4EtcYn}, #{dipsRdc4Code},  -->
<!-- 	        #{intrpRdc1Yn}, #{intrpRdc1Text}, #{intrpRdc105Yn}, #{intrpRdc1250Yn}, #{intrpRdc1300Yn}, #{intrpRdc1Etc}, #{intrpRdc1EtcYn}, #{intrpRdc1Code}, #{intrpRdc2Yn}, -->
<!-- 		    #{intrpRdc2Text}, #{intrpRdc2Etc}, #{intrpRdc2EtcYn}, #{intrpRdc2Code}, #{intrpRdc3Yn}, #{intrpRdc3Text}, #{intrpRdc3Etc}, #{intrpRdc3EtcYn}, #{intrpRdc3Code}, #{intrpRdc4Yn}, -->
<!-- 		    #{intrpRdc4Text}, #{intrpRdc4Etc}, #{intrpRdc4EtcYn}, #{intrpRdc4Code}, -->
<!-- 		    #{flcttP10Yn}, #{flcttM10Yn}, #{flcttM15Yn}, -->
			#{vol1ResultCode}, #{vol1CmntCode}, #{vol1Cmnt},
			#{vol2ResultCode}, #{vol2CmntCode}, #{vol2Cmnt},
			#{vol3ResultCode}, #{vol3CmntCode}, #{vol3Cmnt},
			#{msrmnYear}, #{msrmnMon}, #{msrmnDay}, #{msrmnHour}, #{msrmnMin},
			#{sign}, #{signUrl},
			#{resultCode},
			#{memoYn},#{memo}, 
			#{insMemId},#{udtMemId}
	    )
	    ON DUPLICATE KEY UPDATE
	        VLT_AC_YN = #{vltAcYn},
	        VLT_ETC = #{vltEtc},
	        VLT_ETC_YN = #{vltEtcYn},
	        VAR_N_YN = #{varNYn},
	        VAR_Y_YN = #{varYYn},
	        ROOM1_YN = #{room1Yn},
	        ROOM2_YN = #{room2Yn},
	        ROOM_ETC = #{roomEtc},
	        ROOM_ETC_YN = #{roomEtcYn},
	        TEMP = #{temp},
	        TEMP_PLUS = #{tempPlus},
	        HMDT = #{hmdt},
	        HMDT_PLUS = #{hmdtPlus},
	        BRMT = #{brmt},
	        BRMT_PLUS = #{brmtPlus},
	        VOL1_RESULT_CODE = #{vol1ResultCode}, 
	        VOL1_CMNT_CODE = #{vol1CmntCode}, 
	        VOL1_CMNT = #{vol1Cmnt},
		    VOL2_RESULT_CODE = #{vol2ResultCode}, 
		    VOL2_CMNT_CODE = #{vol2CmntCode}, 
		    VOL2_CMNT = #{vol2Cmnt},
		    VOL3_RESULT_CODE = #{vol3ResultCode},
		    VOL3_CMNT_CODE = #{vol3CmntCode}, 
		    VOL3_CMNT = #{vol3Cmnt},
			MSRMN_YEAR = #{msrmnYear},
			MSRMN_MON = #{msrmnMon},
			MSRMN_DAY = #{msrmnDay},
			MSRMN_HOUR = #{msrmnHour},
			MSRMN_MIN = #{msrmnMin},
			SIGN = #{sign},
			<if test="signUrl != null and signUrl != ''">SIGN_URL = #{signUrl},</if>
			RESULT_CODE = #{resultCode},
			MEMO_YN = #{memoYn}, 
			MEMO = #{memo},
			UDT_DT = NOW(),
			UDT_MEM_ID = #{udtMemId}
	</insert>

	<select id="ctiDetail" parameterType="int" resultType="ctiDTO">
		SELECT 
			CTI_SEQ, RAW_SEQ,
		    VLT_DC12_YN, VLT_DC24_YN,
		    VAR_N_YN, VAR_Y_YN,
		    ROOM1_YN, ROOM2_YN, ROOM_ETC, ROOM_ETC_YN,
		    TEMP, TEMP_PLUS,
		    HMDT, HMDT_PLUS,
		    MSRMN_YEAR, MSRMN_MON, MSRMN_DAY, MSRMN_HOUR, MSRMN_MIN,
		    SIGN, FN_GET_IMAGE(SIGN_URL,0) SIGN_URL,
		    RESULT_CODE
		FROM METHOD_CTI_TB
		WHERE 1=1
		AND RAW_SEQ = #{rawSeq}
	</select>
	<insert id="insertCti" parameterType="ctiDTO">
		<selectKey resultType="int" keyProperty="ctiSeq" order="AFTER">
	        SELECT CTI_SEQ FROM METHOD_CTI_TB WHERE RAW_SEQ = #{rawSeq}
	    </selectKey>
	    INSERT INTO METHOD_CTI_TB (
	        CTI_SEQ, RAW_SEQ,
	        VLT_DC12_YN, VLT_DC24_YN,
	        VAR_N_YN, VAR_Y_YN,
	        ROOM1_YN, ROOM2_YN, ROOM_ETC, ROOM_ETC_YN,
	        TEMP, TEMP_PLUS, HMDT, HMDT_PLUS,
	        MSRMN_YEAR, MSRMN_MON, MSRMN_DAY, MSRMN_HOUR, MSRMN_MIN,
	        SIGN, SIGN_URL,
	        RESULT_CODE
	    ) 
	    VALUES (
	       (SELECT ifnull(MAX(seq.CTI_SEQ)+1,1) ctiSeq FROM METHOD_CTI_TB seq), #{rawSeq},
	        #{vltDc12Yn}, #{vltDc24Yn},
	        #{varNYn}, #{varYYn},
	        #{room1Yn}, #{room2Yn}, #{roomEtc}, #{roomEtcYn},
	        #{temp}, #{tempPlus}, #{hmdt}, #{hmdtPlus},
	        #{msrmnYear}, #{msrmnMon}, #{msrmnDay}, #{msrmnHour}, #{msrmnMin},
	        #{sign}, #{signUrl},
	        #{resultCode}
	    )
	    ON DUPLICATE KEY UPDATE
	        VLT_DC12_YN = #{vltDc12Yn},
	        VLT_DC24_YN = #{vltDc24Yn},
	        VAR_N_YN = #{varNYn},
	        VAR_Y_YN = #{varYYn},
	        ROOM1_YN = #{room1Yn},
	        ROOM2_YN = #{room2Yn},
	        ROOM_ETC = #{roomEtc},
	        ROOM_ETC_YN = #{roomEtcYn},
	        TEMP = #{temp},
	        TEMP_PLUS = #{tempPlus},
	        HMDT = #{hmdt},
	        HMDT_PLUS = #{hmdtPlus},
	        MSRMN_YEAR = #{msrmnYear},
	        MSRMN_MON = #{msrmnMon},
	        MSRMN_DAY = #{msrmnDay},
	        MSRMN_HOUR = #{msrmnHour},
	        MSRMN_MIN = #{msrmnMin},
	        SIGN = #{sign},
	        <if test="signUrl != null and signUrl != ''">SIGN_URL = #{signUrl},</if>
	        RESULT_CODE = #{resultCode}
	</insert>

	<insert id="insertCtiSub">
		<foreach collection="ctiSubList" item="item" separator=";">
		INSERT INTO METHOD_CTI_SUB_TB
		(
			CTI_SUB_SEQ,
			CTI_SEQ,
			DC_TYPE,
			PULSE,
			STANDARD,
			RESULT_CODE,
			TEST_MEMO
		)
		VALUES
		(
			#{item.ctiSubSeq},
			#{ctiSeq},
			#{item.dcType},
			#{item.pulse},
			#{item.standard},
			#{item.resultCode},
			#{item.testMemo}
		)
		ON DUPLICATE KEY UPDATE
			DC_TYPE = #{item.dcType},
			PULSE = #{item.pulse},
			STANDARD = #{item.standard},
			RESULT_CODE = #{item.resultCode},
			TEST_MEMO = #{item.testMemo}
		</foreach>
	</insert>
	
	<select id="ctiSubList" parameterType="int" resultType="egovMap">
		SELECT 
			CTI_SUB_SEQ,
		    CTI_SEQ,
		    DC_TYPE,
		    PULSE,
		    STANDARD,
		    RESULT_CODE,
		    TEST_MEMO
		FROM METHOD_CTI_SUB_TB
		WHERE 1=1
		AND CTI_SEQ = #{ctiSeq}
	</select>
	
	<insert id="insertImg" parameterType="imgDTO">
		<selectKey resultType="int" keyProperty="imgSeq" order="BEFORE">
	        SELECT ifnull(MAX(IMG_SEQ)+1,1) FROM METHOD_IMG_TB
	    </selectKey>
	    INSERT INTO METHOD_IMG_TB
	    (
	    	IMG_SEQ,
	    	RAW_SEQ,
	    	PIC_ID,
	    	PIC_YN,
	    	ATCH_FILE_ID,
	    	INS_MEM_ID,
	    	UDT_MEM_ID
	    )
	    VALUES
	    (
	    	#{imgSeq},
	    	#{rawSeq},
	    	#{picId},
	    	#{picYn},
	    	#{atchFileId},
	    	#{insMemId},
	    	#{udtMemId}
	    )
	    ON DUPLICATE KEY UPDATE
	    	PIC_YN = #{picYn},
	    	UDT_MEM_ID = #{udtMemId},
	    	UDT_DT = NOW()
	</insert>
	
	<select id="imgDetail" parameterType="imgDTO" resultType="imgDTO">
		SELECT RAW_SEQ, PIC_ID, ATCH_FILE_ID, PIC_YN
		FROM METHOD_IMG_TB
		WHERE 1=1
		AND RAW_SEQ = #{rawSeq}
		AND PIC_ID = #{picId}
	</select>
	
</mapper>