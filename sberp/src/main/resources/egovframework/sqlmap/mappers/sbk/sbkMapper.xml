<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="egovframework.sbk.service.SbkMapper">

	<select id="selectDetail" parameterType="sbkReq" resultType="sbkRes">
		SELECT
		
			JOB_TB.SBK_YM,
			JOB_TB.SBK_SEQ,
			SBK_TB.REVISION,
			CONCAT ('SB', SBK_TB.SBK_YM, '-' , SBK_TB.TYPE, LPAD(SBK_TB.SBK_SEQ,4,0), IF(REVISION > 0, CONCAT ('-',REVISION), '')) sbkId ,
			IFNULL(FN_GET_SEQSTRING('Q',JOB_TB.QUO_YM,'G',JOB_TB.QUO_SEQ), '') quoId, 
			IFNULL(DATE_FORMAT(SBK_TB.EST_CMP_DT, '%Y-%m-%d'), '-') estCmpDt,
			
			/* 업체정보 */
			IFNULL ((SELECT CMPY_CODE FROM CMPY_TB WHERE CMPY_SEQ = JOB_TB.CMPY_SEQ),'') CMPY_CODE,
			FN_CUST_TYPE (JOB_TB.CMPY_SEQ) cmpyType,
			JOB_TB.CMPY_SEQ,
			JOB_TB.CMPY_MNG_SEQ,
			IFNULL (CMPY_TB.CMPY_NAME, '') cmpyTitle,
			IFNULL (CMPY_MNG_TB.NAME, '') cmpyMngName,
			
			/* 신청인 */
			JOB_TB.CMPY_NAME,
			SBK_TB.BSNS_RGNMB,
			SBK_TB.RPRSN,
			SBK_TB.CRPRT_RGNMB,
			ADDRESS,
			SBK_TB.RSDNT_RGNMB,
			INDST_MF_YN,
			INDST_SL_YN,
			INDST_IP_YN,
			JOB_TB.MNG_NAME,
			MNG_EMAIL,
			FN_GET_PHONE_FORMAT (IFNULL(MNG_TEL, '')) MNG_TEL,
			FN_GET_PHONE_FORMAT (IFNULL(JOB_TB.MNG_FAX, '')) MNG_FAX,
			FN_GET_PHONE_FORMAT (IFNULL(JOB_TB.MNG_PHONE, '')) MNG_PHONE,
			
			/* 신청기기 */
			JOB_TB.PRDCT_NAME,
			JOB_TB.MODEL_NAME,
			EXTEND_MODEL,
			SBK_TB.CMPNY_IDNTF,
			ATHNT_NMBR,
			NEW_CMPNY_IDNTF1,
			NEW_CMPNY_IDNTF2,
			NEW_CMPNY_IDNTF3,
			ELCTR_RTNG_W,
			CLOCK_FRQNC,
			MDL_IDNTF,
			ADD_DEV,
			
			/* 제조자 */
			MNFCT_CMPNY,
			MNFCT_CNTRY_CODE,
			IFNULL (FN_CODE_NAME (MNFCT_CNTRY_CODE, 'SN'), '') MNFCT_CNTRY,
			MNFCT_ADRES,
			ADD_MNFCT_CMPNY,
			ADD_MNFCT_CNTRY,
			
			/* 시험 */
			TEST_PLACE_IN_YN,
			TEST_PLACE_OUT_YN,
			TEST_ADRES,
			ELCTR_TEST_C_YN,
			ELCTR_TEST_K_YN,
			ELCTR_TEST_N_YN,
			TEST_RPRT_K_YN,
			TEST_RPRT_N_YN,
			TEST_RPRT_JODAL_YN,
			TEST_RPRT_SPRT_YN,
			TEST_RPRT_SPRT,
			TEST_RPRT_ETC_YN,
			TEST_RPRT_ETC,
			
			/* 신청규격 */
			SG_NEW_YN, SG_GB_YN, SG_DG_YN, SG_ETC_YN,
			CF_JD_YN, CF_JI_YN, CF_JG_YN, CF_JJ_YN, CF_ETC1_YN, CF_ETC1, CF_AI_YN, CF_AH_YN, CF_GJ_YN, CF_DJ_YN, CF_EH_YN, CF_ETC2_YN, CF_ETC2, CF_CD_YN, CF_CC_YN, CF_FCC_YN, CF_VCCI_YN, CF_PSE_YN,
			TEST_EMC_YN, TEST_EM_YN, TEST_EMF_YN, TEST_TEL_YN, TEST_ROHS_YN, TEST_SS_YN, TEST_SAF_YN, TEST_SM_YN, TEST_DJ_YN, TEST_EH_YN, TEST_RF_YN, TEST_SAR_YN, TEST_OUT_YN, TEST_IN_YN,
			CLASS_A_YN, CLASS_B_YN,
			PP_YN, PP_NAME, PP_NUM, PP_BL, PP_CNT,
			DOC_URL, DOC_IS_YN, DOC_SS_YN, DOC_HD_YN, DOC_BB_YN, DOC_PD_YN, DOC_Bl_YN, DOC_JB_YN, DOC_JS_YN, DOC_CR_YN, DOC_SI_YN, DOC_SG_YN, DOC_SB_YN,
			CNFRM_YN,
			IM_EUT_YN,
			IM_CLNT_YN,
			IM_DLVRY_YN,
			IM_DSPSL_YN,
			IM_ETC_YN,
			CUS_INFO_AGREE_YN,
			EST_CMP_TIME,
			CMPNY_MEMO, REVISION_MEMO,
			
			/* 견적서 금액 */
			/* 신청서에서는 가격정보 보여주지 않음 #12 */
			/* QUO_TB.VAT_YN, QUO_TB.COST_TOTAL, QUO_TB.TOTAL_VAT, */
			
			APP_YEAR, APP_MON, APP_DAY, APP_NAME, FN_GET_IMAGE(APP_SIGN_URL,0) APP_SIGN_URL,
			APP_AGREE_NAME, FN_GET_IMAGE(APP_AGREE_SIGN_URL,0) APP_AGREE_SIGN_URL,
			WORK_CHK_YN, WORK_NAME, FN_GET_IMAGE(WORK_SIGN_URL,0) WORK_SIGN_URL,
			
			MOD_CHECK1_YN, MOD_CHECK2_YN,
			
			im.inCnt, im.outCnt
				
		FROM SBK_TB
		
		    INNER JOIN JOB_TB ON SBK_TB.SBK_YM = JOB_TB.SBK_YM
		    AND SBK_TB.TYPE = JOB_TB.SBK_TYPE
		    AND SBK_TB.SBK_SEQ = JOB_TB.SBK_SEQ
		    AND SBK_TB.REVISION = JOB_TB.SBK_REVISION
		     
		    /* 
		    LEFT JOIN QUO_TB ON QUO_TB.QUO_YM = JOB_TB.QUO_YM
			AND QUO_TB.QUO_SEQ = JOB_TB.QUO_SEQ
			*/
			    
			LEFT JOIN (
						SELECT SBK_ID, sum(qty) inCnt, SUM(IF (CARRY_OUT_CODE IS NOT NULL, QTY, 0)) outCnt 
						FROM IM_TB 
							LEFT JOIN IM_SUB_TB 
							ON IM_SUB_TB.im_id = FN_GET_SEQSTRING ('IM', IM_TB.IM_YM, 'G', IM_TB.IM_SEQ) 
						WHERE DIV_CODE = 1 
						AND IM_SUB_TB.STATE != 'D' 
						GROUP BY SBK_ID) im
	        ON CONCAT ('SB', SBK_TB.SBK_YM, '-' , SBK_TB.TYPE, LPAD(SBK_TB.SBK_SEQ,4,0), IF(REVISION > 0, CONCAT ('-',REVISION), '')) = im.SBK_ID
	        
	        LEFT JOIN CMPY_TB ON JOB_TB.CMPY_SEQ = CMPY_TB.CMPY_SEQ
	        LEFT JOIN CMPY_MNG_TB ON JOB_TB.CMPY_MNG_SEQ = CMPY_MNG_TB.CMPY_MNG_SEQ
        
	    WHERE 1=1
	    <if test="quoId != null and quoId != ''">
	    AND JOB_TB.quo_ym = SUBSTRING(#{quoId},2,4)
		AND JOB_TB.quo_seq = SUBSTRING(#{quoId},8,4)
		</if>
		<if test="sbkId != null and sbkId != ''">
	    AND SBK_TB.SBK_YM = SUBSTRING(#{sbkId},3,2)
	    AND SBK_TB.TYPE = SUBSTRING(#{sbkId},6,1)
		AND SBK_TB.SBK_SEQ = SUBSTRING(#{sbkId},7,4)
		AND SBK_TB.REVISION = SUBSTRING(#{sbkId},12,1)
		</if>
	</select>
	
	<select id="selectTestItemList" parameterType="sbkReq" resultType="egovMap">
		set @rownum:=0;
		
		select lst.*
		from (
			select
				@rownum:=@rownum+1 as no
				#ROW_NUMBER() OVER(ORDER BY TEST_ITEM_TB.TEST_ITEM_SEQ) AS no
				/* 시험항목 및 비용 */
				,TEST_ITEM_TB.test_item_seq
				,B.test_cate_seq crtfc1
				,B.name crtfc1Name
				,A.test_cate_seq crtfc2
				,A.name crtfc2Name
				,TEST_ITEM_TB.TEST_TYPE_CODE
				,TEST_STNDR_TB.TEST_STNDR_SEQ
				,TEST_STNDR_TB.TEST_STNDR
				,concat(B.name,'-',A.name) testCate
				,fn_code_name(TEST_ITEM_TB.TEST_TYPE_CODE,'TT') TEST_TYPE
				,TEST_ITEM_TB.product
				,TEST_ITEM_TB.model
				,TEST_ITEM_TB.memo
				/* 신청서에서는 가격정보 보여주지 않음 #12
				,TEST_ITEM_TB.FEE
				,TEST_ITEM_TB.LCNS_TAX
				,TEST_ITEM_TB.TEST_FEE
				,TEST_ITEM_TB.CHRGS
				,TEST_ITEM_TB.ADVNC_PYMNT
				,TEST_ITEM_TB.SPCL_DSCNT
				,TEST_ITEM_TB.CNSLT_FEE
				,TEST_ITEM_TB.OTSRC_FEE
				,TEST_ITEM_TB.NET_SALES
				*/
				,0 FEE
				,0 LCNS_TAX
				,0 TEST_FEE
				,0 CHRGS
				,0 ADVNC_PYMNT
				,0 SPCL_DSCNT
				,0 CNSLT_FEE
				,0 OTSRC_FEE
				,0 NET_SALES
				,ifnull(FN_DEPT_NAME(TEST_ITEM_TB.rev_id), '') RevDept 
				,ifnull(MEMBER_TB.dept_seq, '') dept_seq
	            ,ifnull(TEST_ITEM_TB.rev_id, '') rev_id
				,ifnull(FN_MEM_NAME(TEST_ITEM_TB.rev_id), '') RevName
				,FN_GET_IMAGE(TEST_ITEM_TB.REV_SIGN_URL,0) REV_SIGN_URL
				,SIGN_STATE_CODE
				,ifnull(fn_code_name(TEST_ITEM_TB.SIGN_STATE_CODE ,'SS'), '-') SIGN_STATE
				,ifnull(date_format(REV_SIGN_DT, '%Y-%m-%d'), '') REV_SIGN_DT
				,'미완료' rawYn
				,ifnull(TEST_SEQ, 0) TEST_SEQ
				,if(TEST_TB.TEST_SEQ is null, '신청하기',fn_code_name(TEST_ITEM_TB.TEST_TYPE_CODE,'TT')) TEST_STATE
				/* 반려메모현황 */ 
				, IFNULL(date_format(TEST_ITEM_REJ_TB.ins_dt, '%Y-%m-%d'),'') rejDtStr
				, fn_code_name(TEST_ITEM_REJ_TB.TOPIC_CODE,'SR') rejType
				, IFNULL(TEST_ITEM_REJ_TB.memo, '') rejMemo
			from JOB_TB    
			
				inner join TEST_ITEM_TB
			    on JOB_TB.quo_ym = TEST_ITEM_TB.quo_ym
			    and JOB_TB.quo_seq = TEST_ITEM_TB.quo_seq
			    and TEST_ITEM_TB.STATE != 'D'
			    
			    inner join TEST_STNDR_TB
			    on TEST_ITEM_TB.TEST_STNDR_SEQ = TEST_STNDR_TB.TEST_STNDR_SEQ
			    
			    inner join TEST_CATE_TB A
			    on TEST_ITEM_TB.CRTF_TYPE_SEQ = A.test_cate_seq
			    
				inner join TEST_CATE_TB B
			    on A.TOP_DEPTH_SEQ = B.test_cate_seq	
			    
			    left join TEST_TB
			    on TEST_TB.TEST_ITEM_SEQ = TEST_ITEM_TB.TEST_ITEM_SEQ
			    
			    /* 반려메모현황 */ 
			    left join TEST_ITEM_REJ_TB
	            on TEST_ITEM_REJ_TB.TEST_ITEM_REJ_SEQ = (
									select TEST_ITEM_REJ_SEQ
	                                from TEST_ITEM_REJ_TB sub
	                                where sub.TEST_ITEM_SEQ = TEST_ITEM_TB.TEST_ITEM_SEQ
	                                order by TEST_ITEM_REJ_SEQ desc
	                                limit 1
	            )
	            
	            left join MEMBER_TB
	            on TEST_ITEM_TB.rev_id = MEMBER_TB.id
	            
			where 1=1
			
			<if test="quoId != null and quoId != ''">
		    and JOB_TB.quo_ym = substring(#{quoId},2,4)
			and JOB_TB.quo_seq = substring(#{quoId},8,4)
			</if>
			<if test="sbkId != null and sbkId != ''">
		    AND JOB_TB.SBK_YM = SUBSTRING(#{sbkId},3,2)
		    AND JOB_TB.SBK_TYPE = SUBSTRING(#{sbkId},6,1)
			AND JOB_TB.SBK_SEQ = SUBSTRING(#{sbkId},7,4)
			AND JOB_TB.SBK_REVISION = IF (SUBSTRING(#{sbkId},12,1)='', 0, SUBSTRING(#{sbkId},12,1))
			</if>
			
			order by TEST_ITEM_TB.TEST_ITEM_SEQ asc
		) lst
		order by no asc
	</select>
	
	<select id="selectRef" parameterType="sbkReq" resultType="String">
  		SELECT FN_GET_SEQSTRING('SB',ifnull(#{sbkYm},date_format(now(), '%y')),#{type},#{sbkSeq}) FROM DUAL
	</select>
	
	<insert id="insertJob" parameterType="sbkReq" >
		INSERT INTO JOB_TB
		(
			SBK_YM,
			SBK_TYPE,
			SBK_SEQ,
			CMPY_SEQ,
			CMPY_MNG_SEQ,
			CMPY_NAME,
			MNG_NAME,
			MNG_PHONE,
			MNG_FAX,
			PRDCT_NAME,
			MODEL_NAME,
			INS_MEM_ID,
			UDT_MEM_ID
		)
		VALUES
		(
			SUBSTRING(#{sbkId},3,2),
			SUBSTRING(#{sbkId},6,1),
			SUBSTRING(#{sbkId},7,4),
			#{cmpySeq},
			#{cmpyMngSeq},
		<![CDATA[
			#{cmpyName},
			#{mngName},
			#{mngPhone},
			#{mngFax},
			#{prdctName},
			#{modelName},
			#{insMemId},
			#{udtMemId}
		)
		]]>
	</insert>

	<update id="updateJob" parameterType="sbkReq" >
		UPDATE JOB_TB
		SET
			CMPY_SEQ = #{cmpySeq},
			CMPY_MNG_SEQ = #{cmpyMngSeq},
			CMPY_NAME = #{cmpyName},
			MNG_NAME = #{mngName},
			MNG_PHONE = #{mngPhone},
			MNG_FAX = #{mngFax},
			PRDCT_NAME = (select ifnull(group_concat(DISTINCT  product), #{prdctName}) 
								from TEST_ITEM_TB where quo_ym = substring(#{quoId},2,4) and quo_seq = substring(#{quoId},8,4) and state != 'D' order by TEST_ITEM_SEQ),
			MODEL_NAME = (select ifnull(group_concat(DISTINCT  model), #{modelName})
								from TEST_ITEM_TB where quo_ym = substring(#{quoId},2,4) and quo_seq = substring(#{quoId},8,4) and state != 'D' order by TEST_ITEM_SEQ),
			UDT_MEM_ID = #{udtMemId},
			UDT_DT = NOW()
			
		WHERE JOB_TB.SBK_YM = SUBSTRING(#{sbkId},3,2)
		AND JOB_TB.SBK_TYPE = SUBSTRING(#{sbkId},6,1)
		AND JOB_TB.SBK_SEQ = SUBSTRING(#{sbkId},7,4)
		AND JOB_TB.SBK_REVISION = IF (SUBSTRING(#{sbkId},12,1)='', 0, SUBSTRING(#{sbkId},12,1))
	</update>
		
	<update id="updateJobSbk" parameterType="sbkReq" >
		UPDATE JOB_TB
		SET 
			SBK_YM = SUBSTRING(#{sbkId},3,2),
			SBK_TYPE = SUBSTRING(#{sbkId},6,1),
			SBK_SEQ = SUBSTRING(#{sbkId},7,4),
			UDT_MEM_ID = #{udtMemId},
			UDT_DT = NOW()
		WHERE JOB_TB.QUO_YM = SUBSTRING(#{quoId},2,4)
		AND JOB_TB.QUO_SEQ = SUBSTRING(#{quoId},8,4)
	</update>
	
	<update id="update" parameterType="sbkReq">
		UPDATE SBK_TB
		SET 
			<if test="estCmpDt != null and estCmpDt != ''">
			EST_CMP_DT = #{estCmpDt},
			</if>
			BSNS_RGNMB = #{bsnsRgnmb},
			RPRSN = #{rprsn},
			CRPRT_RGNMB = #{crprtRgnmb},
			ADDRESS = #{address},
			RSDNT_RGNMB = #{rsdntRgnmb},
			INDST_MF_YN = #{indstMfYn},
			INDST_SL_YN = #{indstSlYn},
			INDST_IP_YN = #{indstIpYn},
			MNG_TEL = #{mngTel},
			MNG_EMAIL = #{mngEmail},
			EXTEND_MODEL = #{extendModel},
			CMPNY_IDNTF = #{cmpnyIdntf},
			ATHNT_NMBR = #{athntNmbr},
			NEW_CMPNY_IDNTF1 = #{newCmpnyIdntf1},
			NEW_CMPNY_IDNTF2 = #{newCmpnyIdntf2},
			NEW_CMPNY_IDNTF3 = #{newCmpnyIdntf3},
			ELCTR_RTNG_W = #{elctrRtngW},
			CLOCK_FRQNC = #{clockFrqnc},
			MDL_IDNTF = #{mdlIdntf},
			ADD_DEV = #{addDev},
			MNFCT_CMPNY = #{mnfctCmpny},
			MNFCT_CNTRY_CODE = #{mnfctCntryCode},
			MNFCT_ADRES = #{mnfctAdres},
			ADD_MNFCT_CMPNY = #{addMnfctCmpny},
			ADD_MNFCT_CNTRY = #{addMnfctCntry},
			TEST_PLACE_IN_YN = #{testPlaceInYn},
			TEST_PLACE_OUT_YN = #{testPlaceOutYn},
			TEST_ADRES = #{testAdres},
			ELCTR_TEST_C_YN = #{elctrTestCYn},
			ELCTR_TEST_K_YN = #{elctrTestKYn},
			ELCTR_TEST_N_YN = #{elctrTestNYn},
			TEST_RPRT_K_YN = #{testRprtKYn},
			TEST_RPRT_N_YN = #{testRprtNYn},
			TEST_RPRT_JODAL_YN = #{testRprtJodalYn},
			TEST_RPRT_SPRT_YN = #{testRprtSprtYn},
			TEST_RPRT_SPRT = #{testRprtSprt},
			TEST_RPRT_ETC_YN = #{testRprtEtcYn},
			TEST_RPRT_ETC = #{testRprtEtc},
			CNFRM_YN = #{cnfrmYn},
			IM_EUT_YN = #{imEutYn},
			IM_CLNT_YN = #{imClntYn},
			IM_DLVRY_YN = #{imDlvryYn},
			IM_DSPSL_YN = #{imDspslYn},
			IM_ETC_YN = #{imEtcYn},
			CUS_INFO_AGREE_YN = #{cusInfoAgreeYn},
			EST_CMP_TIME = #{estCmpTime},
			UDT_MEM_ID = #{udtMemId},
			UDT_DT = NOW(),
			SG_NEW_YN = #{sgNewYn},
			SG_GB_YN = #{sgGbYn},
			SG_DG_YN = #{sgDgYn},
			SG_ETC_YN = #{sgEtcYn},
			CF_JD_YN = #{cfJdYn},
			CF_JI_YN = #{cfJiYn},
			CF_JG_YN = #{cfJgYn},
			CF_JJ_YN = #{cfJjYn},
			CF_ETC1_YN = #{cfEtc1Yn},
			CF_ETC1=#{cfEtc1},
			CF_AI_YN=#{cfAiYn},
			CF_AH_YN=#{cfAhYn},
			CF_GJ_YN=#{cfGjYn},
			CF_DJ_YN=#{cfDjYn},
			CF_EH_YN=#{cfEhYn},
			CF_ETC2_YN=#{cfEtc2Yn},
			CF_ETC2=#{cfEtc2},
			CF_CD_YN=#{cfCdYn},
		    CF_CC_YN=#{cfCcYn},
		    CF_FCC_YN=#{cfFccYn},
		    CF_VCCI_YN=#{cfVcciYn},
		    CF_PSE_YN=#{cfPseYn},
			TEST_EMC_YN=#{testEmcYn},
			TEST_EM_YN=#{testEmYn},
			TEST_EMF_YN=#{testEmfYn},
			TEST_TEL_YN=#{testTelYn},
			TEST_ROHS_YN=#{testRohsYn},
			TEST_SS_YN=#{testSsYn},
			TEST_SAF_YN=#{testSafYn},
			TEST_SM_YN=#{testSmYn},
			TEST_DJ_YN=#{testDjYn},
			TEST_EH_YN=#{testEhYn},
			TEST_RF_YN=#{testRfYn},
			TEST_SAR_YN=#{testSarYn},
			TEST_OUT_YN=#{testOutYn},
			TEST_IN_YN=#{testInYn},
			CLASS_A_YN=#{classAYn},
			CLASS_B_YN=#{classBYn},
			PP_YN=#{ppYn},
			PP_NAME=#{ppName},
			PP_NUM=#{ppNum},
			PP_BL=#{ppBl},
			PP_CNT=#{ppCnt},
			DOC_URL=#{docUrl},
			DOC_IS_YN=#{docIsYn},
			DOC_SS_YN=#{docSsYn},
			DOC_HD_YN=#{docHdYn},
			DOC_BB_YN=#{docBbYn},
			DOC_PD_YN=#{docPdYn},
			DOC_Bl_YN=#{docBlYn},
			DOC_JB_YN=#{docJbYn},
			DOC_JS_YN=#{docJsYn},
			DOC_CR_YN=#{docCrYn},
			DOC_SI_YN=#{docSiYn},
			DOC_SG_YN=#{docSgYn},
			DOC_SB_YN=#{docSbYn},
			APP_YEAR=#{appYear},
			APP_MON=#{appMon},
			APP_DAY=#{appDay},
			<if test="appSignUrl != null and appSignUrl != ''">APP_SIGN_URL=#{appSignUrl},</if>
			APP_NAME=#{appName},
			<if test="appAgreeSignUrl != null and appAgreeSignUrl != ''">APP_AGREE_SIGN_URL=#{appAgreeSignUrl},</if>
			APP_AGREE_NAME=#{appAgreeName},
			<if test="workSignUrl != null and workSignUrl != ''">WORK_SIGN_URL=#{workSignUrl},</if>
			WORK_CHK_YN=#{workChkYn},
			WORK_NAME=#{workName},
			MOD_CHECK1_YN=#{modCheck1Yn},
			MOD_CHECK2_YN=#{modCheck2Yn},
			CMPNY_MEMO=#{cmpnyMemo},
			REVISION_MEMO=#{revisionMemo}
			
		WHERE SBK_YM = SUBSTRING(#{sbkId},3,2)
		AND TYPE = SUBSTRING(#{sbkId},6,1)
		AND SBK_SEQ = SUBSTRING(#{sbkId},7,4)
		AND REVISION = IF (SUBSTRING(#{sbkId},12,1)='', 0, SUBSTRING(#{sbkId},12,1))
	</update>
		
	<insert id="insert" parameterType="sbkReq">
		<selectKey keyProperty="sbkSeq" resultType="int" order="BEFORE">
	        SELECT IFNULL (MAX(SBK_SEQ),0)+1 FROM SBK_TB WHERE SBK_YM = DATE_FORMAT (NOW(), '%y') AND TYPE = #{type}
	    </selectKey>
			INSERT INTO SBK_TB
			(
				SBK_YM,
				SBK_SEQ,
				TYPE,
				<if test="estCmpDt != null and estCmpDt != ''">
				EST_CMP_DT,
				</if>
				BSNS_RGNMB,
				RPRSN,
				CRPRT_RGNMB,
				ADDRESS,
				RSDNT_RGNMB,
				INDST_MF_YN,
				INDST_SL_YN,
				INDST_IP_YN,
				MNG_TEL,
				MNG_EMAIL,
				EXTEND_MODEL,
				CMPNY_IDNTF,
				ATHNT_NMBR,
				NEW_CMPNY_IDNTF1,
				NEW_CMPNY_IDNTF2,
				NEW_CMPNY_IDNTF3,
				ELCTR_RTNG_W,
				CLOCK_FRQNC,
				MDL_IDNTF,
				ADD_DEV,
				MNFCT_CMPNY,
				MNFCT_CNTRY_CODE,
				MNFCT_ADRES,
				ADD_MNFCT_CMPNY,
				ADD_MNFCT_CNTRY,
				TEST_PLACE_IN_YN,
				TEST_PLACE_OUT_YN,
				TEST_ADRES,
				ELCTR_TEST_C_YN,
				ELCTR_TEST_K_YN,
				ELCTR_TEST_N_YN,
				TEST_RPRT_K_YN,
				TEST_RPRT_N_YN,
				TEST_RPRT_JODAL_YN,
				TEST_RPRT_SPRT_YN,
				TEST_RPRT_SPRT,
				TEST_RPRT_ETC_YN,
				TEST_RPRT_ETC,
				CNFRM_YN,
				IM_EUT_YN,
				IM_CLNT_YN,
				IM_DLVRY_YN,
				IM_DSPSL_YN,
				IM_ETC_YN,
				CUS_INFO_AGREE_YN,
				EST_CMP_TIME,
				INS_MEM_ID,
				UDT_MEM_ID,
				SG_NEW_YN,
				SG_GB_YN,
				SG_DG_YN,
				SG_ETC_YN,
				CF_JD_YN,
				CF_JI_YN,
				CF_JG_YN,
				CF_JJ_YN,
				CF_ETC1_YN,
				CF_ETC1,
				CF_AI_YN,
				CF_AH_YN,
				CF_GJ_YN,
				CF_DJ_YN,
				CF_EH_YN,
				CF_ETC2_YN,
				CF_ETC2,
				CF_CD_YN,
			    CF_CC_YN,
			    CF_FCC_YN,
			    CF_VCCI_YN,
			    CF_PSE_YN,
				TEST_EMC_YN,
				TEST_EM_YN,
				TEST_EMF_YN,
				TEST_TEL_YN,
				TEST_ROHS_YN,
				TEST_SS_YN,
				TEST_SAF_YN,
				TEST_SM_YN,
				TEST_DJ_YN,
				TEST_EH_YN,
				TEST_RF_YN,
				TEST_SAR_YN,
				TEST_OUT_YN,
				TEST_IN_YN,
				CLASS_A_YN,
				CLASS_B_YN,
				PP_YN,
				PP_NAME,
				PP_NUM,
				PP_BL,
				PP_CNT,
				DOC_URL,
				DOC_IS_YN,
				DOC_SS_YN,
				DOC_HD_YN,
				DOC_BB_YN,
				DOC_PD_YN,
				DOC_Bl_YN,
				DOC_JB_YN,
				DOC_JS_YN,
				DOC_CR_YN,
				DOC_SI_YN,
				DOC_SG_YN,
				DOC_SB_YN,
				APP_YEAR,
				APP_MON,
				APP_DAY,
				APP_NAME,
				APP_SIGN_URL,
				APP_AGREE_NAME,
				APP_AGREE_SIGN_URL,
				WORK_CHK_YN,
				WORK_NAME,
				WORK_SIGN_URL,
				MOD_CHECK1_YN,
				MOD_CHECK2_YN,
				CMPNY_MEMO
			)
			VALUES
			(
				DATE_FORMAT (NOW(), '%y'),
				#{sbkSeq},
				#{type},
				<if test="estCmpDt != null and estCmpDt != ''">
				#{estCmpDt},
				</if>
				#{bsnsRgnmb},
				#{rprsn},
				#{crprtRgnmb},
				#{address},
				#{rsdntRgnmb},
				#{indstMfYn},
				#{indstSlYn},
				#{indstIpYn},
				#{mngTel},
				#{mngEmail},
				#{extendModel},
				#{cmpnyIdntf},
				#{athntNmbr},
				#{newCmpnyIdntf1},
				#{newCmpnyIdntf2},
				#{newCmpnyIdntf3},
				#{elctrRtngW},
				#{clockFrqnc},
				#{mdlIdntf},
				#{addDev},
				#{mnfctCmpny},
				#{mnfctCntryCode},
				#{mnfctAdres},
				#{addMnfctCmpny},
				#{addMnfctCntry},
				#{testPlaceInYn},
				#{testPlaceOutYn},
				#{testAdres},
				#{elctrTestCYn},
				#{elctrTestKYn},
				#{elctrTestNYn},
				#{testRprtKYn},
				#{testRprtNYn},
				#{testRprtJodalYn},
				#{testRprtSprtYn},
				#{testRprtSprt},
				#{testRprtEtcYn},
				#{testRprtEtc},
				#{cnfrmYn},
				#{imEutYn},
				#{imClntYn},
				#{imDlvryYn},
				#{imDspslYn},
				#{imEtcYn},
				#{cusInfoAgreeYn},
				#{estCmpTime},
				#{insMemId},
				#{udtMemId},
				#{sgNewYn},
				#{sgGbYn},
				#{sgDgYn},
				#{sgEtcYn},
				#{cfJdYn},
				#{cfJiYn},
				#{cfJgYn},
				#{cfJjYn},
				#{cfEtc1Yn},
				#{cfEtc1},
				#{cfAiYn},
				#{cfAhYn},
				#{cfGjYn},
				#{cfDjYn},
				#{cfEhYn},
				#{cfEtc2Yn},
				#{cfEtc2},
				#{cfCdYn},
				#{cfCcYn},
				#{cfFccYn},
				#{cfVcciYn},
				#{cfPseYn},
				#{testEmcYn},
				#{testEmYn},
				#{testEmfYn},
				#{testTelYn},
				#{testRohsYn},
				#{testSsYn},
				#{testSafYn},
				#{testSmYn},
				#{testDjYn},
				#{testEhYn},
				#{testRfYn},
				#{testSarYn},
				#{testOutYn},
				#{testInYn},
				#{classAYn},
				#{classBYn},
				#{ppYn},
				#{ppName},
				#{ppNum},
				#{ppBl},
				#{ppCnt},
				#{docUrl},
				#{docIsYn},
				#{docSsYn},
				#{docHdYn},
				#{docBbYn},
				#{docPdYn},
				#{docBlYn},
				#{docJbYn},
				#{docJsYn},
				#{docCrYn},
				#{docSiYn},
				#{docSgYn},
				#{docSbYn},
				DATE_FORMAT (NOW(), '%Y'),
				DATE_FORMAT (NOW(), '%m'),
				DATE_FORMAT (NOW(), '%d'),
				#{appName},
				#{appSignUrl},
				#{appAgreeName},
				#{appAgreeSignUrl},
				#{workChkYn},
				#{workName},
				#{workSignUrl},
				#{modCheck1Yn},
				#{modCheck2Yn},
				#{cmpnyMemo}
			);

	</insert>

	<select id="selectListCnt" parameterType="comParam" resultType="int">
	SELECT COUNT(1) FROM (		
		SELECT 
			count(1)
		FROM SBK_TB
		
			INNER JOIN JOB_TB ON SBK_TB.SBK_YM = JOB_TB.SBK_YM
			AND SBK_TB.TYPE = JOB_TB.SBK_TYPE
			AND SBK_TB.SBK_SEQ = JOB_TB.SBK_SEQ
			AND SBK_TB.REVISION = JOB_TB.SBK_REVISION
			AND JOB_TB.state != 'D'
		
			LEFT JOIN CMPY_TB
			ON JOB_TB.CMPY_SEQ = CMPY_TB.CMPY_SEQ
    
    		LEFT join TEST_ITEM_TB
		    ON JOB_TB.quo_ym = TEST_ITEM_TB.quo_ym
		    AND JOB_TB.quo_seq = TEST_ITEM_TB.quo_seq
		    
		    LEFT JOIN TEST_STNDR_TB
		    ON TEST_ITEM_TB.TEST_STNDR_SEQ = TEST_STNDR_TB.TEST_STNDR_SEQ
		    
		    LEFT JOIN TEST_CATE_TB cate4 on TEST_ITEM_TB.CRTF_TYPE_SEQ = cate4.TEST_CATE_SEQ
		    LEFT JOIN TEST_CATE_TB cate3 on cate4.TOP_DEPTH_SEQ = cate3.TEST_CATE_SEQ
		    LEFT JOIN TEST_CATE_TB cate2 on cate3.TOP_DEPTH_SEQ = cate2.TEST_CATE_SEQ
		    LEFT JOIN TEST_CATE_TB cate1 on cate2.TOP_DEPTH_SEQ = cate1.TEST_CATE_SEQ
		    
		    LEFT JOIN TEST_TB
		    ON TEST_TB.TEST_ITEM_SEQ = TEST_ITEM_TB.TEST_ITEM_SEQ
		    LEFT JOIN TEST_STATE_TB
            ON TEST_STATE_TB.TEST_STATE_SEQ = (
								SELECT TEST_STATE_SEQ
                                FROM TEST_STATE_TB sub
                                WHERE sub.TEST_SEQ = TEST_TB.TEST_SEQ
                                ORDER BY TEST_STATE_SEQ DESC
                                LIMIT 1
            )
		    LEFT JOIN 
            (
			    SELECT 
			        SBK_ID,
		            IM_YM,
		            IM_SEQ,
		            CARRY_IN_DATE
			    FROM
			        IM_TB
			        
				    LEFT JOIN IM_SUB_TB ON IM_SUB_TB.im_id = CONCAT ('IM', IM_TB.IM_YM, '-', 'G', LPAD(IM_TB.IM_SEQ,4,0))
			    WHERE DIV_CODE = 1 AND IM_SUB_TB.STATE != 'D' GROUP BY SBK_ID
		    ) IM_TB ON IM_TB.SBK_ID = CONCAT ('SB', SBK_TB.SBK_YM, '-' , TYPE, LPAD(SBK_TB.SBK_SEQ,4,0), IF(REVISION > 0, CONCAT ('-',REVISION), ''))
                                   
		WHERE 1=1
		<if test="searchVO != null">
	        <foreach collection="searchVO" item="item" separator="">
	       
	        	<choose>
					<!-- 1	고객유형 -->
					<when test="item.searchCode == 1">AND IFNULL (CMPY_TB.CMPY_CODE,'9999') = #{item.searchWord}</when>
					<!-- 4	컨설팅명 -->
					<when test="item.searchCode == 4">AND IFNULL (CMPY_TB.CMPY_NAME, '') LIKE CONCAT('%',#{item.searchWord},'%')</when>
					<!-- 5	신청서번호 -->
					<when test="item.searchCode == 5">AND CONCAT ('SB', SBK_TB.SBK_YM, '-' , TYPE, LPAD(SBK_TB.SBK_SEQ,4,0), IF(REVISION > 0, CONCAT ('-',REVISION), '')) LIKE CONCAT ('%',#{item.searchWord},'%')</when>
					<!-- 6	제품명 -->
					<when test="item.searchCode == 6">AND IFNULL (JOB_TB.PRDCT_NAME, '') LIKE CONCAT ('%',#{item.searchWord},'%')</when>
					<!-- 7	고지부담당자 -->
					<when test="item.searchCode == 7">AND FN_MEM_NAME(SBK_TB.INS_MEM_ID) LIKE CONCAT('%',#{item.searchWord},'%')</when>
					<!-- 12	회사명 -->
					<when test="item.searchCode == 12">AND IFNULL(JOB_TB.CMPY_NAME, '') LIKE CONCAT('%',#{item.searchWord},'%')</when>
					<!-- 15	작성일 -->
					<when test="item.searchCode == 15">AND DATE_FORMAT (SBK_TB.ins_dt, '%Y%m%d') between date_format(#{item.startDate}, '%Y%m%d') and date_format(#{item.endDate}, '%Y%m%d')</when>
					<!-- 20	예상완료일 -->
					<when test="item.searchCode == 20">AND DATE_FORMAT (SBK_TB.est_cmp_dt, '%Y%m%d') between date_format(#{item.startDate}, '%Y%m%d') and date_format(#{item.endDate}, '%Y%m%d')</when>
					<!-- 21	시료반입일 -->
					<when test="item.searchCode == 21">AND DATE_FORMAT (IM_TB.CARRY_IN_DATE, '%Y%m%d') BETWEEN DATE_FORMAT (#{item.startDate}, '%Y%m%d') AND DATE_FORMAT (#{item.endDate}, '%Y%m%d')</when>
					<!-- 35	국가-->
					<when test="item.searchCode == 35">AND cate1.TEST_CATE_SEQ = #{item.searchWord}</when>
					<!-- 36	인증종류1 -->
					<when test="item.searchCode == 36">AND cate2.TEST_CATE_SEQ = #{item.searchWord}</when>
					<!-- 37	인증종류2 -->
					<when test="item.searchCode == 37">AND cate3.TEST_CATE_SEQ = #{item.searchWord}</when>
					<!-- 38	인증종류3 -->
					<when test="item.searchCode == 38">AND cate4.TEST_CATE_SEQ = #{item.searchWord}</when>
					<!-- 22	신청구분 -->
					<when test="item.searchCode == 22">
						<choose>
							<when test="item.searchWord == 1">AND SG_NEW_YN=1</when>
							<when test="item.searchWord == 2">AND SG_GB_YN=1</when>
							<when test="item.searchWord == 3">AND SG_DG_YN=1</when>
							<when test="item.searchWord == 4">AND SG_ETC_YN=1</when>
						</choose>
					</when>
					<!-- 25	시험배정 -->
					<when test="item.searchCode == 25">and if(TEST_TB.TEST_SEQ is null, '9999', TEST_ITEM_TB.TEST_TYPE_CODE) = #{item.searchWord}</when>
					<!-- 31	시험상태 -->
					<when test="item.searchCode == 31">and TEST_STATE_TB.STATE_CODE = #{item.searchWord}</when> 
					<!-- 27	모델명 -->
	        		<when test="item.searchCode == 27">and IFNULL(TEST_ITEM_TB.model, '') like concat('%',#{item.searchWord},'%')</when>
       				<!-- 56	신청서구분 -->
	        		<when test="item.searchCode == 56">
	        			<choose>
	        				<when test="item.searchWord == 1">AND REVISION = 0</when>
	        				<when test="item.searchWord == 2">AND REVISION != 0</when>
	        			</choose>
	        		</when>
	        		<!-- 23	시험부 -->
	        		<when test="item.searchCode == 23">AND TEST_ITEM_TB.TEST_TYPE_CODE = #{item.searchWord}</when>
	        		<!-- 24	기책서명 -->
	        		<when test="item.searchCode == 24">AND IF (TEST_ITEM_TB.REV_SIGN_URL IS NULL, TEST_ITEM_TB.SIGN_STATE_CODE, '3') = #{item.searchWord}</when>
	        		<!-- 57	프로젝트상태 -->
	        		<when test="item.searchCode == 57">AND JOB_TB.STATE_CODE = #{item.searchWord}</when>
	        		<!-- 58	프로젝트상태변경일 -->
	        		<when test="item.searchCode == 58">AND DATE_FORMAT (JOB_TB.STATE_UDT_DT, '%Y%m%d') BETWEEN DATE_FORMAT (#{item.startDate}, '%Y%m%d') AND DATE_FORMAT (#{item.endDate}, '%Y%m%d')</when>
	        	</choose>
	        	
	        </foreach>
        </if>
        GROUP BY SBK_TB.SBK_YM, SBK_TB.SBK_SEQ, SBK_TB.TYPE, SBK_TB.REVISION
        
        ) cnt
	</select>
	
	<resultMap type="sbkRes" id="sbkMap">
		<id column="sbkId" property="sbkId"/>
		<result column="no" property="no"/>
		<result column="job_seq" property="jobSeq"/>
		<result column="type" property="type"/>
		<result column="stateCode" property="stateCode"/>
		<result column="stateUdtDt" property="stateUdtDt"/>
		<result column="revision" property="revision"/>
		<result column="insDtStr" property="insDtStr"/>
		<result column="estCmpDt" property="estCmpDt"/>
		<result column="cmpy_seq" property="cmpySeq"/>
		<result column="cmpyType" property="cmpyType"/>
		<result column="cmpyTitle" property="cmpyTitle"/>
		<result column="cmpyName" property="cmpyName"/>
		<result column="prdct_name" property="prdctName"/>
		<result column="sgText" property="sgText"/>
		<result column="memName" property="memName"/>
		<result column="cns_seq" property="cnsSeq"/>
		<result column="lastMemo" property="lastMemo"/>
		<result column="carryInDt" property="carryInDt"/>
		<collection property="items" ofType="testItemDTO">
        	<id column="test_item_seq" property="testItemSeq"/>
        	<result column="crtfc1" property="crtfc1"/>
	        <result column="crtfc1Name" property="crtfc1Name"/>
    	    <result column="crtfc2" property="crtfc2"/>
       	 	<result column="crtfc2Name" property="crtfc2Name"/>
       	 	<result column="crtfc3" property="crtfc3"/>
       	 	<result column="crtfc3Name" property="crtfc3Name"/>
       	 	<result column="crtfc4" property="crtfc4"/>
       	 	<result column="crtfc4Name" property="crtfc4Name"/>
       	 	<result column="test_type_code" property="testTypeCode"/>
       	 	<result column="test_stndr_seq" property="testStndrSeq"/>
       	 	<result column="test_stndr" property="testStndr"/>
       	 	<result column="test_type" property="testType"/>
       	 	<result column="model" property="model"/>
       	 	<result column="sign_state_code" property="signStateCode"/>
       	 	<result column="sign_state" property="signState"/>
       	 	<result column="testMemDept" property="testMemDept"/>
       	 	<result column="testMem" property="testMem"/>
       	 	<result column="testInDt" property="testInDt"/>
       	 	<result column="rawYn" property="rawYn"/>
       	 	<result column="test_seq" property="testSeq"/>
       	 	<result column="test_state" property="testState"/>
        </collection>
	</resultMap>
	<select id="selectList" parameterType="comParam" resultMap="sbkMap">
		set @prev_value:=null;
		select * from (
			select
			    if(
			        @prev_value = sbkId,
			        @dense_rank,
			        @dense_rank := @dense_rank + 1
			    ) AS no,
			    @prev_value := sbkId,
			    lst.*
			from
			    (
			        SELECT
			            #DENSE_RANK() OVER(ORDER BY SBK_TB.ins_dt) AS no,
			            JOB_TB.JOB_SEQ,
			            SBK_TB.TYPE,
			            IFNULL (FN_CODE_NAME (JOB_TB.STATE_CODE, 'CP'), '변경') stateCode,
			    		IFNULL (DATE_FORMAT (JOB_TB.STATE_UDT_DT, '%Y-%m-%d'), '') stateUdtDt,
					    SBK_TB.INS_DT,
					    DATE_FORMAT (SBK_TB.INS_DT, '%Y-%m-%d') insDtStr,
					    CONCAT ('SB', SBK_TB.SBK_YM, '-' , SBK_TB.TYPE, LPAD(SBK_TB.SBK_SEQ,4,0), IF(REVISION > 0, CONCAT ('-',REVISION), '')) sbkId,
					    REVISION,
					    IFNULL (DATE_FORMAT (SBK_TB.EST_CMP_DT, '%Y-%m-%d'), '-') estCmpDt,
					    JOB_TB.CMPY_SEQ,
					    IFNULL (FN_CODE_NAME (CMPY_TB.CMPY_CODE, 'PT'), '미등록') cmpyType,
					    IFNULL (CMPY_TB.CMPY_NAME, '') cmpyTitle,
					    IFNULL (JOB_TB.CMPY_NAME, '') cmpyName,
					    JOB_TB.PRDCT_NAME,
					    CONCAT_WS (
					        ',',
					        IF (SG_NEW_YN = 1, '신규', null),
					        IF (SG_GB_YN = 1, '기술기준 변경', null),
					        IF (SG_DG_YN = 1, '동일기자재', null),
					        IF (SG_ETC_YN = 1, '기술기준외 변경', null)
					    ) sgText,
					    FN_MEM_NAME (SBK_TB.INS_MEM_ID) memName,
					    IFNULL (JOB_TB.CNS_SEQ, '') CNS_SEQ,
					    IFNULL (FN_LAST_CNS_MENO (JOB_TB.CNS_SEQ), '') lastMemo,
					    /* 현장시험일 경우에는 시료반입일에 현장시험 노출 */
					    IF (TEST_PLACE_OUT_YN=1,'현장시험',IFNULL (DATE_FORMAT (IM_TB.CARRY_IN_DATE, '%Y-%m-%d'),'-')) carryInDt,
					    
					    /* 시험항목 및 비용 */
					    TEST_ITEM_TB.TEST_ITEM_SEQ,
					    cate1.TEST_CATE_SEQ crtfc1,
					    cate2.TEST_CATE_SEQ crtfc2,
					    cate3.TEST_CATE_SEQ crtfc3,
					    cate4.TEST_CATE_SEQ crtfc4,
					    cate1.NAME crtfc1Name,
					    IFNULL (cate2.NAME, '') crtfc2Name,
					    IFNULL (cate3.NAME, '') crtfc3Name,
					    IFNULL (cate4.NAME, '') crtfc4Name,
					    TEST_ITEM_TB.TEST_TYPE_CODE,
					    TEST_STNDR_TB.TEST_STNDR_SEQ,
					    IFNULL (TEST_STNDR_TB.TEST_STNDR, '') TEST_STNDR,
					    IFNULL (
					        FN_CODE_NAME (TEST_ITEM_TB.TEST_TYPE_CODE, 'TT'),
					        ''
					    ) TEST_TYPE,
					    IFNULL (TEST_ITEM_TB.model, '') model,
					    SIGN_STATE_CODE,
					    if (
					        TEST_ITEM_TB.REV_SIGN_URL IS NULL,
					        IFNULL (
					            FN_CODE_NAME (TEST_ITEM_TB.SIGN_STATE_CODE, 'SS'),
					            '-'
					        ),
					        '서명완료'
					    ) SIGN_STATE,
					    IFNULL (FN_DEPT_NAME(TEST_TB.INS_MEM_ID), '') testMemDept,
					    CONCAT(FN_POS_NAME(TEST_TB.INS_MEM_ID), ' ',FN_MEM_NAME (TEST_TB.INS_MEM_ID)) testMem,
                        IFNULL (DATE_FORMAT (TEST_TB.INS_DT, '%Y-%m-%d'), '') testInDt,
					    IFNULL(FN_CODE_NAME(TEST_STATE_TB.STATE_CODE,'TS'), '-') rawYn,
					    IFNULL (TEST_TB.TEST_SEQ, 0) TEST_SEQ,
					    if (
					        TEST_TB.TEST_SEQ IS NULL,
					        '신청하기',
					        FN_CODE_NAME (TEST_ITEM_TB.TEST_TYPE_CODE, 'TT')
					    ) TEST_STATE
					FROM
					    SBK_TB
					    INNER JOIN JOB_TB ON SBK_TB.SBK_YM = JOB_TB.SBK_YM
					    AND SBK_TB.TYPE = JOB_TB.SBK_TYPE
					    AND SBK_TB.SBK_SEQ = JOB_TB.SBK_SEQ 
					    AND SBK_TB.REVISION = JOB_TB.SBK_REVISION
					    AND JOB_TB.STATE != 'D'
					    LEFT JOIN CMPY_TB ON JOB_TB.CMPY_SEQ = CMPY_TB.CMPY_SEQ
					    LEFT JOIN TEST_ITEM_TB on JOB_TB.QUO_YM = TEST_ITEM_TB.QUO_YM
					    AND JOB_TB.QUO_SEQ = TEST_ITEM_TB.QUO_SEQ and TEST_ITEM_TB.STATE != 'D'
					    LEFT JOIN TEST_STNDR_TB on TEST_ITEM_TB.TEST_STNDR_SEQ = TEST_STNDR_TB.TEST_STNDR_SEQ
					    LEFT JOIN TEST_CATE_TB cate4 ON TEST_ITEM_TB.CRTF_TYPE_SEQ = cate4.TEST_CATE_SEQ
					    LEFT JOIN TEST_CATE_TB cate3 ON cate4.TOP_DEPTH_SEQ = cate3.TEST_CATE_SEQ
					    LEFT JOIN TEST_CATE_TB cate2 ON cate3.TOP_DEPTH_SEQ = cate2.TEST_CATE_SEQ
					    LEFT JOIN TEST_CATE_TB cate1 ON cate2.TOP_DEPTH_SEQ = cate1.TEST_CATE_SEQ
					    LEFT JOIN TEST_TB on TEST_TB.TEST_ITEM_SEQ = TEST_ITEM_TB.TEST_ITEM_SEQ
					    LEFT JOIN TEST_STATE_TB
			            ON TEST_STATE_TB.TEST_STATE_SEQ = (
											SELECT TEST_STATE_SEQ
			                                FROM TEST_STATE_TB sub
			                                WHERE sub.TEST_SEQ = TEST_TB.TEST_SEQ
			                                ORDER BY TEST_STATE_SEQ DESC
			                                LIMIT 1
			            )
			            LEFT JOIN 
			            (
						    SELECT 
						        SBK_ID,
					            IM_YM,
					            IM_SEQ,
					            CARRY_IN_DATE
						    FROM
						        IM_TB
						        
							    LEFT JOIN IM_SUB_TB ON IM_SUB_TB.im_id = CONCAT ('IM', IM_TB.IM_YM, '-', 'G', LPAD(IM_TB.IM_SEQ,4,0))
						    WHERE DIV_CODE = 1 AND IM_SUB_TB.STATE != 'D' GROUP BY SBK_ID
					    ) IM_TB ON IM_TB.SBK_ID = CONCAT ('SB', SBK_TB.SBK_YM, '-' , TYPE, LPAD(SBK_TB.SBK_SEQ,4,0), IF(REVISION > 0, CONCAT ('-',REVISION), ''))
                        
                        INNER JOIN (SELECT @dense_rank:=0) r
					where
					    1 = 1
				<if test="searchVO != null">
			        <foreach collection="searchVO" item="item" separator="">
			       
			        	<choose>
							<!-- 1	고객유형 -->
							<when test="item.searchCode == 1">AND IFNULL (CMPY_TB.CMPY_CODE,'9999') = #{item.searchWord}</when>
							<!-- 4	컨설팅명 -->
							<when test="item.searchCode == 4">AND IFNULL (CMPY_TB.CMPY_NAME, '') LIKE CONCAT ('%',#{item.searchWord},'%')</when>
							<!-- 5	신청서번호 -->
							<when test="item.searchCode == 5">AND CONCAT ('SB', SBK_TB.SBK_YM, '-' , TYPE, LPAD(SBK_TB.SBK_SEQ,4,0), IF(REVISION > 0, CONCAT ('-',REVISION), '')) LIKE CONCAT ('%',#{item.searchWord},'%')</when>
							<!-- 6	제품명 -->
							<when test="item.searchCode == 6">AND IFNULL (JOB_TB.PRDCT_NAME, '') LIKE CONCAT ('%',#{item.searchWord},'%')</when>
							<!-- 7	고지부담당자 -->
							<when test="item.searchCode == 7">AND FN_MEM_NAME(SBK_TB.INS_MEM_ID) LIKE CONCAT ('%',#{item.searchWord},'%')</when>
							<!-- 12	회사명 -->
							<when test="item.searchCode == 12">AND IFNULL (JOB_TB.CMPY_NAME, '') LIKE CONCAT ('%',#{item.searchWord},'%')</when>
							<!-- 15	작성일 -->
							<when test="item.searchCode == 15">AND DATE_FORMAT (SBK_TB.INS_DT, '%Y%m%d') BETWEEN DATE_FORMAT (#{item.startDate}, '%Y%m%d') AND DATE_FORMAT (#{item.endDate}, '%Y%m%d')</when>
							<!-- 20	예상완료일 -->
							<when test="item.searchCode == 20">AND DATE_FORMAT (SBK_TB.EST_CMP_DT, '%Y%m%d') BETWEEN DATE_FORMAT (#{item.startDate}, '%Y%m%d') AND DATE_FORMAT (#{item.endDate}, '%Y%m%d')</when>
							<!-- 21	시료반입일 -->
							<when test="item.searchCode == 21">AND DATE_FORMAT (IM_TB.CARRY_IN_DATE, '%Y%m%d') BETWEEN DATE_FORMAT (#{item.startDate}, '%Y%m%d') AND DATE_FORMAT (#{item.endDate}, '%Y%m%d')</when>
							<!-- 35	국가-->
							<when test="item.searchCode == 35">AND cate1.TEST_CATE_SEQ = #{item.searchWord}</when>
							<!-- 36	인증종류1 -->
							<when test="item.searchCode == 36">AND cate2.TEST_CATE_SEQ = #{item.searchWord}</when>
							<!-- 37	인증종류2 -->
							<when test="item.searchCode == 37">AND cate3.TEST_CATE_SEQ = #{item.searchWord}</when>
							<!-- 38	인증종류3 -->
							<when test="item.searchCode == 38">AND cate4.TEST_CATE_SEQ = #{item.searchWord}</when>
							<!-- 22	신청구분 -->
							<when test="item.searchCode == 22">
								<choose>
									<when test="item.searchWord == 1">AND SG_NEW_YN=1</when>
									<when test="item.searchWord == 2">AND SG_GB_YN=1</when>
									<when test="item.searchWord == 3">AND SG_DG_YN=1</when>
									<when test="item.searchWord == 4">AND SG_ETC_YN=1</when>
								</choose>
							</when>
							<!-- 25	시험배정 -->
							<when test="item.searchCode == 25">AND IF (TEST_TB.TEST_SEQ IS NULL, '9999', TEST_ITEM_TB.TEST_TYPE_CODE) = #{item.searchWord}</when>
							<!-- 31	시험상태 -->
							<when test="item.searchCode == 31">AND TEST_STATE_TB.STATE_CODE = #{item.searchWord}</when> 
							<!-- 27	모델명 -->
			        		<when test="item.searchCode == 27">AND IFNULL(TEST_ITEM_TB.MODEL, '') like concat('%',#{item.searchWord},'%')</when>
			        		<!-- 56	신청서구분 -->
			        		<when test="item.searchCode == 56">
			        			<choose>
			        				<when test="item.searchWord == 1">AND REVISION = 0</when>
			        				<when test="item.searchWord == 2">AND REVISION != 0</when>
			        			</choose>
			        		</when>
			        		<!-- 23	시험부 -->
			        		<when test="item.searchCode == 23">AND TEST_ITEM_TB.TEST_TYPE_CODE = #{item.searchWord}</when>
			        		<!-- 24	기책서명 -->
			        		<when test="item.searchCode == 24">AND IF (TEST_ITEM_TB.REV_SIGN_URL IS NULL, TEST_ITEM_TB.SIGN_STATE_CODE, '3') = #{item.searchWord}</when>
			        		<!-- 57	프로젝트상태 -->
			        		<when test="item.searchCode == 57">AND JOB_TB.STATE_CODE = #{item.searchWord}</when>
			        		<!-- 58	프로젝트상태변경일 -->
			        		<when test="item.searchCode == 58">AND DATE_FORMAT (JOB_TB.STATE_UDT_DT, '%Y%m%d') BETWEEN DATE_FORMAT (#{item.startDate}, '%Y%m%d') AND DATE_FORMAT (#{item.endDate}, '%Y%m%d')</when>
			        	</choose>
			        	
			        </foreach>
		        </if>
		        #ORDER BY SBK_TB.SBK_YM, SBK_TB.SBK_SEQ, REVISION DESC
		        ORDER BY SBK_TB.INS_DT, REVISION DESC
	        ) lst
	        WHERE 1=1
	        ORDER BY NO DESC
        ) paging
        WHERE 1=1
        AND no BETWEEN #{totalCount}+1-#{pageUnit}-#{firstIndex} AND #{totalCount}-#{firstIndex}
	</select>
	
	
	<update id="updateTestItemSign">
			UPDATE TEST_ITEM_TB
			SET
				<if test="revId != null and revId != ''">
				REV_ID = #{revId},
				REV_SIGN_DT = NOW(),
				SIGN_STATE_CODE = '2',
				</if>
				<if test="(revSignUrl != null and revSignUrl != '') or state = 'D'">REV_SIGN_URL = #{revSignUrl},</if>
		<![CDATA[
				UDT_MEM_ID = #{udtMemId},
				UDT_DT = NOW()
			WHERE TEST_ITEM_SEQ = #{testItemSeq}
		]]>
	</update>
	
	<select id="signRejectList" parameterType="String" resultType="egovMap">
		SELECT
			DATE_FORMAT(TEST_ITEM_REJ_TB.INS_DT, '%Y-%m-%d') instDtStr,
		    MEMBER_TB.MEM_NAME insName,
		    FN_CODE_NAME(TEST_ITEM_REJ_TB.TOPIC_CODE,'SR') topicType,
		    MEMO
		    
		FROM TEST_ITEM_REJ_TB
		
			INNER JOIN MEMBER_TB
			ON TEST_ITEM_REJ_TB.INS_MEM_ID = MEMBER_TB.ID
		
		WHERE 1=1
		AND TEST_ITEM_REJ_TB.TEST_ITEM_SEQ = #{testItemSeq}
		ORDER BY TEST_ITEM_REJ_SEQ DESC
	</select>
	
	<insert id="signRejectInsert" parameterType="testItemRejDTO" >
		INSERT INTO TEST_ITEM_REJ_TB
		(
			TEST_ITEM_SEQ,
			TOPIC_CODE,
			MEMO,
			INS_MEM_ID,
			UDT_MEM_ID
		)
		VALUES
		(
			#{testItemSeq},
			#{topicCode},
			#{memo},
			#{insMemId},
			#{udtMemId}
		);
	</insert>
	
	<select id="hisList" parameterType="String" resultType="egovMap">
		SELECT 
		
			DATE_FORMAT (SBK_HIS_TB.ins_dt, '%Y-%m-%d %T') intDtStr,
		    MEMBER_TB.MEM_NAME,
		    FN_POS_NAME(SBK_HIS_TB.MEM_ID) memPos
			
		FROM SBK_HIS_TB
		
			INNER JOIN MEMBER_TB ON SBK_HIS_TB.MEM_ID = MEMBER_TB.ID
		    
		WHERE 1=1 AND SBK_HIS_TB.SBK_ID = #{sbkId}
		ORDER BY SBK_HIS_TB.INS_DT DESC
	</select>
	
</mapper>